[{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement j.w.l.lambert@rug.nl. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to DAISIEprep","title":"Contributing to DAISIEprep","text":"outlines propose change DAISIEprep.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to DAISIEprep","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to DAISIEprep","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to DAISIEprep","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"joshwlambert/DAISIEprep\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to DAISIEprep","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to DAISIEprep","text":"Please note DAISIEprep project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://joshwlambert.github.io/DAISIEprep/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua W. Lambert. Author, maintainer.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert J (2022). DAISIEprep: Extracts phylogenetic island community data phylogenetic trees. R package version 0.1.0, https://joshwlambert.github.io/DAISIEprep.","code":"@Manual{,   title = {DAISIEprep: Extracts phylogenetic island community data from phylogenetic trees},   author = {Joshua W. Lambert},   year = {2022},   note = {R package version 0.1.0},   url = {https://joshwlambert.github.io/DAISIEprep}, }"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"package-description","dir":"","previous_headings":"","what":"Package description","title":"Extracts phylogenetic island community data from phylogenetic trees","text":"DAISIEprep R package enables extraction formatting phylogenetic data island species inference model DAISIE (Dynamic Assembly Island biota Speciation, Immigration Extinction). central function, DAISIEprep::extract_island_species(), uses data phylogenetic trees species island endemicity statuses (.e. endemic island, non-endemic, present island). phylogenetic endemicity data handled together using phylo4d S4 class phylobase R package. DAISIEprep fills niche standardised, reproducible data processing suite DAISIE inference models. Unlike phylogenetic methods implemented R, DAISIE yet defined methodological framework extract format data prior analysis. phylogenetic models R use common phylo S3 data structure defined R package ape, DAISIE idiosynchratic data structure unfamiliar new users. package provides set tools users facilitate application DAISIE model research. package also opens possibility extracted data ‘big data’ macrophylogenies (>5,000 species) impeded researchers previously extract data manually. two algorithms extract data min algorithm asr (ancestral state reconstruction) algorithm. former based rules/assumptions DAISIE inference model colonisation species mainland source pool, speciation island cladogenesis anagenensis, island extinction. Therefore, algorithm assumes back-colonisation island mainland mainland evolutionary processes. data seems conform assumptions (visual inspection) good method choose (DAISIEprep::extract_island_species(phylod, extraction_method = “min”). Alternatively, data may violate assumptions, , example species within island radiation migrate back mainland. , , cases asr algorithm provides method extract data based probably reconstruction species ranges (.e. island presence/absence) can extract clades may non-island species. asr algorithm utilises ancestral state reconstruction methods packages (e.g. castor), package flexible users extending incorporate models may better suit data set.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extracts phylogenetic island community data from phylogenetic trees","text":"","code":"remotes::install.packages(\"remotes\") remotes::install_github(\"joshwlambert/DAISIEprep\")"},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"Extracts phylogenetic island community data from phylogenetic trees","text":"See tutorial.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Extracts phylogenetic island community data from phylogenetic trees","text":"report bug please open issue email j.w.l.lambert@rug.nl.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Extracts phylogenetic island community data from phylogenetic trees","text":"DAISIE team always welcomes contributions packages. like contribute package please follow contributing guidelines","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Extracts phylogenetic island community data from phylogenetic trees","text":"Please note DAISIEprep project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor functions for the data (slots) in objects of the\nIsland_colonist class — get_clade_name","title":"Accessor functions for the data (slots) in objects of the\nIsland_colonist class — get_clade_name","text":"Accessor functions data (slots) objects Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor functions for the data (slots) in objects of the\nIsland_colonist class — get_clade_name","text":"","code":"get_clade_name(x)  # S4 method for Island_colonist get_clade_name(x)  set_clade_name(x) <- value  # S4 method for Island_colonist set_clade_name(x) <- value  get_status(x)  # S4 method for Island_colonist get_status(x)  set_status(x) <- value  # S4 method for Island_colonist set_status(x) <- value  get_missing_species(x)  # S4 method for Island_colonist get_missing_species(x)  set_missing_species(x) <- value  # S4 method for Island_colonist set_missing_species(x) <- value  get_branching_times(x)  # S4 method for Island_colonist get_branching_times(x)  set_branching_times(x) <- value  # S4 method for Island_colonist set_branching_times(x) <- value  get_min_age(x)  # S4 method for Island_colonist get_min_age(x)  set_min_age(x) <- value  # S4 method for Island_colonist set_min_age(x) <- value"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor functions for the data (slots) in objects of the\nIsland_colonist class — get_clade_name","text":"x object whose class determined signature. value value can take several forms assigned object class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor functions for the data (slots) in objects of the\nIsland_colonist class — get_clade_name","text":"Joshua W. Lambert","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor functions for the data (slots) in objects of the\nIsland_colonist class — get_clade_name","text":"","code":"colonist <- island_colonist()   get_clade_name(colonist) #> [1] NA   set_clade_name(colonist) <- \"abc\"   get_status(colonist) #> [1] NA   set_status(colonist) <- \"abc\"   get_missing_species(colonist) #> [1] NA   set_missing_species(colonist) <- 0   get_branching_times(colonist) #> [1] NA   set_branching_times(colonist) <- 0"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor functions for the data (slots) in objects of the\nIsland_tbl class — get_island_tbl","title":"Accessor functions for the data (slots) in objects of the\nIsland_tbl class — get_island_tbl","text":"Accessor functions data (slots) objects Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor functions for the data (slots) in objects of the\nIsland_tbl class — get_island_tbl","text":"","code":"get_island_tbl(x)  # S4 method for Island_tbl get_island_tbl(x)  set_island_tbl(x) <- value  # S4 method for Island_tbl set_island_tbl(x) <- value  get_extracted_species(x)  # S4 method for Island_tbl get_extracted_species(x)  set_extracted_species(x) <- value  # S4 method for Island_tbl set_extracted_species(x) <- value  get_num_phylo_used(x)  # S4 method for Island_tbl get_num_phylo_used(x)  set_num_phylo_used(x) <- value  # S4 method for Island_tbl set_num_phylo_used(x) <- value"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor functions for the data (slots) in objects of the\nIsland_tbl class — get_island_tbl","text":"x object whose class determined signature. value value can take several forms assigned object class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor functions for the data (slots) in objects of the\nIsland_tbl class — get_island_tbl","text":"Joshua W. Lambert","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor functions for the data (slots) in objects of the\nIsland_tbl class — get_island_tbl","text":"","code":"island_tbl <- island_tbl() get_island_tbl(island_tbl) #> [1] clade_name      status          missing_species branching_times #> [5] min_age         #> <0 rows> (or 0-length row.names) set_island_tbl(island_tbl) <- data.frame(   clade_name = \"birds\",   status = \"endemic\",   missing_species = 0,   branching_times = I(list(c(1.0, 0.5))) )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Multi_island_tbl-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines the `Multi_island_tbl` class which is multiple `Island_tbl`s. — Multi_island_tbl-class","title":"Defines the `Multi_island_tbl` class which is multiple `Island_tbl`s. — Multi_island_tbl-class","text":"Defines `Multi_island_tbl` class multiple `Island_tbl`s.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Multi_island_tbl-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Defines the `Multi_island_tbl` class which is multiple `Island_tbl`s. — Multi_island_tbl-class","text":"multi_island_tbl list `Island_tbl`.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"Fits model ancestral state reconstruction island presence","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"","code":"add_asr_node_states(   phylod,   asr_method,   tie_preference = \"island\",   earliest_col = FALSE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. asr_method character string, either \"parsimony\" \"mk\" determines whether maximum parsimony continuous-time markov model reconstructs ancestral states node. See documentation `castor::asr_maximum_parsimony` `castor::asr_mk` `castor` R package details methods used. tie_preference Character string, either \"island\" \"mainland\" choose probable state node using `max.col()` function. node island presence absence equally probable need decide whether species considered island. consider island use `ties.method = \"last\"` `max.col()` function, consider island use `ties.method = \"first\"`. Default \"island\". earliest_col boolean determine whether take colonisation time probable time (FALSE) earliest possible colonisation time (TRUE), probability species island non-zero. Default FALSE.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"object `phylo4d` class tip node data","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"","code":"if (FALSE) { #WIP }"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds the missing species to the clades that have missing species from the\ntree in the Island_tbl object. This is to be used after\nextract_island_species to input missing species. — add_missing_species","title":"Adds the missing species to the clades that have missing species from the\ntree in the Island_tbl object. This is to be used after\nextract_island_species to input missing species. — add_missing_species","text":"Adds missing species clades missing species tree Island_tbl object. used extract_island_species input missing species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds the missing species to the clades that have missing species from the\ntree in the Island_tbl object. This is to be used after\nextract_island_species to input missing species. — add_missing_species","text":"","code":"add_missing_species(island_tbl, missing_species_df)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds the missing species to the clades that have missing species from the\ntree in the Island_tbl object. This is to be used after\nextract_island_species to input missing species. — add_missing_species","text":"island_tbl instance `Island_tbl` class. missing_species_df data frame containing names clades extracted phylogeny number missing species clade. every clade extracted phylogeny needs included number missing species clades zero.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds the missing species to the clades that have missing species from the\ntree in the Island_tbl object. This is to be used after\nextract_island_species to input missing species. — add_missing_species","text":"Data frame single column character strings row names","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds the missing species to the clades that have missing species from the\ntree in the Island_tbl object. This is to be used after\nextract_island_species to input missing species. — add_missing_species","text":"","code":"if (FALSE) { missing_species_df <- data.frame(clade_name = \"bird_a\", missing_species = 1) island_tbl <- NULL add_missing_species(island_tbl, missing_species) }"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an outgroup species to a given phylogeny. — add_outgroup","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"Add outgroup species given phylogeny.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"","code":"add_outgroup(phylo)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"phylo phylogeny either `phylo` (`ape` package) `phylo4` (`phylobase` package) object.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"`phylo` object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"","code":"phylo <- ape::rcoal(10) phylo_with_outgroup <- add_outgroup(phylo)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether all species given in the descendants vector are the same\nspecies. — all_descendants_conspecific","title":"Checks whether all species given in the descendants vector are the same\nspecies. — all_descendants_conspecific","text":"Checks whether species given descendants vector species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether all species given in the descendants vector are the same\nspecies. — all_descendants_conspecific","text":"","code":"all_descendants_conspecific(descendants)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether all species given in the descendants vector are the same\nspecies. — all_descendants_conspecific","text":"descendants vector character strings names species determine whether species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether all species given in the descendants vector are the same\nspecies. — all_descendants_conspecific","text":"Boolean","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether all species given in the descendants vector are the same\nspecies. — all_descendants_conspecific","text":"","code":"# Example where species are not conspecific descendants <- c(\"bird_a\", \"bird_b\", \"bird_c\") all_descendants_conspecific(descendants = descendants) #> [1] FALSE  # Example where species are conspecific descendants <- c(\"bird_a_1\", \"bird_a_2\", \"bird_a_3\") all_descendants_conspecific(descendants = descendants) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Detects any cases where a non-endemic species or species not present on the\nisland has likely been on the island given its ancestral state reconstruction\nindicating ancestral presence on the island and so is likely a back\ncolonisation from the island to the mainland (or potentially different\nisland). This function is useful if using extraction_method = ","title":"Detects any cases where a non-endemic species or species not present on the\nisland has likely been on the island given its ancestral state reconstruction\nindicating ancestral presence on the island and so is likely a back\ncolonisation from the island to the mainland (or potentially different\nisland). This function is useful if using extraction_method = ","text":"Detects cases non-endemic species species present island likely island given ancestral state reconstruction indicating ancestral presence island likely back colonisation island mainland (potentially different island). function useful using extraction_method = \"min\" `DAISIEprep::extract_island_species()` may brake single colonist multiple colonists back-colonisation.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detects any cases where a non-endemic species or species not present on the\nisland has likely been on the island given its ancestral state reconstruction\nindicating ancestral presence on the island and so is likely a back\ncolonisation from the island to the mainland (or potentially different\nisland). This function is useful if using extraction_method = ","text":"","code":"any_back_colonisation(phylod, only_tips = FALSE)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detects any cases where a non-endemic species or species not present on the\nisland has likely been on the island given its ancestral state reconstruction\nindicating ancestral presence on the island and so is likely a back\ncolonisation from the island to the mainland (or potentially different\nisland). This function is useful if using extraction_method = ","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. only_tips boolean determing whether tips (.e. terminal branches) searched back colonisation events.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detects any cases where a non-endemic species or species not present on the\nisland has likely been on the island given its ancestral state reconstruction\nindicating ancestral presence on the island and so is likely a back\ncolonisation from the island to the mainland (or potentially different\nisland). This function is useful if using extraction_method = ","text":"single vector character strings. Character string format ancestral_node -> focal_node, ancestral node mainland focal node . case back colonisations different message string returned.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detects any cases where a non-endemic species or species not present on the\nisland has likely been on the island given its ancestral state reconstruction\nindicating ancestral presence on the island and so is likely a back\ncolonisation from the island to the mainland (or potentially different\nisland). This function is useful if using extraction_method = ","text":"","code":"# Example with no back colonisation phylod <- DAISIEprep:::create_test_phylod(test_scenario = 15) any_back_colonisation(phylod) #> [1] \"No back-colonisation events found in the phylogeny\"  # Example with back colonisation set.seed(   3,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(5) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\") phylo <- phylobase::phylo4(phylo) endemicity_status <- c(\"endemic\", \"endemic\", \"not_present\",                        \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"parsimony\") # aritificially modify data to produce back-colonisation phylobase::tdata(phylod)$island_status[8] <- \"endemic\" any_back_colonisation(phylod = phylod) #> [1] \"8 -> 3\""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether the phylogeny has an outgroup that is not present on the\nisland. This is critical when extracting data from the phylogeny so the\nstem age (colonisation time) is correct. — any_outgroup","title":"Checks whether the phylogeny has an outgroup that is not present on the\nisland. This is critical when extracting data from the phylogeny so the\nstem age (colonisation time) is correct. — any_outgroup","text":"Checks whether phylogeny outgroup present island. critical extracting data phylogeny stem age (colonisation time) correct.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether the phylogeny has an outgroup that is not present on the\nisland. This is critical when extracting data from the phylogeny so the\nstem age (colonisation time) is correct. — any_outgroup","text":"","code":"any_outgroup(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether the phylogeny has an outgroup that is not present on the\nisland. This is critical when extracting data from the phylogeny so the\nstem age (colonisation time) is correct. — any_outgroup","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether the phylogeny has an outgroup that is not present on the\nisland. This is critical when extracting data from the phylogeny so the\nstem age (colonisation time) is correct. — any_outgroup","text":"Boolean","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether the phylogeny has an outgroup that is not present on the\nisland. This is critical when extracting data from the phylogeny so the\nstem age (colonisation time) is correct. — any_outgroup","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(c(\"not_present\", \"endemic\", \"nonendemic\"),                             size = length(phylobase::tipLabels(phylo)),                             replace = TRUE) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) any_outgroup(phylod) #> [1] FALSE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts the `island_tbl` class to a data frame in the format of a DAISIE\ndata table (see DAISIE R package for details). This can then be input into\n`DAISIEprep::create_daisie_data` function which creates the list input into\nthe DAISIE ML models. — as_daisie_datatable","title":"Converts the `island_tbl` class to a data frame in the format of a DAISIE\ndata table (see DAISIE R package for details). This can then be input into\n`DAISIEprep::create_daisie_data` function which creates the list input into\nthe DAISIE ML models. — as_daisie_datatable","text":"Converts `island_tbl` class data frame format DAISIE data table (see DAISIE R package details). can input `DAISIEprep::create_daisie_data` function creates list input DAISIE ML models.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts the `island_tbl` class to a data frame in the format of a DAISIE\ndata table (see DAISIE R package for details). This can then be input into\n`DAISIEprep::create_daisie_data` function which creates the list input into\nthe DAISIE ML models. — as_daisie_datatable","text":"","code":"as_daisie_datatable(island_tbl, island_age, col_uncertainty = \"none\")"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts the `island_tbl` class to a data frame in the format of a DAISIE\ndata table (see DAISIE R package for details). This can then be input into\n`DAISIEprep::create_daisie_data` function which creates the list input into\nthe DAISIE ML models. — as_daisie_datatable","text":"island_tbl instance `Island_tbl` class. island_age Age island appropriate units. col_uncertainty character, either \"max\", \"min\", NULL. \"max\" makes everything max age colonisation, \"min\" applies min ages available, NULL uses precise times colonisation, min ages informative.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts the `island_tbl` class to a data frame in the format of a DAISIE\ndata table (see DAISIE R package for details). This can then be input into\n`DAISIEprep::create_daisie_data` function which creates the list input into\nthe DAISIE ML models. — as_daisie_datatable","text":"data frame format DAISIE data table","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts the `island_tbl` class to a data frame in the format of a DAISIE\ndata table (see DAISIE R package for details). This can then be input into\n`DAISIEprep::create_daisie_data` function which creates the list input into\nthe DAISIE ML models. — as_daisie_datatable","text":"Joshua W. Lambert, Pedro Neves","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts the `island_tbl` class to a data frame in the format of a DAISIE\ndata table (see DAISIE R package for details). This can then be input into\n`DAISIEprep::create_daisie_data` function which creates the list input into\nthe DAISIE ML models. — as_daisie_datatable","text":"","code":"phylod <- DAISIEprep:::create_test_phylod(10) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\" ) #> Warning: Root of the phylogeny is on the island so the colonisation #>               time from the stem age cannot be collected, colonisation time #>               will be set to infinite.  # Example where precise colonisation times are known daisie_datatable <- as_daisie_datatable(   island_tbl = island_tbl,   island_age = 0.2,   col_uncertainty = \"none\" )  # Example where colonisation times are uncertain and set to max ages daisie_datatable <- as_daisie_datatable(   island_tbl = island_tbl,   island_age = 0.2,   col_uncertainty = \"max\" )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes an existing instance of an `Island_tbl` class and bind the information\nfrom the instance of an `Island_colonist` class to it — bind_colonist_to_tbl","title":"Takes an existing instance of an `Island_tbl` class and bind the information\nfrom the instance of an `Island_colonist` class to it — bind_colonist_to_tbl","text":"Takes existing instance `Island_tbl` class bind information instance `Island_colonist` class ","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes an existing instance of an `Island_tbl` class and bind the information\nfrom the instance of an `Island_colonist` class to it — bind_colonist_to_tbl","text":"","code":"bind_colonist_to_tbl(island_colonist, island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes an existing instance of an `Island_tbl` class and bind the information\nfrom the instance of an `Island_colonist` class to it — bind_colonist_to_tbl","text":"island_colonist instance `Island_colonist` class. island_tbl instance `Island_tbl` class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes an existing instance of an `Island_tbl` class and bind the information\nfrom the instance of an `Island_colonist` class to it — bind_colonist_to_tbl","text":"object `Island_tbl` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes an existing instance of an `Island_tbl` class and bind the information\nfrom the instance of an `Island_colonist` class to it — bind_colonist_to_tbl","text":"","code":"island_colonist <- DAISIEprep::island_colonist(   clade_name = \"bird\",   status = \"endemic\",   missing_species = 0,   branching_times = c(1, 0.5) ) island_tbl <- island_tbl() bind_colonist_to_tbl(   island_colonist = island_colonist,   island_tbl = island_tbl ) #> Class:  Island_tbl  #>   clade_name  status missing_species branching_times min_age #> 1       bird endemic               0          1, 0.5      NA"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of the Island_colonist class — check_island_colonist","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"Checks validity Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"","code":"check_island_colonist(object)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"object Instance island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"Boolean errors","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"","code":"island_colonist <- island_colonist() check_island_colonist(island_colonist) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of the Island_tbl class — check_island_tbl","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"Checks validity Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"","code":"check_island_tbl(object)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"object Instance Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"Boolean errors","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"","code":"island_tbl <- island_tbl() check_island_tbl(island_tbl) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"Checks validity Multi_island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"","code":"check_multi_island_tbl(object)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"object Instance Multi_island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"Boolean errors","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"","code":"multi_island_tbl <- multi_island_tbl() check_multi_island_tbl(multi_island_tbl) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether `phylo4d` object conforms\nto the requirements of the DAISIEprep package. If the function does not\nreturn anything the data is ready to be used, if an error is returned the\ndata requires some pre-processing before DAISIEprep can be used — check_phylo_data","title":"Checks whether `phylo4d` object conforms\nto the requirements of the DAISIEprep package. If the function does not\nreturn anything the data is ready to be used, if an error is returned the\ndata requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"Checks whether `phylo4d` object conforms requirements DAISIEprep package. function return anything data ready used, error returned data requires pre-processing DAISIEprep can used","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether `phylo4d` object conforms\nto the requirements of the DAISIEprep package. If the function does not\nreturn anything the data is ready to be used, if an error is returned the\ndata requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"","code":"check_phylo_data(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether `phylo4d` object conforms\nto the requirements of the DAISIEprep package. If the function does not\nreturn anything the data is ready to be used, if an error is returned the\ndata requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether `phylo4d` object conforms\nto the requirements of the DAISIEprep package. If the function does not\nreturn anything the data is ready to be used, if an error is returned the\ndata requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"Nothing error message","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether `phylo4d` object conforms\nto the requirements of the DAISIEprep package. If the function does not\nreturn anything the data is ready to be used, if an error is returned the\ndata requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) check_phylo_data(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the\nfinal DAISIE data structure to be produced from within DAISIEprep. For\ndetailed documentation see the help documentation in the DAISIE package\n(?DAISIE::DAISIE_dataprep). — create_daisie_data","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the\nfinal DAISIE data structure to be produced from within DAISIEprep. For\ndetailed documentation see the help documentation in the DAISIE package\n(?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"wrapper function DAISIE::DAISIE_dataprep(). allows final DAISIE data structure produced within DAISIEprep. detailed documentation see help documentation DAISIE package (?DAISIE::DAISIE_dataprep).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the\nfinal DAISIE data structure to be produced from within DAISIEprep. For\ndetailed documentation see the help documentation in the DAISIE package\n(?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"","code":"create_daisie_data(   daisie_datatable,   island_age,   num_mainland_species,   num_clade_types = 1,   list_type2_clades = NA,   prop_type2_pool = \"proportional\",   epss = 1e-05,   verbose = FALSE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the\nfinal DAISIE data structure to be produced from within DAISIEprep. For\ndetailed documentation see the help documentation in the DAISIE package\n(?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"daisie_datatable data frame row table represents independent colonisation event. table following four columns: * Clade_name: name independent colonisation event * Status: One following categories: - \"Non_endemic\": applies non-endemic species approximate colonisation time known. - \"Non_endemic_MaxAge\": applies non-endemic species cases colonisation time unknown. - \"Endemic\": applies endemic species endemic clades approximate colonisation time known. - \"Endemic_MaxAge\": appies endemic species endemic clades colonisation time unknown, user wants specify upper bound colonisation. example apply endemic species recently gone extinct anthropogenic causes, included phylogeny (\"NA\" given branching times column). also apply insular radiations long stem branches, time first cladogenetic event known, precise time colonisation . - \"Endemic&Non_Endemic\": endemic clade present mainland ancestor re-colonised. * Missing_species: Number island species sampled particular clade (applicable \"Endemic\" clades). NA given branching times column, equal number species clade minus 1. * Branching_times: Stem age population/species case \"Non_endemic\", \"Non_endemic_MaxAge\", \"Endemic\" species extant clade relatives island. Set \"NA\" colonisation time unknown upper bound known. \"Endemic\" cladogenetic species branching times radiation, including stem age radiation (colonisaton time estimate). island_age Age island appropriate units. num_mainland_species size mainland pool, .e. number species can potentially colonise island. num_clade_types Number clade types. Default num_clade_types = 1 species considered belong macroevolutionary process. num_clade_types = 2, two types clades distinct macroevolutionary processes. list_type2_clades num_clade_types = 2, list_type2_clades specifies names clades distinct macroevolutionary process. names must match \"Clade_name\" column source data table. num_clade_types = 1, list_type2_clades = NA specified (default). prop_type2_pool Specifies fraction potential mainland colonists distinct macroevolutionary process. Applies number_clade_types = 2. Default \"proportional\" sets fraction proportional number clades distinct macroevolutionary process colonised island. Alternatively, user can specify value 0 1 (e.g. mainland pool size 1000 prop_type2_pool = 0.02 number type 2 species 20). epss Default = 1e-5 appropriate cases. value used set maximum age colonisation \"Non_endemic_MaxAge\" \"Endemic_MaxAge\" species age slightly younger island cases age provided species older island. new maximum age used upper bound integrate possible colonisation times. verbose Boolean. States intermediate results printed console. Defaults TRUE.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the\nfinal DAISIE data structure to be produced from within DAISIEprep. For\ndetailed documentation see the help documentation in the DAISIE package\n(?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"DAISIE data list","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the\nfinal DAISIE data structure to be produced from within DAISIEprep. For\ndetailed documentation see the help documentation in the DAISIE package\n(?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"","code":"if (FALSE) { island_tbl <- extract_island_specie() daisie_datatable <- as_daisie_datatable(island_tbl) daisie_data_list <- create_daisie_data(   daisie_datatable = daisie_datatable,   island_age = 1,   num_mainland_species = 1000,   num_clade_types = 1,   list_type2_clades = NA,   prop_type2_pool = NA,   epss = 1e-5,   verbose = FALSE ) }"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a data frame with the endemicity status (either 'endemic',\n'nonendemic', 'not_present') of every species in the phylogeny using a\nphylogeny and a data frame of the island species and their endemicity (either\n'endemic' or 'nonendemic') provided. — create_endemicity_status","title":"Creates a data frame with the endemicity status (either 'endemic',\n'nonendemic', 'not_present') of every species in the phylogeny using a\nphylogeny and a data frame of the island species and their endemicity (either\n'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"Creates data frame endemicity status (either 'endemic', 'nonendemic', 'not_present') every species phylogeny using phylogeny data frame island species endemicity (either 'endemic' 'nonendemic') provided.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a data frame with the endemicity status (either 'endemic',\n'nonendemic', 'not_present') of every species in the phylogeny using a\nphylogeny and a data frame of the island species and their endemicity (either\n'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"","code":"create_endemicity_status(phylo, island_species)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a data frame with the endemicity status (either 'endemic',\n'nonendemic', 'not_present') of every species in the phylogeny using a\nphylogeny and a data frame of the island species and their endemicity (either\n'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"phylo phylogeny either `phylo` (`ape` package) `phylo4` (`phylobase` package) object. island_species Data frame two columns. first character string tip_labels tip names species island. second column character string endemicity status species, either endemic nonendemic.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a data frame with the endemicity status (either 'endemic',\n'nonendemic', 'not_present') of every species in the phylogeny using a\nphylogeny and a data frame of the island species and their endemicity (either\n'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"Data frame single column character strings row names","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a data frame with the endemicity status (either 'endemic',\n'nonendemic', 'not_present') of every species in the phylogeny using a\nphylogeny and a data frame of the island species and their endemicity (either\n'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(4) phylo$tip.label <- c(\"species_a\", \"species_b\", \"species_c\", \"species_d\") phylo <- methods::as(phylo, \"phylo4\") island_species <- data.frame(   tip_labels = c(\"species_a\", \"species_b\", \"species_c\", \"species_d\"),   tip_endemicity_status = c(\"endemic\", \"endemic\", \"endemic\", \"nonendemic\") ) endemicity_status <- create_endemicity_status(   phylo = phylo,   island_species = island_species )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates phylod objects to be used in tests — create_test_phylod","title":"Creates phylod objects to be used in tests — create_test_phylod","text":"Creates phylod objects used tests","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates phylod objects to be used in tests — create_test_phylod","text":"","code":"create_test_phylod(test_scenario)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates phylod objects to be used in tests — create_test_phylod","text":"test_scenario Integer specifying test phylod object create.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates phylod objects to be used in tests — create_test_phylod","text":"`phylo4d` object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates phylod objects to be used in tests — create_test_phylod","text":"","code":"DAISIEprep:::create_test_phylod(test_scenario = 1) #>    label node ancestor edge.length node.type endemicity_status island_status #> 1 bird_a    1        3   0.7551818       tip       not_present          <NA> #> 2 bird_b    2        3   0.7551818       tip        nonendemic          <NA> #> 3   <NA>    3        0          NA      root              <NA>    nonendemic #>   nonendemic_prob not_present_prob #> 1              NA               NA #> 2              NA               NA #> 3             0.5              0.5"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation for function in the DAISIEprep package — default_params_doc","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"Documentation function DAISIEprep package","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"","code":"default_params_doc(   island_colonist,   island_tbl,   phylod,   extraction_method,   species_label,   species_endemicity,   x,   value,   clade_name,   status,   missing_species,   branching_times,   min_age,   endemic_clade,   phylo,   island_species,   descendants,   clade,   asr_method,   tie_preference,   earliest_col,   include_not_present,   missing_species_df,   node_pies,   test_scenario,   daisie_datatable,   island_age,   num_mainland_species,   num_clade_types,   list_type2_clades,   prop_type2_pool,   epss,   verbose,   col_uncertainty,   n,   digits,   include_crown_age,   only_tips,   node_label )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"island_colonist instance `Island_colonist` class. island_tbl instance `Island_tbl` class. phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. extraction_method character string specifying whether colonisation time extracted minimum time (`min`) (present), probable time ancestral state reconstruction (`asr`). species_label tip label species interest. species_endemicity character string endemicity, either \"endemic\" \"nonendemic\" island species, \"not_present\" island. x object whose class determined signature. value value can take several forms assigned object class. clade_name Character name colonising clade. status Character endemicity status colonising clade. missing_species Numeric number missing species phylogeny belong colonising clade. branching_times Numeric vector one elements first element colonisation time subsequent elements branching times island. min_age Numeric minimum age (time present) species must colonised island . known branching island, either species subspecies. endemic_clade Named vector species clade. phylo phylogeny either `phylo` (`ape` package) `phylo4` (`phylobase` package) object. island_species Data frame two columns. first character string tip_labels tip names species island. second column character string endemicity status species, either endemic nonendemic. descendants vector character strings names species determine whether species. clade numeric vector indices species island clade. asr_method character string, either \"parsimony\" \"mk\" determines whether maximum parsimony continuous-time markov model reconstructs ancestral states node. See documentation `castor::asr_maximum_parsimony` `castor::asr_mk` `castor` R package details methods used. tie_preference Character string, either \"island\" \"mainland\" choose probable state node using `max.col()` function. node island presence absence equally probable need decide whether species considered island. consider island use `ties.method = \"last\"` `max.col()` function, consider island use `ties.method = \"first\"`. Default \"island\". earliest_col boolean determine whether take colonisation time probable time (FALSE) earliest possible colonisation time (TRUE), probability species island non-zero. Default FALSE. include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE. missing_species_df data frame containing names clades extracted phylogeny number missing species clade. every clade extracted phylogeny needs included number missing species clades zero. node_pies Boolean determining pie charts probabilities species present island. TRUE correct data required phylod object. test_scenario Integer specifying test phylod object create. daisie_datatable data frame row table represents independent colonisation event. table following four columns: * Clade_name: name independent colonisation event * Status: One following categories: - \"Non_endemic\": applies non-endemic species approximate colonisation time known. - \"Non_endemic_MaxAge\": applies non-endemic species cases colonisation time unknown. - \"Endemic\": applies endemic species endemic clades approximate colonisation time known. - \"Endemic_MaxAge\": appies endemic species endemic clades colonisation time unknown, user wants specify upper bound colonisation. example apply endemic species recently gone extinct anthropogenic causes, included phylogeny (\"NA\" given branching times column). also apply insular radiations long stem branches, time first cladogenetic event known, precise time colonisation . - \"Endemic&Non_Endemic\": endemic clade present mainland ancestor re-colonised. * Missing_species: Number island species sampled particular clade (applicable \"Endemic\" clades). NA given branching times column, equal number species clade minus 1. * Branching_times: Stem age population/species case \"Non_endemic\", \"Non_endemic_MaxAge\", \"Endemic\" species extant clade relatives island. Set \"NA\" colonisation time unknown upper bound known. \"Endemic\" cladogenetic species branching times radiation, including stem age radiation (colonisaton time estimate). island_age Age island appropriate units. num_mainland_species size mainland pool, .e. number species can potentially colonise island. num_clade_types Number clade types. Default num_clade_types = 1 species considered belong macroevolutionary process. num_clade_types = 2, two types clades distinct macroevolutionary processes. list_type2_clades num_clade_types = 2, list_type2_clades specifies names clades distinct macroevolutionary process. names must match \"Clade_name\" column source data table. num_clade_types = 1, list_type2_clades = NA specified (default). prop_type2_pool Specifies fraction potential mainland colonists distinct macroevolutionary process. Applies number_clade_types = 2. Default \"proportional\" sets fraction proportional number clades distinct macroevolutionary process colonised island. Alternatively, user can specify value 0 1 (e.g. mainland pool size 1000 prop_type2_pool = 0.02 number type 2 species 20). epss Default = 1e-5 appropriate cases. value used set maximum age colonisation \"Non_endemic_MaxAge\" \"Endemic_MaxAge\" species age slightly younger island cases age provided species older island. new maximum age used upper bound integrate possible colonisation times. verbose Boolean. States intermediate results printed console. Defaults TRUE. col_uncertainty character, either \"max\", \"min\", NULL. \"max\" makes everything max age colonisation, \"min\" applies min ages available, NULL uses precise times colonisation, min ages informative. n numeric rounded digits numeric specifying decimal places round include_crown_age boolean determining whether crown age gets plotted stem age. only_tips boolean determing whether tips (.e. terminal branches) searched back colonisation events. node_label numeric label node within phylogeny","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"Nothing","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"Joshua W. Lambert","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_asr_clade.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts an island clade based on the ancestral state reconstruction of the\nspecies presence on the island, therefore this clade can contain\nnon-endemic species as well as endemic species. — extract_asr_clade","title":"Extracts an island clade based on the ancestral state reconstruction of the\nspecies presence on the island, therefore this clade can contain\nnon-endemic species as well as endemic species. — extract_asr_clade","text":"Extracts island clade based ancestral state reconstruction species presence island, therefore clade can contain non-endemic species well endemic species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_asr_clade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts an island clade based on the ancestral state reconstruction of the\nspecies presence on the island, therefore this clade can contain\nnon-endemic species as well as endemic species. — extract_asr_clade","text":"","code":"extract_asr_clade(phylod, species_label, clade, include_not_present)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_asr_clade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts an island clade based on the ancestral state reconstruction of the\nspecies presence on the island, therefore this clade can contain\nnon-endemic species as well as endemic species. — extract_asr_clade","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. species_label tip label species interest. clade numeric vector indices species island clade. include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_asr_clade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts an island clade based on the ancestral state reconstruction of the\nspecies presence on the island, therefore this clade can contain\nnon-endemic species as well as endemic species. — extract_asr_clade","text":"object `Island_colonist` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_asr_clade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts an island clade based on the ancestral state reconstruction of the\nspecies presence on the island, therefore this clade can contain\nnon-endemic species as well as endemic species. — extract_asr_clade","text":"","code":"if (FALSE) { extract_asr_clade() }"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_clade_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a name for a clade depending on whether all the species of the clade\nhave the same genus name or whether the clade is composed of multiple genera,\nin which case it will create a unique clade name by concatinating the genus\nnames — extract_clade_name","title":"Creates a name for a clade depending on whether all the species of the clade\nhave the same genus name or whether the clade is composed of multiple genera,\nin which case it will create a unique clade name by concatinating the genus\nnames — extract_clade_name","text":"Creates name clade depending whether species clade genus name whether clade composed multiple genera, case create unique clade name concatinating genus names","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_clade_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a name for a clade depending on whether all the species of the clade\nhave the same genus name or whether the clade is composed of multiple genera,\nin which case it will create a unique clade name by concatinating the genus\nnames — extract_clade_name","text":"","code":"extract_clade_name(clade)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_clade_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a name for a clade depending on whether all the species of the clade\nhave the same genus name or whether the clade is composed of multiple genera,\nin which case it will create a unique clade name by concatinating the genus\nnames — extract_clade_name","text":"clade numeric vector indices species island clade.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_clade_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a name for a clade depending on whether all the species of the clade\nhave the same genus name or whether the clade is composed of multiple genera,\nin which case it will create a unique clade name by concatinating the genus\nnames — extract_clade_name","text":"Character","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the information for an endemic clade (i.e. more than one species on\nthe island more closely related to each other than other mainland species)\nfrom a phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_endemic_clade","title":"Extracts the information for an endemic clade (i.e. more than one species on\nthe island more closely related to each other than other mainland species)\nfrom a phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_endemic_clade","text":"Extracts information endemic clade (.e. one species island closely related mainland species) phylogeny (specifically `phylo4d`  object `phylobase` package) stores `island_colonist` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the information for an endemic clade (i.e. more than one species on\nthe island more closely related to each other than other mainland species)\nfrom a phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_endemic_clade","text":"","code":"extract_endemic_clade(phylod, species_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the information for an endemic clade (i.e. more than one species on\nthe island more closely related to each other than other mainland species)\nfrom a phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_endemic_clade","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. species_label tip label species interest.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the information for an endemic clade (i.e. more than one species on\nthe island more closely related to each other than other mainland species)\nfrom a phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_endemic_clade","text":"object `Island_colonist` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the information for an endemic clade (i.e. more than one species on\nthe island more closely related to each other than other mainland species)\nfrom a phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_endemic_clade","text":"","code":"set.seed(   3,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- methods::as(phylo, \"phylo4\") endemicity_status <- sample(   x = c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.7, 0.3, 0) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) island_colonist <- extract_endemic_clade(   phylod = phylod,   species_label = \"bird_i\" )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the information for an endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_endemic_singleton","title":"Extracts the information for an endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_endemic_singleton","text":"Extracts information endemic species phylogeny (specifically `phylo4d`  object `phylobase` package) stores `island_colonist` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the information for an endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_endemic_singleton","text":"","code":"extract_endemic_singleton(phylod, species_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the information for an endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_endemic_singleton","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. species_label tip label species interest.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the information for an endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_endemic_singleton","text":"object `island_colonist` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the information for an endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_endemic_singleton","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   x = c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) extract_endemic_singleton(phylod = phylod, species_label = \"bird_i\") #> Class:  Island_colonist  #>   Clade name:  bird_i  #>   Status:  endemic  #>   Missing species:  0  #>   Branching times:  0.04960523  #>   Min age:  NA"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object — extract_island_species","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object — extract_island_species","text":"Extracts colonisation, diversification, endemicty data phylogenetic endemicity data stores `Island_tbl` object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object — extract_island_species","text":"","code":"extract_island_species(   phylod,   extraction_method,   island_tbl = NULL,   include_not_present = FALSE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object — extract_island_species","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. extraction_method character string specifying whether colonisation time extracted minimum time (`min`) (present), probable time ancestral state reconstruction (`asr`). island_tbl instance `Island_tbl` class. include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object — extract_island_species","text":"object `island_tbl` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object — extract_island_species","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) extract_island_species(phylod, extraction_method = \"min\") #> Class:  Island_tbl  #>   clade_name     status missing_species branching_times min_age #> 1     bird_g nonendemic               0    0.380034....      NA #> 2     bird_i    endemic               0    0.049605....      NA"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_multi_tip_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the information for a species (endemic or non-endemic) which has\nmultiple tips in the phylogeny (i.e. more than one sample per species) from\na phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_multi_tip_species","title":"Extracts the information for a species (endemic or non-endemic) which has\nmultiple tips in the phylogeny (i.e. more than one sample per species) from\na phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_multi_tip_species","text":"Extracts information species (endemic non-endemic) multiple tips phylogeny (.e. one sample per species) phylogeny (specifically `phylo4d`  object `phylobase` package) stores `island_colonist` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_multi_tip_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the information for a species (endemic or non-endemic) which has\nmultiple tips in the phylogeny (i.e. more than one sample per species) from\na phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_multi_tip_species","text":"","code":"extract_multi_tip_species(phylod, species_label, species_endemicity)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_multi_tip_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the information for a species (endemic or non-endemic) which has\nmultiple tips in the phylogeny (i.e. more than one sample per species) from\na phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_multi_tip_species","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. species_label tip label species interest. species_endemicity character string endemicity, either \"endemic\" \"nonendemic\" island species, \"not_present\" island.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_multi_tip_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the information for a species (endemic or non-endemic) which has\nmultiple tips in the phylogeny (i.e. more than one sample per species) from\na phylogeny (specifically `phylo4d`  object from `phylobase` package)\nand stores it in an `island_colonist` class — extract_multi_tip_species","text":"object `Island_colonist` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the information for a non-endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_nonendemic","title":"Extracts the information for a non-endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_nonendemic","text":"Extracts information non-endemic species phylogeny (specifically `phylo4d`  object `phylobase` package) stores `island_colonist` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the information for a non-endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_nonendemic","text":"","code":"extract_nonendemic(phylod, species_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the information for a non-endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_nonendemic","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. species_label tip label species interest.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the information for a non-endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_nonendemic","text":"object `island_colonist` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the information for a non-endemic species from a phylogeny\n(specifically `phylo4d`  object from `phylobase` package) and stores it in\nin an `island_colonist` class — extract_nonendemic","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   x = c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) extract_nonendemic(phylod = phylod, species_label = \"bird_g\") #> Class:  Island_colonist  #>   Clade name:  bird_g  #>   Status:  nonendemic  #>   Missing species:  0  #>   Branching times:  0.3800341  #>   Min age:  NA"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"Extracts colonisation, diversification, endemicty data phylogenetic endemicity data stores `Island_tbl` object using \"asr\" algorithm extract island species given ancestral states either island presence absence.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"","code":"extract_species_asr(   phylod,   species_label,   species_endemicity,   island_tbl,   include_not_present )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. species_label tip label species interest. species_endemicity character string endemicity, either \"endemic\" \"nonendemic\" island species, \"not_present\" island. island_tbl instance `Island_tbl` class. include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"object `island_tbl` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"","code":"if (FALSE) { set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- methods::as(phylo, \"phylo4\") endemicity_status <- sample(c(\"not_present\", \"endemic\", \"nonendemic\"),                               size = length(phylobase::tipLabels(phylo)),                               replace = TRUE) tip_states <- as.numeric(grepl(pattern = \"endemic\", x = endemicity_status)) + 1 phylo <- as(phylo, \"phylo\") asr <- castor::asr_max_parsimony(phylo, tip_states) colnames(asr$ancestral_likelihoods) <- c(\"not_present\", \"island\") node_states <- max.col(asr$ancestral_likelihoods, ties.method = \"last\") node_states <- gsub(pattern = \"2\", replacement = \"island\", x = node_states) node_states <- gsub(pattern = \"1\", replacement = \"not_present\", x = node_states) node_data <- data.frame(   island_status = node_states,   row.names = phylobase::nodeId(phylod, \"internal\") ) phylod <- phylo4d(   phylo,   tip.data = as.data.frame(endemicity_status),   node.data = node_data ) island_tbl <- island_tbl() extract_species_asr(   phylod = phylod,   species_label = \"bird_g\",   species_endemicity = \"endemic\",   island_tbl = island_tbl ) }"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"Extracts colonisation, diversification, endemicty data phylogenetic endemicity data stores `Island_tbl` object using \"min\" algorithm extract island species shortest time present.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"","code":"extract_species_min(phylod, species_label, species_endemicity, island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. species_label tip label species interest. species_endemicity character string endemicity, either \"endemic\" \"nonendemic\" island species, \"not_present\" island. island_tbl instance `Island_tbl` class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"object `island_tbl` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the colonisation, diversification, and endemicty data from\nphylogenetic and endemicity data and stores it in an `Island_tbl` object\nusing the ","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) island_tbl <- island_tbl() extract_species_min(   phylod = phylod,   species_label = \"bird_g\",   species_endemicity = \"nonendemic\",   island_tbl = island_tbl ) #> Class:  Island_tbl  #>   clade_name     status missing_species branching_times min_age #> 1     bird_g nonendemic               0    0.380034....      NA"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_endemic_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether the focal species (given by its tip lable in species_label\nargument) is part of an endemic clade on the island and a vector of the\nendemic species, either a single species for a singleton or multiple species\nin an endemic clade. — get_endemic_species","title":"Checks whether the focal species (given by its tip lable in species_label\nargument) is part of an endemic clade on the island and a vector of the\nendemic species, either a single species for a singleton or multiple species\nin an endemic clade. — get_endemic_species","text":"Checks whether focal species (given tip lable species_label argument) part endemic clade island vector endemic species, either single species singleton multiple species endemic clade.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_endemic_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether the focal species (given by its tip lable in species_label\nargument) is part of an endemic clade on the island and a vector of the\nendemic species, either a single species for a singleton or multiple species\nin an endemic clade. — get_endemic_species","text":"","code":"get_endemic_species(phylod, species_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_endemic_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether the focal species (given by its tip lable in species_label\nargument) is part of an endemic clade on the island and a vector of the\nendemic species, either a single species for a singleton or multiple species\nin an endemic clade. — get_endemic_species","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. species_label tip label species interest.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_endemic_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether the focal species (given by its tip lable in species_label\nargument) is part of an endemic clade on the island and a vector of the\nendemic species, either a single species for a singleton or multiple species\nin an endemic clade. — get_endemic_species","text":"Named numeric vector","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether species has undergone back-colonisation from — is_back_colonisation","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"Checks whether species undergone back-colonisation ","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"","code":"is_back_colonisation(phylod, node_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. node_label numeric label node within phylogeny","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"character string FALSE. Character string format ancestral_node -> focal_node, ancestral node mainland focal node .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"","code":"set.seed( 3, kind = \"Mersenne-Twister\", normal.kind = \"Inversion\", sample.kind = \"Rejection\" ) phylo <- ape::rcoal(5) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\") phylo <- phylobase::phylo4(phylo) endemicity_status <- c(\"endemic\", \"endemic\", \"not_present\",                        \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"parsimony\") # aritificially modify data to produce back-colonisation phylobase::tdata(phylod)$island_status[8] <- \"endemic\" # Example without back colonisation is_back_colonisation(phylod = phylod, node_label = 2) #> [1] FALSE # Example with back colonisation is_back_colonisation(phylod = phylod, node_label = 3) #> [1] \"8 -> 3\""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines if colonist has already been stored in `Island_tbl` class. This is\nused to stop endemic clades from being stored multiple times in the island\ntable by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","title":"Determines if colonist has already been stored in `Island_tbl` class. This is\nused to stop endemic clades from being stored multiple times in the island\ntable by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"Determines colonist already stored `Island_tbl` class. used stop endemic clades stored multiple times island table checking endemicity status branching times identical.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines if colonist has already been stored in `Island_tbl` class. This is\nused to stop endemic clades from being stored multiple times in the island\ntable by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"","code":"is_duplicate_colonist(island_colonist, island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines if colonist has already been stored in `Island_tbl` class. This is\nused to stop endemic clades from being stored multiple times in the island\ntable by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"island_colonist instance `Island_colonist` class. island_tbl instance `Island_tbl` class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines if colonist has already been stored in `Island_tbl` class. This is\nused to stop endemic clades from being stored multiple times in the island\ntable by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"Boolean","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines if colonist has already been stored in `Island_tbl` class. This is\nused to stop endemic clades from being stored multiple times in the island\ntable by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"","code":"island_colonist <- island_colonist(   clade_name = \"bird\",   status = \"endemic\",   missing_species = 0,   branching_times = c(1.0, 0.5) ) island_tbl <- island_tbl() is_duplicate_colonist(   island_colonist = island_colonist,   island_tbl = island_tbl ) #> [1] FALSE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_multi_tip_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a species is represented in the tree as multiple tips — is_multi_tip_species","title":"Checks if a species is represented in the tree as multiple tips — is_multi_tip_species","text":"Checks species represented tree multiple tips","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_multi_tip_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a species is represented in the tree as multiple tips — is_multi_tip_species","text":"","code":"is_multi_tip_species(phylod, species_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_multi_tip_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a species is represented in the tree as multiple tips — is_multi_tip_species","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. species_label tip label species interest.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_multi_tip_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a species is represented in the tree as multiple tips — is_multi_tip_species","text":"Boolean","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines the `island_tbl` class which is used when extracting information\nfrom the phylogenetic and island data to be used for constructing a\n`daisie_data_tbl` — Island_colonist-class","title":"Defines the `island_tbl` class which is used when extracting information\nfrom the phylogenetic and island data to be used for constructing a\n`daisie_data_tbl` — Island_colonist-class","text":"Defines `island_tbl` class used extracting information phylogenetic island data used constructing `daisie_data_tbl`","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Defines the `island_tbl` class which is used when extracting information\nfrom the phylogenetic and island data to be used for constructing a\n`daisie_data_tbl` — Island_colonist-class","text":"clade_name character. status character. missing_species character. branching_times numeric. min_age numeric.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for Island_colonist — island_colonist","title":"Constructor for Island_colonist — island_colonist","text":"Constructor Island_colonist","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for Island_colonist — island_colonist","text":"","code":"island_colonist(   clade_name = NA_character_,   status = NA_character_,   missing_species = NA_real_,   branching_times = NA_real_,   min_age = NA_real_ )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for Island_colonist — island_colonist","text":"clade_name Character name colonising clade. status Character endemicity status colonising clade. missing_species Numeric number missing species phylogeny belong colonising clade. branching_times Numeric vector one elements first element colonisation time subsequent elements branching times island. min_age Numeric minimum age (time present) species must colonised island . known branching island, either species subspecies.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for Island_colonist — island_colonist","text":"Object `Island_colonist` class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for Island_colonist — island_colonist","text":"","code":"# Without initial values colonist <- island_colonist()  # With initial values colonist <- island_colonist(   clade_name = \"bird\",   status = \"endemic\",   missing_species = 0,   branching_times = 0.5 )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_tbl-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines the `island_tbl` class which is used when extracting information\nfrom the phylogenetic and island data to be used for constructing a\n`daisie_data_tbl` — Island_tbl-class","title":"Defines the `island_tbl` class which is used when extracting information\nfrom the phylogenetic and island data to be used for constructing a\n`daisie_data_tbl` — Island_tbl-class","text":"Defines `island_tbl` class used extracting information phylogenetic island data used constructing `daisie_data_tbl`","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_tbl-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Defines the `island_tbl` class which is used when extracting information\nfrom the phylogenetic and island data to be used for constructing a\n`daisie_data_tbl` — Island_tbl-class","text":"island_tbl data frame. metadata list.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for `Island_tbl` class — island_tbl","title":"Constructor function for `Island_tbl` class — island_tbl","text":"Constructor function `Island_tbl` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for `Island_tbl` class — island_tbl","text":"","code":"island_tbl()"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_island_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for `Multi_island_tbl` class — multi_island_tbl","title":"Constructor function for `Multi_island_tbl` class — multi_island_tbl","text":"Constructor function `Multi_island_tbl` class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_island_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for `Multi_island_tbl` class — multi_island_tbl","text":"","code":"multi_island_tbl()"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the\nstem and potentially crown ages of a community of island colonists. — plot_colonisation","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the\nstem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"Plots dot plot (cleveland dot plot include_crown_age = TRUE) stem potentially crown ages community island colonists.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the\nstem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"","code":"plot_colonisation(island_tbl, island_age, include_crown_age = TRUE)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the\nstem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"island_tbl instance `Island_tbl` class. island_age Age island appropriate units. include_crown_age boolean determining whether crown age gets plotted stem age.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the\nstem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"`ggplot` object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the\nstem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) island_tbl <- extract_island_species(phylod, extraction_method = \"min\") plot_colonisation(island_tbl, island_age = 2)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"Plots phylogenetic tree associated tip /node data","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"","code":"plot_phylod(phylod, node_pies = FALSE)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"phylod `phylo4d` object package `phylobase` containing phylogenetic endemicity data species. node_pies Boolean determining pie charts probabilities species present island. TRUE correct data required phylod object.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"`ggplot` object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) plot_phylod(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/round_up.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounds numbers using the round up method, rather than the round to the\nnearest even number method used by the base function `round`. — round_up","title":"Rounds numbers using the round up method, rather than the round to the\nnearest even number method used by the base function `round`. — round_up","text":"Rounds numbers using round method, rather round nearest even number method used base function `round`.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/round_up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounds numbers using the round up method, rather than the round to the\nnearest even number method used by the base function `round`. — round_up","text":"","code":"round_up(n, digits = 0)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/round_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounds numbers using the round up method, rather than the round to the\nnearest even number method used by the base function `round`. — round_up","text":"n numeric rounded digits numeric specifying decimal places round ","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/round_up.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rounds numbers using the round up method, rather than the round to the\nnearest even number method used by the base function `round`. — round_up","text":"Numeric","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a string of the various ways the island species status can be and\nreturns a uniform all lower-case string of the same status to make handling\nstatuses easier in other function — translate_status","title":"Takes a string of the various ways the island species status can be and\nreturns a uniform all lower-case string of the same status to make handling\nstatuses easier in other function — translate_status","text":"Takes string various ways island species status can returns uniform lower-case string status make handling statuses easier function","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a string of the various ways the island species status can be and\nreturns a uniform all lower-case string of the same status to make handling\nstatuses easier in other function — translate_status","text":"","code":"translate_status(status)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a string of the various ways the island species status can be and\nreturns a uniform all lower-case string of the same status to make handling\nstatuses easier in other function — translate_status","text":"status Character endemicity status colonising clade.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes a string of the various ways the island species status can be and\nreturns a uniform all lower-case string of the same status to make handling\nstatuses easier in other function — translate_status","text":"Character string","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes a string of the various ways the island species status can be and\nreturns a uniform all lower-case string of the same status to make handling\nstatuses easier in other function — translate_status","text":"","code":"translate_status(\"Endemic\") #> [1] \"endemic\""}]
