[{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement j.w.l.lambert@rug.nl. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to DAISIEprep","title":"Contributing to DAISIEprep","text":"outlines propose change DAISIEprep.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to DAISIEprep","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to DAISIEprep","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to DAISIEprep","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"joshwlambert/DAISIEprep\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to DAISIEprep","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to DAISIEprep","text":"Please note DAISIEprep project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Extending_asr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Extending DAISIEprep ASR models","text":"tutorial demonstrate users can perform ancestral state reconstruction using functions implemented DAISIEprep, , alternatively, importing ancestral range reconstructions obtained using methods packages.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Extending_asr.html","id":"using-daisiepreps-min-and-asr-algorithms","dir":"Articles","previous_headings":"","what":"Using DAISIEprep’s min and asr algorithms","title":"Extending DAISIEprep ASR models","text":"core feature DAISIEprep function extract_island_species(), allows one extract island data expected input DAISIE’s functions phylogeny data regarding presence / absence present-day species island. function automatically delineates extracts clades formed island species within complete mainland + island phylogeny, attempt estimate age colonisation clades. default option function min algorithm, performs data extraction manner consistent DAISIE’s assumptions. However, may cases desirable use algorithm, particularly DAISIE’s assumptions odds clade hand. example, consider following tree:  island clade, comprising species -f, except species e absent island. parsimonious explanation distribution unique colonisation event split f -e lineages, island population species f diverging mainland ancestor, species e jumping back continent. result single island clade unique colonisation time. Yet run extract_island_species phylogeny: algorithm estimates four independent colonisation events. min algorithm assumes back-colonisation (island mainland), presence mainland-species e inside island-clade can accommodated lineage staying mainland present, least three colonisation events leading species -d. DAISIE also consider colonisation time (-e)-f split, cladogenetic event taking place island assumed lead strictly endemic lineages (Valente et al. 2015), lineage f maintains population mainland. cases phylogeny odds process considered DAISIE, one may wish resort trait evolution / biogeography model estimate many times island colonised. requires performing ancestral state reconstruction, estimate endemicity status internal node phylogeny. extract_island_species offers means extract island data phylogeny completed node data, setting argument extraction_method = \"asr\". methods DAISIEprep provides run ancestral state reconstruction (ASR) parsimony Markov model (Mk) using functionality R package castor (Louca Doebeli 2018). provided standard DAISIEprep::add_asr_node_states() function easily allow user run quick reconstruction internal nodes’ endemicity status. parsimony Mk model provide simple models widely used evolutionary biology since development. details parsimony method see documentation castor::asr_max_parsimony() details Mk model see documentation castor::asr_mk_model(). show example Tutorial vignette show methods implemented: details internal workings add_asr_node_states() function see appendix bottom article.","code":"extract_island_species(phylod, extraction_method = \"min\") #> Class:  Island_tbl  #>   clade_name     status missing_species   col_time col_max_age branching_times #> 1     bird_a    endemic               0 0.09053720       FALSE              NA #> 2     bird_b    endemic               0 0.06146596       FALSE    0.016781.... #> 3     bird_d    endemic               0 0.05480904       FALSE              NA #> 4     bird_f nonendemic               0 0.58496106       FALSE              NA #>   min_age      species clade_type #> 1      NA       bird_a          1 #> 2      NA bird_b, ....          1 #> 3      NA       bird_d          1 #> 4      NA       bird_f          1 set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10)  phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\", \"bird_f\",                      \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\")  phylo <- phylobase::phylo4(phylo)  endemicity_status <- sample(   x = c(\"not_present\", \"endemic\", \"nonendemic\"),    size = length(phylobase::tipLabels(phylo)),    replace = TRUE,   prob = c(0.6, 0.2, 0.2) )  phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status))  # reconstruction using parsimony phylod_parsimony <- add_asr_node_states(   phylod = phylod,    asr_method = \"parsimony\")  # reconstruction using Mk model phylod_parsimony <- add_asr_node_states(   phylod = phylod,    asr_method = \"mk\" ) #> Warning in add_asr_node_states(phylod = phylod, asr_method = \"mk\"): Mk asr #> method selected but rate model not supplied assuming equal-rates (ER)"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Extending_asr.html","id":"using-ancestral-state-reconstruction-methods-from-other-packages","dir":"Articles","previous_headings":"","what":"Using ancestral state reconstruction methods from other packages","title":"Extending DAISIEprep ASR models","text":"min asr algorithms implemented DAISIEprep. However, many models developed reconstruction states (traits) phylogenetic tree available R packages, may appropriate use different type model empirical group studied. Just R developed allow packages extend language, DAISIEprep designed allow extension ASR methods incorporation key functions (e.g. extract_island_species()). give examples three packages can used extensions: diversitree, BioGeoBEARS corHMM. diversitree (FitzJohn 2012) package containing suite State Speciation Extinction (SSE) model can reconstruct ancestral states model rates speciation, extinction transition states influence reconstruction. models prevent bias many species state high speciation model, Mk model, assumes due high transition rates state (see Maddison Knowles (2006)). example give uses MuSSE model three states (island endemic, island non-endemic present island), GeoSSE model considers presence absence two geographic areas (island mainland). SSE models diversitree can applied manner. BioGeoBEARS (Matzke 2013) widely used package includes DEC DEC+J models biogeographic reconstruction. Therefore, may people familiar models want apply extracting island colonisations DAISIE. Lastly, corHMM (Beaulieu et al. 2013) package implements hidden markov model evolution, similar Mk model, can better account rate heterogeneity introducing hidden states model. model can argued ; choice influenced taxonomic group studied.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Extending_asr.html","id":"decj","dir":"Articles","previous_headings":"","what":"DEC+J","title":"Extending DAISIEprep ASR models","text":"consider following randomly generated phylogeny tip data: first example, consider popular DEC (Dispersal-Extinction-Cladogenesis) model (Ree Smith 2008) founder-event speciation (DEC+J, Matzke (2013)), implemented R biogeobears package (Matzke 2013). BioGeoBEARS revolves around object, BioGeoBEARS_run, stores input data, structure model optimise, control parameters optimisation. Many elements list relevant advanced options model can ignored features used. example, BioGeoBEARS allows explicit modelling connectivity areas time-dependent availability areas. example, focus simple dispersal scenario two areas (mainland island), elements can ignored. direct interested user relevant tutorial BioGeoBEARS website. BioGeoBEARS expects least two inputs, phylogeny biogeographic data, matrix tip states. must supplied paths files read model run. tree can supplied Newick Nexus format, text file. Tip data must supplied text file specifying presence/absence every tip area, format used PHYLIP sofware suite. report full specifications BioGeoBEARS tutorial convenience, included function writes file phylod object simple mainland-island case. , nested function write_biogeobears_input(), prepare file Newick file one command structure model contained BioGeoBEARS_model_object. simply table contains status (fixed free), values (initial, min/max boundaries estimated value free) documentation parameter supermodel. BioGeoBEARS indeed built supermodel parameters can turned reproduce biogeographic models like DEC, DIVA, BayArea /expand . See Fig. 1 Matzke (2013) overview supermodel parameters:  Note default, parameters d e turned (.e., fixed set value cause effect). , default, BioGeoBEARS_model_object specifies DEC model. example, simply modify model make j free parameter, thus turn model DEC+J. controls: everything set , ’s good idea check input complies format expected BioGeoBEARS provided function. , ’re ready run optimisation: get warning, apparently can ignored. Marginal probabilities ancestral states appear found element $ML_marginal_prob_each_state_at_branch_top_AT_node output (infer code plotting function code). Columns respectively correspond posterior probability node present first area (, mainland, .e. present), second area (island, endemic), areas (widespread state, nonendemic). Rows correspond nodes (including tips!) order tree object read input Newick file, may differ original tree. identify probability associated node need match rows corresponding tip labels. code wrapped utility function, extract_biogeobears_ancestral_states_probs(). last step extracting island community tree rule state node probabilities. provide convenient function output previous function: default, (method = \"max\"), simply select state highest probability (preferring last event tie). method can also set \"random\" sample states randomly based probabilities, can use one desires explore sensibility downstream DAISIE analyses ancestral state reconstruction. Finally, recreate data format expected extract_island_species() (one state column endemicity_status tips, one state column island_status internal nodes) add back tree data phylobase’s phylo4d class.  Voilà!","code":"require(BioGeoBEARS) #> Loading required package: BioGeoBEARS require(ape) # BioGeoBEARS does not load ape::has.singles() which it calls #> Loading required package: ape # Default structure of the BioGeoBEARS object bgb_run <- BioGeoBEARS::define_BioGeoBEARS_run() bgb_run #> $geogfn #> [1] \"/home/runner/work/_temp/Library/BioGeoBEARS/extdata/Psychotria_geog.data\" #>  #> $trfn #> [1] \"/home/runner/work/_temp/Library/BioGeoBEARS/extdata/Psychotria_5.2.newick\" #>  #> $abbr #> [1] \"default\" #>  #> $description #> [1] \"defaults\" #>  #> $BioGeoBEARS_model_object #> An object of class \"BioGeoBEARS_model\" #> Slot \"params_table\": #>          type    init      min      max     est                note #> d        free 0.01000  1.0e-12  5.00000 0.01000               works #> e        free 0.01000  1.0e-12  5.00000 0.01000               works #> a       fixed 0.00000  1.0e-12  5.00000 0.00000               works #> b       fixed 1.00000  1.0e-12  1.00000 1.00000 non-stratified only #> x       fixed 0.00000 -2.5e+00  2.50000 0.00000               works #> n       fixed 0.00000 -1.0e+01 10.00000 0.00000               works #> w       fixed 1.00000 -1.0e+01 10.00000 1.00000               works #> u       fixed 0.00000 -1.0e+01 10.00000 0.00000               works #> j       fixed 0.00000  1.0e-05  2.99999 0.00000               works #> ysv       3-j 2.99999  1.0e-05  3.00000 2.99999               works #> ys    ysv*2/3 1.99999  1.0e-05  2.00000 1.99999               works #> y     ysv*1/3 1.00000  1.0e-05  1.00000 1.00000               works #> s     ysv*1/3 1.00000  1.0e-05  1.00000 1.00000               works #> v     ysv*1/3 1.00000  1.0e-05  1.00000 1.00000               works #> mx01    fixed 0.00010  1.0e-04  0.99990 0.00010               works #> mx01j    mx01 0.00010  1.0e-04  0.99990 0.00010               works #> mx01y    mx01 0.00010  1.0e-04  0.99990 0.00010               works #> mx01s    mx01 0.00010  1.0e-04  0.99990 0.00010               works #> mx01v    mx01 0.00010  1.0e-04  0.99990 0.00010               works #> mx01r   fixed 0.50000  1.0e-04  0.99990 0.50000                  no #> mf      fixed 0.10000  5.0e-03  0.99500 0.10000                 yes #> dp      fixed 1.00000  5.0e-03  0.99500 1.00000                 yes #> fdp     fixed 0.00000  5.0e-03  0.99500 0.00000                 yes #>                                                                        desc #> d                         anagenesis: rate of 'dispersal' (range expansion) #> e                      anagenesis: rate of 'extinction' (range contraction) #> a           anagenesis: rate of range-switching (i.e. for a standard char.) #> b                                    anagenesis: exponent on branch lengths #> x                                   exponent on distance (modifies d, j, a) #> n                     exponent on environmental distance (modifies d, j, a) #> w               exponent on manual dispersal multipliers (modifies d, j, a) #> u            anagenesis: exponent on extinction risk with area (modifies e) #> j                 cladogenesis: relative per-event weight of jump dispersal #> ysv                                                     cladogenesis: y+s+v #> ys                                                        cladogenesis: y+s #> y       cladogenesis: relative per-event weight of sympatry (range-copying) #> s              cladogenesis: relative per-event weight of subset speciation #> v           cladogenesis: relative per-event weight of vicariant speciation #> mx01                  cladogenesis: controls range size of smaller daughter #> mx01j                 cladogenesis: controls range size of smaller daughter #> mx01y                 cladogenesis: controls range size of smaller daughter #> mx01s                 cladogenesis: controls range size of smaller daughter #> mx01v                 cladogenesis: controls range size of smaller daughter #> mx01r                       root: controls range size probabilities of root #> mf                         mean frequency of truly sampling OTU of interest #> dp                 detection probability per true sample of OTU of interest #> fdp   false detection of OTU probability per true taphonomic control sample #>  #>  #> $timesfn #> [1] NA #>  #> $distsfn #> [1] NA #>  #> $dispersal_multipliers_fn #> [1] NA #>  #> $area_of_areas_fn #> [1] NA #>  #> $areas_allowed_fn #> [1] NA #>  #> $areas_adjacency_fn #> [1] NA #>  #> $detects_fn #> [1] NA #>  #> $controls_fn #> [1] NA #>  #> $max_range_size #> [1] NA #>  #> $force_sparse #> [1] FALSE #>  #> $use_detection_model #> [1] FALSE #>  #> $print_optim #> [1] TRUE #>  #> $printlevel #> [1] 0 #>  #> $on_NaN_error #> [1] -1e+50 #>  #> $wd #> [1] \"/home/runner/work/DAISIEprep/DAISIEprep/vignettes/articles\" #>  #> $num_cores_to_use #> [1] NA #>  #> $cluster_already_open #> [1] FALSE #>  #> $use_optimx #> [1] TRUE #>  #> $rescale_params #> [1] FALSE #>  #> $return_condlikes_table #> [1] FALSE #>  #> $calc_TTL_loglike_from_condlikes_table #> [1] TRUE #>  #> $calc_ancprobs #> [1] TRUE #>  #> $speedup #> [1] TRUE #>  #> $include_null_range #> [1] TRUE #>  #> $useAmbiguities #> [1] FALSE #>  #> $min_branchlength #> [1] 1e-06 path_to_phylo <- system.file(\"extending_asr\", \"biogeobears_ex_phylo.txt\", package = \"DAISIEprep\") phylo <- as(phylod, \"phylo\") #> Warning in asMethod(object): losing data while coercing phylo4d to phylo ape::write.tree(phylo, file = path_to_phylo)  bgb_run$trfn <- path_to_phylo ####################################################### # Geography file # Notes: # 1. This is a PHYLIP-formatted file. This means that in the  #    first line,  #    - the 1st number equals the number of rows (species) #    - the 2nd number equals the number of columns (number of areas) #    - after a tab, put the areas in parentheses, with spaces: (A B C D) # # 1.5. Example first line: #    10    4    (A B C D) #  # 2. The second line, and subsequent lines: #    speciesA    0110 #    speciesB    0111 #    speciesC    0001 #         ... #  # 2.5a. This means a TAB between the species name and the area 0/1s # 2.5b. This also means NO SPACE AND NO TAB between the area 0/1s. #  # 3. See example files at: #    http://phylo.wikidot.com/biogeobears#files #  # 4. Make you understand what a PLAIN-TEXT EDITOR is: #    http://phylo.wikidot.com/biogeobears#texteditors # # 3. The PHYLIP format is the same format used for C++ LAGRANGE geography files. # # 4. All names in the geography file must match names in the phylogeny file. # # 5. DON'T USE SPACES IN SPECIES NAMES, USE E.G. \"_\" # # 6. Operational taxonomic units (OTUs) should ideally be phylogenetic lineages,  #    i.e. genetically isolated populations.  These may or may not be identical  #    with species.  You would NOT want to just use specimens, as each specimen  #    automatically can only live in 1 area, which will typically favor DEC+J  #    models.  This is fine if the species/lineages really do live in single areas, #    but you wouldn't want to assume this without thinking about it at least.  #    In summary, you should collapse multiple specimens into species/lineages if  #    data indicates they are the same genetic population. ###################################################### path_to_biogeo <- system.file(\"extending_asr\", \"biogeobears_ex_phylo.txt\", package = \"DAISIEprep\") write_phylip_biogeo_file(phylod, path_to_biogeo) BioGeoBEARS::getranges_from_LagrangePHYLIP(path_to_biogeo) #> An object of class \"tipranges\" #> numeric(0) #> Slot \"df\": #>        M I #> bird_a 0 1 #> bird_b 0 1 #> bird_c 0 1 #> bird_d 0 1 #> bird_e 0 1 #> bird_f 0 1 #> bird_g 1 1 #> bird_h 1 0 #> bird_i 0 1 #> bird_j 1 0 #> bird_k 1 0 #> bird_l 1 0 #> bird_m 0 1 #> bird_n 0 1 #> bird_o 0 1 #> bird_p 1 0 #> bird_q 1 0 #> bird_r 1 0 #> bird_s 1 0 #> bird_t 1 0 bgb_run$geogfn <- path_to_biogeo path_to_phylo <- system.file(\"extending_asr\", \"biogeobears_ex_phylo.txt\", package = \"DAISIEprep\") path_to_biogeo <- system.file(\"extending_asr\", \"biogeobears_ex_biogeo.txt\", package = \"DAISIEprep\") write_biogeobears_input(phylod, path_to_phylo, path_to_biogeo) #> Warning in asMethod(object): losing data while coercing phylo4d to phylo  bgb_run$trfn <- path_to_phylo bgb_run$geogfn <- path_to_biogeo bgb_run$BioGeoBEARS_model_object #> An object of class \"BioGeoBEARS_model\" #> Slot \"params_table\": #>          type    init      min      max     est                note #> d        free 0.01000  1.0e-12  5.00000 0.01000               works #> e        free 0.01000  1.0e-12  5.00000 0.01000               works #> a       fixed 0.00000  1.0e-12  5.00000 0.00000               works #> b       fixed 1.00000  1.0e-12  1.00000 1.00000 non-stratified only #> x       fixed 0.00000 -2.5e+00  2.50000 0.00000               works #> n       fixed 0.00000 -1.0e+01 10.00000 0.00000               works #> w       fixed 1.00000 -1.0e+01 10.00000 1.00000               works #> u       fixed 0.00000 -1.0e+01 10.00000 0.00000               works #> j       fixed 0.00000  1.0e-05  2.99999 0.00000               works #> ysv       3-j 2.99999  1.0e-05  3.00000 2.99999               works #> ys    ysv*2/3 1.99999  1.0e-05  2.00000 1.99999               works #> y     ysv*1/3 1.00000  1.0e-05  1.00000 1.00000               works #> s     ysv*1/3 1.00000  1.0e-05  1.00000 1.00000               works #> v     ysv*1/3 1.00000  1.0e-05  1.00000 1.00000               works #> mx01    fixed 0.00010  1.0e-04  0.99990 0.00010               works #> mx01j    mx01 0.00010  1.0e-04  0.99990 0.00010               works #> mx01y    mx01 0.00010  1.0e-04  0.99990 0.00010               works #> mx01s    mx01 0.00010  1.0e-04  0.99990 0.00010               works #> mx01v    mx01 0.00010  1.0e-04  0.99990 0.00010               works #> mx01r   fixed 0.50000  1.0e-04  0.99990 0.50000                  no #> mf      fixed 0.10000  5.0e-03  0.99500 0.10000                 yes #> dp      fixed 1.00000  5.0e-03  0.99500 1.00000                 yes #> fdp     fixed 0.00000  5.0e-03  0.99500 0.00000                 yes #>                                                                        desc #> d                         anagenesis: rate of 'dispersal' (range expansion) #> e                      anagenesis: rate of 'extinction' (range contraction) #> a           anagenesis: rate of range-switching (i.e. for a standard char.) #> b                                    anagenesis: exponent on branch lengths #> x                                   exponent on distance (modifies d, j, a) #> n                     exponent on environmental distance (modifies d, j, a) #> w               exponent on manual dispersal multipliers (modifies d, j, a) #> u            anagenesis: exponent on extinction risk with area (modifies e) #> j                 cladogenesis: relative per-event weight of jump dispersal #> ysv                                                     cladogenesis: y+s+v #> ys                                                        cladogenesis: y+s #> y       cladogenesis: relative per-event weight of sympatry (range-copying) #> s              cladogenesis: relative per-event weight of subset speciation #> v           cladogenesis: relative per-event weight of vicariant speciation #> mx01                  cladogenesis: controls range size of smaller daughter #> mx01j                 cladogenesis: controls range size of smaller daughter #> mx01y                 cladogenesis: controls range size of smaller daughter #> mx01s                 cladogenesis: controls range size of smaller daughter #> mx01v                 cladogenesis: controls range size of smaller daughter #> mx01r                       root: controls range size probabilities of root #> mf                         mean frequency of truly sampling OTU of interest #> dp                 detection probability per true sample of OTU of interest #> fdp   false detection of OTU probability per true taphonomic control sample knitr::include_graphics(\"http://phylo.wdfiles.com/local--files/biogeobears/BioGeoBEARS_supermodel.png\") # DEC -> DEC+J bgb_run$BioGeoBEARS_model_object@params_table$desc[9] <- \"free\" bgb_run$BioGeoBEARS_model_object@params_table$init[9] <- 0.01 # same value as d, e bgb_run$num_cores_to_use <- 1 # no default value on this one bgb_run$print_optim <- FALSE # for the sake of the vignette BioGeoBEARS::check_BioGeoBEARS_run(bgb_run) #> [1] TRUE res <- BioGeoBEARS::bears_optim_run(bgb_run) #> [1] \"Note: tipranges_to_tip_condlikes_of_data_on_each_state() is converting a states_list with (0-based) numbers to the equivalent areanames\" #>  #> Your computer has 4 cores. #> [1] \"parscale:\" #> [1] 1 1 #>  #>  #> NOTE: Before running optimx(), here is a test calculation of the data likelihood #> using calc_loglike_for_optim() on initial parameter values, with printlevel=2... #> if this crashes, the error messages are more helpful #> than those from inside optimx(). #>  #>  #> calc_loglike_for_optim() on initial parameters loglike=-26.4272 #>  #>  #>  #> Calculation of likelihood on initial parameters: successful. #>  #> Now starting Maximum Likelihood (ML) parameter optimization with optimx()... #>  #>  #>  #> Printing any warnings() that occurred during calc_loglike_for_optim(): #>  #>  #>  #> Results of optimx_scalecheck() below. Note: sometimes rescaling parameters may be helpful for ML searches, when the parameters have much different absolute sizes. This can be attempted by setting BioGeoBEARS_run_object$rescale_params = TRUE. #>  #> $lpratio #> [1] 0 #>  #> $lbratio #> [1] 0 #>  #> Maximizing -- use negfn and neggr #> Warning in (function (npt = min(n + 2L, 2L * n), rhobeg = NA, rhoend = NA, : #> unused control arguments ignored #>  #>  #> This is the output from optim, optimx, or GenSA. Check the help on those functions to #> interpret this output and check for convergence issues: #>  #>               p1           p2   value fevals gevals niter convcode  kkt1 kkt2 #> bobyqa 0.3984246 1.106577e-08 -19.384     65     NA    NA        0 FALSE TRUE #>        xtime #> bobyqa 0.391 # Extract probabilities asr_likelihoods <- res$ML_marginal_prob_each_state_at_branch_top_AT_node[,-1] # Need to find which tip label matches each row tree <- ape::read.tree(res$inputs$trfn) tip_labels <- tree$tip.label node_labels <- tree$node.label if (is.null(node_labels)) node_labels <- rep(NA, length(tip_labels) - 1) asr_df <- data.frame(   labels = c(tip_labels, node_labels),   not_present_prob = asr_likelihoods[,1],   endemic_prob = asr_likelihoods[,2],   nondendemic_prob = asr_likelihoods[,3] ) head(asr_df) #>   labels not_present_prob endemic_prob nondendemic_prob #> 1 bird_d                0            1                0 #> 2 bird_e                0            1                0 #> 3 bird_c                0            1                0 #> 4 bird_a                0            1                0 #> 5 bird_b                0            1                0 #> 6 bird_f                0            1                0 tail(asr_df) #>    labels not_present_prob endemic_prob nondendemic_prob #> 34   <NA>     6.137318e-13 2.401258e-02     9.759874e-01 #> 35   <NA>     9.474826e-11 1.180088e-10     1.000000e+00 #> 36   <NA>     2.535833e-22 1.000000e+00     2.671022e-11 #> 37   <NA>     1.000000e+00 8.344796e-19     1.776066e-08 #> 38   <NA>     1.000000e+00 8.802463e-23     4.458255e-10 #> 39   <NA>     1.000000e+00 1.529832e-25     9.339950e-11 asr_df <- extract_biogeobears_ancestral_states_probs(res) endemicity_status <- select_endemicity_status(asr_df, method = \"max\") # Add endemicity data nb_tips <- ape::Ntip(tree) asr_df$label <- NULL # drop label asr_df$endemicity_status <- rep(NA, nrow(asr_df)) asr_df$endemicity_status[1:nb_tips] <- endemicity_status[1:nb_tips]  asr_df$island_status <- rep(NA, nrow(asr_df)) asr_df$island_status[(nb_tips + 1):nrow(asr_df)] <- endemicity_status[(nb_tips + 1):nrow(asr_df)]   # Rebuild phylod with ancestral states phylod <- phylobase::phylo4d(tree, all.data = asr_df) plot_phylod(phylod) island_clades <- DAISIEprep::extract_island_species(   phylod = phylod,   extraction_method = \"asr\" ) island_clades@island_tbl$species #> [[1]] #>  [1] \"bird_d\" \"bird_e\" \"bird_c\" \"bird_a\" \"bird_b\" \"bird_f\" \"bird_i\" \"bird_g\" #>  [9] \"bird_o\" \"bird_m\" \"bird_n\" island_clades@island_tbl$branching_times #> [[1]] #>  [1] 2.12780098 0.38960848 0.30994875 0.16207082 0.13800731 0.10346994 #>  [7] 0.08406573 0.04477260 0.02586891 0.01218459"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Extending_asr.html","id":"musse","dir":"Articles","previous_headings":"","what":"MuSSE","title":"Extending DAISIEprep ASR models","text":"SSE-class models explicitly model inter-dependency evolution set traits evolutionary rates (speciation extinction). traits set represent geographic areas, models can used model range evolution. mainland-island system, model endemicity status ternary trait: endemic, non-endemic, present island. Discrete-trait models two states modelled MuSSE (FitzJohn 2012), implemented package diversitree. make example straightforward avoid non-convergence issues, use tree simulated directly MuSSE example, three states (mainland/island/, present/endemic/nonendemic) arbitrary parameter values: output phylogenetic trees come simulated states attached tips: ’re going switch back forth single-digit states three endemicity status used DAISIEprep, included functions switch easily two:  ASR diversitree done three steps. model structure first specified create likelihood function; parameters optimised function; finally probabilities states internal nodes determined resulting maximum-likelihood model. obtain (pivoted) table probabilites linked state, can select states BioGeoBEARS example:  completed tree can extract island clade: SSE models diversitree can tuned constraints simplify model. can use make model closer assumptions DAISIE. example, possible species jump directly island disappear mainland simultaneously; direct transitions state 1 2 back forbidden. One also assume mainland speciation unlikely, resulting zero speciation mainland speciation rate endemic nonendemic species: example won’t succeed mismatch initial parameters value distribution states tip, include illustrating one implement constrains diversitree model. Instead constraining multi-state model emulate dispersal evolution mainland island, one may find appropriate use SSE model specifically dedicated geographic traits, .e., GeoSSE.","code":"# Simulate a tree under a MuSSE model, # with arbitrary initial parameter values pars <- c(   # lambda1 lambda2 lambda3   0.2, 0.2, 0.2,   # mu1 mu2 mu3   0.02, 0.02, 0.02,   # q12 q13 q21 q23 q31 q32   0,  0.1,  0, 0,  0.1, 0.1 ) set.seed(4) phylo <- diversitree::trees(   pars,   type = \"musse\",   max.taxa = 20,   max.t = Inf,   x0 = 1 )[[1]]  # DAISIEprep requires binomial names ntips <- ape::Ntip(phylo) bird_names <- paste0(\"bird_\", letters[1:ntips]) phylo$tip.label <- bird_names names(phylo$tip.state) <- bird_names  # DAISIEprep requires a mainland outgroup outgroup_clade <- c(\"bird_h\", \"bird_i\", \"bird_l\", \"bird_k\", \"bird_r\", \"bird_q\") phylo$tip.state[phylo$tip.label %in% outgroup_clade] <- 1 # not_present phylo$tip.state #> bird_a bird_b bird_c bird_d bird_e bird_f bird_g bird_h bird_i bird_j bird_k  #>      1      3      1      3      2      2      2      1      1      1      1  #> bird_l bird_m bird_n bird_o bird_p bird_q bird_r bird_s bird_t  #>      1      2      2      2      3      1      1      1      1 endemicity_status <- sse_states_to_endemicity(phylo$tip.state, sse_model = \"musse\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) plot_phylod(phylod) states <- get_sse_tip_states(phylod, sse_model = \"musse\") states # note that states must be named after tips #> bird_a bird_b bird_c bird_d bird_e bird_f bird_g bird_h bird_i bird_j bird_k  #>      1      3      1      3      2      2      2      1      1      1      1  #> bird_l bird_m bird_n bird_o bird_p bird_q bird_r bird_s bird_t  #>      1      2      2      2      3      1      1      1      1 tree <- as(phylod, \"phylo\") #> Warning in asMethod(object): losing data while coercing phylo4d to phylo  # Create likelihood function lik_musse <- diversitree::make.musse(   tree = tree,    states = states,    k = 3 ) lik_musse #> MuSSE likelihood function: #>   * Parameter vector takes 12 elements: #>      - lambda1, lambda2, lambda3, mu1, mu2, mu3, q12, q13, q21, q23, #>        q31, q32 #>   * Function takes arguments (with defaults) #>      - pars: Parameter vector #>      - condition.surv [TRUE]: Condition likelihood on survial? #>      - root [ROOT.OBS]: Type of root treatment #>      - root.p [NULL]: Vector of root state probabilities #>      - intermediates [FALSE]: Also return intermediate values? #>   * Phylogeny with 20 tips and 19 nodes #>      - Taxa: bird_a, bird_b, bird_c, bird_d, bird_e, bird_f, ... #>   * Reference: #>      - FitzJohn (submitted) #> R definition: #> function (pars, condition.surv = TRUE, root = ROOT.OBS, root.p = NULL,  #>     intermediates = FALSE) fit_musse <- diversitree::find.mle(func = lik_musse, x.init = pars, method = \"subplex\")  # MuSSE ancestral state reconstructions under the ML model asr_musse <- diversitree::asr.marginal(lik = lik_musse, pars = coef(fit_musse)) asr_musse #>              [,1]         [,2]         [,3]         [,4]         [,5] #> [1,] 5.932021e-07 2.957938e-12 1.165003e-08 1.481783e-12 9.104286e-09 #> [2,] 9.999994e-01 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 #> [3,] 1.353886e-12 2.064840e-19 3.309455e-13 1.196563e-18 3.387157e-13 #>              [,6]         [,7]         [,8]         [,9]        [,10] #> [1,] 6.385956e-14 3.264622e-15 9.975371e-01 9.999999e-01 1.680040e-13 #> [2,] 1.000000e+00 1.000000e+00 2.462789e-03 1.229092e-07 1.000000e+00 #> [3,] 1.233413e-12 2.464181e-12 1.389318e-07 5.994989e-11 2.837966e-18 #>             [,11]        [,12]        [,13]        [,14]        [,15] #> [1,] 1.528827e-12 5.497805e-07 4.225137e-13 1.722711e-15 9.037885e-01 #> [2,] 1.000000e+00 9.999989e-01 1.000000e+00 1.000000e+00 9.621135e-02 #> [3,] 9.585585e-18 5.542938e-07 3.118874e-18 8.713015e-20 1.523346e-07 #>             [,16]        [,17]        [,18]        [,19] #> [1,] 9.145696e-01 9.999139e-01 9.992928e-01 9.999998e-01 #> [2,] 8.543035e-02 8.610419e-05 7.071914e-04 2.130365e-07 #> [3,] 6.000565e-08 7.413017e-09 2.026303e-08 3.933283e-10 asr_musse <- as.data.frame(t(asr_musse)) colnames(asr_musse) <- paste0(all_endemicity_status(), \"_prob\")  island_status <- select_endemicity_status(asr_musse, method = \"max\") island_status #>  [1] \"endemic\"     \"endemic\"     \"endemic\"     \"endemic\"     \"endemic\"     #>  [6] \"endemic\"     \"endemic\"     \"not_present\" \"not_present\" \"endemic\"     #> [11] \"endemic\"     \"endemic\"     \"endemic\"     \"endemic\"     \"not_present\" #> [16] \"not_present\" \"not_present\" \"not_present\" \"not_present\" asr_musse$island_status <- island_status rownames(asr_musse) <- phylobase::nodeId(phylod, \"internal\")  phylod <- phylobase::addData(   phylod,   node.data = asr_musse ) plot_phylod(phylod) island_clades <- DAISIEprep::extract_island_species(   phylod = phylod,   extraction_method = \"asr\" ) island_clades@island_tbl$species #> [[1]] #> [1] \"bird_d\" \"bird_o\" \"bird_p\" \"bird_e\" \"bird_f\" \"bird_b\" \"bird_g\" \"bird_m\" #> [9] \"bird_n\" island_clades@island_tbl$branching_times #> [[1]] #> [1] 8.0047889 6.4518206 4.2518993 2.5503507 1.6635537 1.6299262 0.4224813 #> [8] 0.4212151 lik_musse_c <- diversitree::constrain(   lik_musse,    q12 ~ 0, q21 ~ 0, # no island-mainland jumps   lambda1 ~ 0, lambda3 ~ lambda2 # no mainland speciation )  # Parameters must be removed accordingly pars_c <- c(   # lambda2   0.2,   # mu1 mu2 mu3   0.03, 0.03, 0.03,   # q13 q23 q31 q32   0, 0.02, 0, 0.01 )  fit_musse_c <- diversitree::find.mle(func = lik_musse_c, x.init = pars_c, method = \"subplex\") # Won't work because of poor parameter choice vs tip states"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Extending_asr.html","id":"geosse","dir":"Articles","previous_headings":"","what":"GeoSSE","title":"Extending DAISIEprep ASR models","text":"GeoSSE (Goldberg et al. 2011) special case SSE models dedicated case traits correspond presence absence two geographic areas, case mainland/island clade. important feature instead considering widespread state (mainland + island, nonendemic) third separate category two single-area states (MuSSE example ), GeoSSE explicitly models corresponding presence areas, just BioGeoBEARS. Accordingly, dispersal unidirectional, single area towards widespread state. Extinction area widespread state returns species remaining single area, extinction already single area results true extinction species. fact, GeoSSE SSE implementation DEC model, difference GeoSSE assumes effect areas rates speciation extinction; thus branching patterns observed tree [goldberg_phylogenetic_2011], DEC maps geography along branches tree. use tree previous example:  GeoSSE diversitree different state encoding MuSSE: states expected 0, 1, 2, 0 corresponding widespread state (, present mainland island, nonendemic) two states corresponding single geographic areas. Hereafter, follow 1 = mainland/not_present 2 = island/endemic. syntax otherwise MuSSE (SSE models implemented diversitree).  now ready extract island clade. case example, crown node inferred present island (nonendemic), time initial colonisation event estimated tree. Branching times collected, passing data DAISIE, colonisation time default set -Inf, age island.","code":"# Rm all data but tip states phylod@data <- phylod@data[1] plot_phylod(phylod) states <- get_sse_tip_states(phylod, sse_model = \"geosse\") states # note the encoding differs from the MuSSE example #> bird_a bird_b bird_c bird_d bird_e bird_f bird_g bird_h bird_i bird_j bird_k  #>      1      0      1      0      2      2      2      1      1      1      1  #> bird_l bird_m bird_n bird_o bird_p bird_q bird_r bird_s bird_t  #>      1      2      2      2      0      1      1      1      1  tree <- as(phylod, \"phylo\")  # Create likelihood function lik_geosse <- diversitree::make.geosse(   tree = tree,    states = states ) lik_geosse #> GeoSSE likelihood function: #>   * Parameter vector takes 7 elements: #>      - sA, sB, sAB, xA, xB, dA, dB #>   * Function takes arguments (with defaults) #>      - pars: Parameter vector #>      - condition.surv [TRUE]: Condition likelihood on survial? #>      - root [ROOT.OBS]: Type of root treatment #>      - root.p [NULL]: Vector of root state probabilities #>      - intermediates [FALSE]: Also return intermediate values? #>   * Phylogeny with 20 tips and 19 nodes #>      - Taxa: bird_a, bird_b, bird_c, bird_d, bird_e, bird_f, ... #>   * Reference: #>      - Goldberg et al. (2011) doi:10.1093/sysbio/syr046 #> R definition: #> function (pars, condition.surv = TRUE, root = ROOT.OBS, root.p = NULL,  #>     intermediates = FALSE) # Initial GeoSSE parameter values pars <- c(   # Speciation: sA sB sAB   0.2, 0.2, 0.2,   # Extinction: xA xB   0.02, 0.02,   # Dispersal: dA dB   0.1, 0 )  # Optimisation of the model's likelihood fit_geosse <- diversitree::find.mle(func = lik_geosse, x.init = pars, method = \"subplex\")  # Ancestral state reconstructions under the ML model asr_geosse <- diversitree::asr.marginal(lik = lik_geosse, pars = coef(fit_geosse))  # Select node states from marginal probabilities asr_geosse <- as.data.frame(t(asr_geosse)) colnames(asr_geosse) <- c(\"nonendemic_prob\", \"not_present_prob\", \"endemic_prob\") # make sure to get the order right! island_status <- select_endemicity_status(asr_geosse, method = \"max\")  # Add node data to the tree asr_geosse$island_status <- island_status rownames(asr_geosse) <- phylobase::nodeId(phylod, \"internal\") phylod <- phylobase::addData(   phylod,   node.data = asr_geosse ) plot_phylod(phylod) island_clades <- DAISIEprep::extract_island_species(   phylod = phylod,   extraction_method = \"asr\" ) #> Warning in extract_species_asr(phylod = phylod, species_label = as.character(phylod@label[i]), : Root of the phylogeny is on the island so the colonisation #>               time from the stem age cannot be collected, colonisation time #>               will be set to infinite. island_clades@island_tbl$species #> [[1]] #> [1] \"bird_d\" \"bird_o\" \"bird_p\" \"bird_e\" \"bird_f\" \"bird_b\" \"bird_g\" \"bird_m\" #> [9] \"bird_n\" island_clades@island_tbl$branching_times #> [[1]] #> [1] 8.0047889 6.4518206 4.2518993 2.5503507 1.6635537 1.6299262 0.4224813 #> [8] 0.4212151"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Extending_asr.html","id":"corhmm","dir":"Articles","previous_headings":"","what":"corHMM","title":"Extending DAISIEprep ASR models","text":"Just diversitree, corHMM (Beaulieu et al. 2013) allows modelling fitting SSE-class birth-death processes. addition standard SSE models, corHMM can also consider overarching evolutionary processes control changes observed traits, captured date – -called “hidden traits” (Beaulieu et al. 2013). particularly relevant large /old clades, whenever appears reasonable parts tree evolved similar conditions. consider example context island biogeography, let us imagine plausible evolutionary scenario bird clade. clade, emergence endemic species following colonisation island takes time, requiring either extinction mainland population differentiation island population build-reproductive barrier. Naturally, island population may also go extinct, transitions different endemicity states follow configuration: present (NP) <-> Nonendemic (NE) <-> Endemic (E) (Regime 1) However, one sub-clade (let’s say one comprises bird_m - bird_p) reduced dispersal ability, perhaps result dietary, metabolic physiological constraints. difference subtle captured data. , rare long-distance migrants reach island instantaneously isolated mainland population, rapidly form endemic species. sub-clade never found nonendemic state, instead species transit directly present endemic, back-colonisation impossible: present (NP) -> Endemic (E) (Regime 2) get following trait distribution:  Let’s first fit naive, single-regime SSE model, possible transitions three states permitted: Calling output corHMM prints summary solution, including estimated transition rates. mind Legend element: corHMM auto-numbers trait states order first occurrence data. may (present case, ) differ numbering used original data. , ensure traits map correctly DAISIEprep’s endemicity statuses. Note transitions endemic present estimated never happen, suggesting bird_m bird_o either first nonendemic subject dramatically fast extinction mainland population, result miraculous colonization events. posterior probabilities ancestral states contained states element output object.  tree suggests colonizaton events recent (credible) three miraculous -present endemic transitions! Let us try , time constraining model consider two speciation regimes described earlier, including possible transitions . First, need specify mapping transitions three states regime 3--3 matrices. numbers indices indicating equal rates transitions (.e., number parameters), values! Zero forbids transition. also need specify possible transitions two regimes 2--2 matrix. matrices can collated viable corHMM input via getFullMat(): usual, proceed extract posterior probabilities ancestral states. However, first need merge probabilities state across two regimes. can add ASR phylogeny:  Admittedly (embarassingly), posterior probabilities change much complex realistic model - bad!","code":"# extract data from phylo status_df <- data.frame(\"species\" = phylod@label, phylod@data)  # Fit corHMM model to tree fit_corhmm <- corHMM::corHMM(   phy = phylo,   data = status_df,   model = \"ARD\", # all transitions independent, default   rate.cat = 1 # only one regime ) #> State distribution in data: #> States:  1   2   3    #> Counts:  5   7   8    #> Beginning thorough optimization search -- performing 0 random restarts  #> Finished. Inferring ancestral states using marginal reconstruction. fit_corhmm #>  #> Fit #>       -lnL      AIC     AICc Rate.cat ntax #>  -20.50328 53.00655 59.46809        1   20 #>  #> Legend #>             1             2             3  #>     \"endemic\"  \"nonendemic\" \"not_present\"  #>  #> Rates #>              (1,R1)   (2,R1)       (3,R1) #> (1,R1)           NA 22.85126  0.000000001 #> (2,R1) 1.739119e+01       NA 22.034092974 #> (3,R1) 1.000154e-09 18.11829           NA #>  #> Arrived at a reliable solution # Extract posterior probabilities of each state for each node asr_corhmm <- as.data.frame(fit_corhmm$states)  # Convert posterior data to DAISIE format colnames(asr_corhmm) <- paste0(unique(status_df$endemicity_status), \"_prob\") island_status <- select_endemicity_status(asr_corhmm, method = \"max\") asr_corhmm$island_status <- island_status rownames(asr_corhmm) <- phylobase::nodeId(phylod, \"internal\")  phylod <- phylobase::addData(   phylod,   node.data = asr_corhmm ) plot_phylod(phylod) # Regime 1, E <-> NE <-> NP rate_mat_r1 <- matrix(   data = c(     0, 1, 0,     1, 0, 2,     0, 2, 0),   # Two rates, E <-> NE and NE <-> NP   nrow = 3, ncol = 3 )  # Regime 2, NP -> E rate_mat_r2 <- matrix(   data = c(     0, 0, 0,     0, 0, 0,     1, 0, 0),   # One rate: NP -> E   nrow = 3, ncol = 3 ) regime_shift_mat <- matrix(   data = c(0, 1,            1, 0),   ncol = 2, nrow = 2 ) # Assemble input matrix param_mat <- corHMM::getFullMat(   StateMats = list(rate_mat_r1, rate_mat_r2),   RateClassMat = regime_shift_mat )  # Fit the model fit_corhmm_hidden <- corHMM::corHMM(   phy = phylo,   data = status_df,   rate.cat = 2,   rate.mat = param_mat ) #> State distribution in data: #> States:  1   2   3    #> Counts:  5   7   8    #> Beginning thorough optimization search -- performing 0 random restarts  #> Finished. Inferring ancestral states using marginal reconstruction. # Output fit_corhmm_hidden #>  #> Fit #>       -lnL      AIC     AICc Rate.cat ntax #>  -20.67452 49.34904 52.01571        2   20 #>  #> Legend #>             1             2             3  #>     \"endemic\"  \"nonendemic\" \"not_present\"  #>  #> Rates #>           (1,R1)    (2,R1)    (3,R1) (1,R2) (2,R2)    (3,R2) #> (1,R1)        NA  53.84588        NA    100     NA        NA #> (2,R1)  53.84588        NA  38.87903     NA    100        NA #> (3,R1)        NA  38.87903        NA     NA     NA 100.00000 #> (1,R2) 100.00000        NA        NA     NA     NA  10.12079 #> (2,R2)        NA 100.00000        NA     NA     NA        NA #> (3,R2)        NA        NA 100.00000     NA     NA        NA #>  #> Arrived at a reliable solution # Extract posterior probabilities of each state for each node asr_corhmm_hidden <- as.data.frame(fit_corhmm_hidden$states) head(asr_corhmm_hidden) # 6 columns #>      (1,R1)    (2,R1)    (3,R1)    (1,R2)    (2,R2)    (3,R2) #> 1 0.1397523 0.1636058 0.1966419 0.1269082 0.1636058 0.2094860 #> 2 0.1397523 0.1636058 0.1966419 0.1269082 0.1636058 0.2094860 #> 3 0.1397523 0.1636058 0.1966420 0.1269082 0.1636058 0.2094861 #> 4 0.1397633 0.1636121 0.1966271 0.1269184 0.1636142 0.2094649 #> 5 0.1398113 0.1636394 0.1965624 0.1269632 0.1636506 0.2093730 #> 6 0.1398908 0.1636890 0.1964514 0.1270358 0.1637188 0.2092142  # Merge (sum) probabilities for both regimes for (i in 1:3) asr_corhmm_hidden[i] <- asr_corhmm_hidden[i] + asr_corhmm_hidden[i + 3] asr_corhmm_hidden[4:6] <- NULL  head(asr_corhmm_hidden) #>      (1,R1)    (2,R1)    (3,R1) #> 1 0.2666605 0.3272116 0.4061279 #> 2 0.2666605 0.3272116 0.4061279 #> 3 0.2666604 0.3272115 0.4061280 #> 4 0.2666817 0.3272263 0.4060920 #> 5 0.2667746 0.3272900 0.4059354 #> 6 0.2669266 0.3274077 0.4056656 # Convert posterior data to DAISIE format colnames(asr_corhmm_hidden) <- paste0(unique(status_df$endemicity_status), \"_prob\") island_status <- select_endemicity_status(asr_corhmm_hidden, method = \"max\") asr_corhmm_hidden$island_status <- island_status rownames(asr_corhmm_hidden) <- phylobase::nodeId(phylod, \"internal\") head(asr_corhmm_hidden) #>    endemic_prob nonendemic_prob not_present_prob island_status #> 21    0.2666605       0.3272116        0.4061279   not_present #> 22    0.2666605       0.3272116        0.4061279   not_present #> 23    0.2666604       0.3272115        0.4061280   not_present #> 24    0.2666817       0.3272263        0.4060920   not_present #> 25    0.2667746       0.3272900        0.4059354   not_present #> 26    0.2669266       0.3274077        0.4056656   not_present  # Add ASR to phylo phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- phylobase::addData(   phylod,   node.data = asr_corhmm_hidden ) plot_phylod(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Extending_asr.html","id":"concluding-remarks","dir":"Articles","previous_headings":"","what":"Concluding remarks","title":"Extending DAISIEprep ASR models","text":"Extracting island dataset larger phylogeny may case require estimation history colonisation island within internal nodes phylogeny. shown using examples three R packages commonly used ancestral state reconstruction. choice appropriate model use ancestral state reconstruction difficult question, integral part scientific exercise. likely depend entirely taxa island system hand, thus believe user best placed make informed decision. entirely possible use multiple models assess sensibility island data extraction processes, example possibility jump dispersal (DEC+J) feedbacks speciation island status (GeoSSE). Similarly, one may find method = \"random\" option select_endemicity_status() use study uncertainty reconstructions within output single model. examples, hope introduced accessible framework, can modified ease fit specific needs analysis hand.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Extending_asr.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Extending DAISIEprep ASR models","text":", show data manipulation underlying ASR maximum parsimony, done inside add_asr_node_states(). maximum parsimony ancestral state reconstruction R package castor. castor package works S3 phylo objects, need convert phylogeny back type run analysis. provides us matrix probabilities states (island presence/absence) node phylogeny. first column matrix present island second column matrix present island. matrix likelihood states can chose probable state node using max.col() function. need make decision downstream consequences DAISIE data extracted tree, node island presence absence equally probable need decide whether species considered island. consider island use ties.method = \"last\" max.col() function, consider island use ties.method = \"first\". example assume species island, completeness may worth running seeing significant downstream consequences. values can now converted back string make readable. Now ancestral states nodes available can combine phylod object.","code":"tip_states <- c() endemicity_status <- phylobase::tipData(phylod)$endemicity_status for (i in seq_along(endemicity_status)) {   if (grepl(pattern = \"^not_present$\", x = endemicity_status[i])) {     tip_states[i] <- 1   } else if (grepl(pattern = \"^nonendemic$\", x = endemicity_status[i])) {     tip_states[i] <- 2   } else if (grepl(pattern = \"^endemic$\", x = endemicity_status[i])) {     tip_states[i] <- 3   } } phylo <- as(phylo, \"phylo\") asr <- castor::asr_max_parsimony(   tree = phylo,   tip_states = tip_states,   transition_costs = \"sequential\" ) if (ncol(asr$ancestral_likelihoods) == 2) {   colnames(asr$ancestral_likelihoods) <- c(\"not_present\", \"nonendemic\") } else if (ncol(asr$ancestral_likelihoods) == 3) {   colnames(asr$ancestral_likelihoods) <-     c(\"not_present\", \"nonendemic\", \"endemic\") } asr$ancestral_likelihoods node_states <- max.col(asr$ancestral_likelihoods, ties.method = \"last\") node_states <- gsub(   pattern = \"1\", replacement = \"not_present\", x = node_states ) node_states <- gsub(   pattern = \"2\", replacement = \"nonendemic\", x = node_states ) node_states <- gsub(   pattern = \"3\", replacement = \"endemic\", x = node_states ) node_data <- data.frame(   island_status = node_states,   endemic_prob = asr$ancestral_likelihoods[, \"endemic\"],   nonendemic_prob = asr$ancestral_likelihoods[, \"nonendemic\"],   not_present_prob = asr$ancestral_likelihoods[, \"not_present\"],   row.names = phylobase::nodeId(phylod, \"internal\") ) phylod <- phylobase::phylo4d(   phylo,   tip.data = as.data.frame(endemicity_status),   node.data = node_data )"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Forcing_nonendemic_singleton.html","id":"problem-statement","dir":"Articles","previous_headings":"","what":"Problem statement","title":"Forcing non-endemic singletons: solutions and limitations","text":"using “asr” extraction method, non-endemic species closely phylogenetically related can potentially erroneously lumped single clade. clade labelled endemic DAISIE model handle non-endemic clades. example, see plot shows 3 plant species grouped single clade even though non-endemic island species.  priori knowledge non-endemic species separate colonisations can taken account extracting phylogenetic island community data using extract_island_species(). example, group closely related geographically widespread species, reasonable assume speciate island.","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"Plant_a\", \"Plant_b\", \"Plant_c\", \"Plant_d\", \"Plant_e\",                      \"Plant_f\", \"Plant_g\", \"Plant_h\", \"Plant_i\", \"Plant_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- c(\"not_present\", \"not_present\", \"not_present\",                         \"not_present\", \"not_present\", \"not_present\",                        \"nonendemic\", \"nonendemic\", \"nonendemic\",                        \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"mk\", rate_model = \"ER\", tie_preference = \"mainland\") plot_phylod(phylod = phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Forcing_nonendemic_singleton.html","id":"first-solution-forcing-non-endemic-island-species-to-be-singletons","dir":"Articles","previous_headings":"","what":"First solution: forcing non-endemic island species to be singletons","title":"Forcing non-endemic singletons: solutions and limitations","text":"extract_island_species() function argument force_nonendemic_singleton, default FALSE fully trusts ancestral state reconstruction (see add_asr_node_states()) allowing non-endemics grouped endemic clade. force_nonendemic_singleton argument active using extraction_method = \"asr\", using extraction_method = \"min\" force_nonendemic_singleton ignored. example: can see code extracts single colonisation event resulting endemic clade. However, force_nonendemic_singleton set TRUE closely related non-endemic island species split single-species island colonists (see Limitations section cases work). example: case, force_nonendemic_singleton = TRUE now allows non-endemics extracted separate colonisation events island.","code":"island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\",    force_nonendemic_singleton = FALSE ) island_tbl #> Class:  Island_tbl  #>   clade_name  status missing_species  col_time col_max_age branching_times #> 1    Plant_g endemic               0 0.7648553       FALSE    0.380034.... #>   min_age      species clade_type #> 1      NA Plant_g,....          1 island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\",    force_nonendemic_singleton = TRUE ) island_tbl #> Class:  Island_tbl  #>   clade_name     status missing_species   col_time col_max_age branching_times #> 1    Plant_g nonendemic               0 0.38003405       FALSE              NA #> 2    Plant_h nonendemic               0 0.04960523       FALSE              NA #> 3    Plant_i nonendemic               0 0.04960523       FALSE              NA #>   min_age species clade_type #> 1      NA Plant_g          1 #> 2      NA Plant_h          1 #> 3      NA Plant_i          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Forcing_nonendemic_singleton.html","id":"limitation","dir":"Articles","previous_headings":"First solution: forcing non-endemic island species to be singletons","what":"Limitation","title":"Forcing non-endemic singletons: solutions and limitations","text":"first limitation approach setting force_nonendemic_singleton TRUE work non-endemic island species reconstructed embedded within endemic clade. example, take look tree see ancestral state reconstruction node island ancestor endemic non-endemic species:  case even setting force_nonendemic_singleton = TRUE clade still extracted single endemic clade. shown warning printed make aware issue known alert possible erroneous results downstream using data, example fitting DAISIE model. second limitation forcing non-endemic island species separate colonisation events, effect overwriting ancestral state reconstruction, order extraction matters. words, order extract_island_species() goes phylogeny extracting species influence extracted island community data. show two examples tree order endemic non-endemic species reversed affects extraction, extraction starts species labelled “Plant_a”.  reverse order endemic non-endemic clades within tree, extraction changes force_nonendemic_singleton = TRUE, even though ancestral state reconstruction exactly .  known unwanted issue developers DAISIEprep working fix . now recommend plot phylogeny tip node states check non-endemic island species need separate colonisations (.e. force_nonendemic_singleton = TRUE), please cautious influence extraction order. second issue extraction order applicable extraction_method = TRUE force_nonendemic_singleton = TRUE, using min extraction algorithm force_nonendemic_singleton = FALSE (default behaviour) issue order extraction.","code":"endemicity_status <- c(\"endemic\", \"endemic\", \"endemic\",                         \"endemic\", \"endemic\", \"not_present\",                        \"nonendemic\", \"nonendemic\", \"nonendemic\",                        \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"mk\", rate_model = \"ER\", tie_preference = \"mainland\") plot_phylod(phylod = phylod) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\",    force_nonendemic_singleton = TRUE ) #> Warning in rm_nonendemic_in_clade(phylod = phylod, island_tbl = island_tbl): Non-endemic species may be grouped within an endemic clade. #> force_nonendemic_singleton cannot remove non-endemic species from endemic clades in these cases. island_tbl #> Class:  Island_tbl  #>   clade_name  status missing_species col_time col_max_age branching_times #> 1    Plant_a endemic               0 1.721423       FALSE    0.764855.... #>   min_age      species clade_type #> 1      NA Plant_a,....          1 newick <- \"(Plant_e:0.9,((Plant_a:0.3,Plant_b:0.3):0.3,(Plant_c:0.3,Plant_d:0.3):0.3):0.3);\" phylo <- ape::read.tree(text = newick) phylo <- phylobase::phylo4(phylo) endemicity_status <- c(\"not_present\", \"endemic\", \"endemic\", \"nonendemic\",                         \"nonendemic\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"mk\", rate_model = \"ER\", tie_preference = \"mainland\") plot_phylod(phylod = phylod) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\",    force_nonendemic_singleton = TRUE ) #> Warning in extract_species_asr(phylod = phylod, species_label = as.character(phylod@label[i]), : Root of the phylogeny is on the island so the colonisation #>               time from the stem age cannot be collected, colonisation time #>               will be set to infinite. #> Warning in rm_nonendemic_in_clade(phylod = phylod, island_tbl = island_tbl): Non-endemic species may be grouped within an endemic clade. #> force_nonendemic_singleton cannot remove non-endemic species from endemic clades in these cases. island_tbl #> Class:  Island_tbl  #>   clade_name  status missing_species col_time col_max_age branching_times #> 1    Plant_a endemic               0      Inf       FALSE    0.6, 0.3.... #>   min_age      species clade_type #> 1      NA Plant_a,....          1 endemicity_status <- c(\"not_present\", \"nonendemic\", \"nonendemic\", \"endemic\",                         \"endemic\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"mk\", rate_model = \"ER\", tie_preference = \"mainland\") plot_phylod(phylod = phylod) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\",    force_nonendemic_singleton = TRUE ) #> Warning in extract_species_asr(phylod = phylod, species_label = as.character(phylod@label[i]), : Root of the phylogeny is on the island so the colonisation #>               time from the stem age cannot be collected, colonisation time #>               will be set to infinite. #> Warning in rm_nonendemic_in_clade(phylod = phylod, island_tbl = island_tbl): Non-endemic species may be grouped within an endemic clade. #> force_nonendemic_singleton cannot remove non-endemic species from endemic clades in these cases. island_tbl #> Class:  Island_tbl  #>   clade_name     status missing_species col_time col_max_age branching_times #> 1    Plant_a nonendemic               0      0.3       FALSE              NA #> 2    Plant_b nonendemic               0      0.3       FALSE              NA #> 3    Plant_c    endemic               0      Inf       FALSE             0.3 #>   min_age      species clade_type #> 1      NA      Plant_a          1 #> 2      NA      Plant_b          1 #> 3      NA Plant_c,....          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Forcing_nonendemic_singleton.html","id":"second-solution-assigning-daisie-endemics","dir":"Articles","previous_headings":"","what":"Second solution: assigning “DAISIE endemics”","title":"Forcing non-endemic singletons: solutions and limitations","text":"cases one species endemic island radiation colonised mainland may want reclassify non-endemic island species (.e. island mainland) island endemic. term “DAISIE endemics” true island endemics, perspective DAISIE framework result speciation island later expanded range mainland. scoring non-endemic species non-endemic can lead complex biogeographical reconstructions may end breaking endemic island radiation multiple lineages (.e. multiple island colonisations); also may lead underestimation speciation rates island DAISIE model fitted data. classifying species “DAISIE endemics” can avoid problems.  assinging species likely endemic recolonising mainland expanding range another region endemic resolves issues incorrectly breaking apart island radiations using min extraction method, creating overly complex reconstructions using add_asr_node_states() asr extraction method (although latter asr approach less vulnerable erroneous reconstructions many back-colonisation scenarios). example phylogeny “Plant_e” species now reclassified endemic (“DAISIE endemic”) purposes reconstruction extraction judged empiricist result speciation island, thus perspective evolutionary processes island endemic.  two cases shown using asr extraction resulted island community data, using larger, complex phylogenetic biogeographic data (e.g. birds Madagascar) using “DAISIE endemics” approach can help simplify data processing.","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"Plant_a\", \"Plant_b\", \"Plant_c\", \"Plant_d\", \"Plant_e\",                      \"Plant_f\", \"Plant_g\", \"Plant_h\", \"Plant_i\", \"Plant_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- c(\"endemic\", \"endemic\", \"endemic\",                         \"endemic\", \"nonendemic\", \"endemic\",                        \"not_present\", \"not_present\", \"not_present\",                        \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"mk\", rate_model = \"ER\", tie_preference = \"mainland\") plot_phylod(phylod = phylod) endemicity_status <- c(\"endemic\", \"endemic\", \"endemic\",                         \"endemic\", \"endemic\", \"endemic\",                        \"not_present\", \"not_present\", \"not_present\",                        \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"mk\", rate_model = \"ER\", tie_preference = \"mainland\") plot_phylod(phylod = phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Forcing_nonendemic_singleton.html","id":"limitations","dir":"Articles","previous_headings":"Second solution: assigning “DAISIE endemics”","what":"Limitations","title":"Forcing non-endemic singletons: solutions and limitations","text":"approach valid know island system well sure non-endemic species within island radiation likely result island speciation. augmenting endemicity status island species way outlined introduce biological inaccuracies done care. case issue non-endemics believe true non-endemmic island species, embedded within island radiation island endemic species, issue outlined start vignette remains neither reclassifying using force_nonendemic_singleton = TRUE resolve issue.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Forcing_nonendemic_singleton.html","id":"solution-are-not-mutually-exclusive","dir":"Articles","previous_headings":"","what":"Solution are not mutually exclusive","title":"Forcing non-endemic singletons: solutions and limitations","text":"two solutions covered article can used jointly. example endemic radiation single non-endemic group closely related non-endemic species different part phylogeny endemicity status can updated force_nonendemic_singleton = TRUE calling extract_island_species(). example:  example island community data extracted two endemic clades (default extract_island_species() force_nonendemic_singleton = FALSE). set non-endemic species island radiation endemic using “DAISIE endemic” reasoning stated , manually setting force_nonendemic_singleton = TRUE can acheive, particular scenarios, better extraction.","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"Plant_a\", \"Plant_b\", \"Plant_c\", \"Plant_d\", \"Plant_e\",                      \"Plant_f\", \"Plant_g\", \"Plant_h\", \"Plant_i\", \"Plant_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- c(\"not_present\", \"nonendemic\", \"endemic\",                         \"endemic\", \"endemic\", \"not_present\",                        \"not_present\", \"nonendemic\", \"nonendemic\",                        \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"mk\", rate_model = \"ER\", tie_preference = \"mainland\") plot_phylod(phylod = phylod) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\" ) island_tbl #> Class:  Island_tbl  #>   clade_name  status missing_species  col_time col_max_age branching_times #> 1    Plant_b endemic               0 0.7648553       FALSE    0.061465.... #> 2    Plant_h endemic               0 0.7648553       FALSE    0.049605.... #>   min_age      species clade_type #> 1      NA Plant_d,....          1 #> 2      NA Plant_h,....          1 endemicity_status <- c(\"not_present\", \"endemic\", \"endemic\",                         \"endemic\", \"endemic\", \"not_present\",                        \"not_present\", \"nonendemic\", \"nonendemic\",                        \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"mk\", rate_model = \"ER\", tie_preference = \"mainland\") plot_phylod(phylod = phylod) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\",   force_nonendemic_singleton = TRUE ) #> Warning in rm_nonendemic_in_clade(phylod = phylod, island_tbl = island_tbl): Non-endemic species may be grouped within an endemic clade. #> force_nonendemic_singleton cannot remove non-endemic species from endemic clades in these cases. island_tbl #> Class:  Island_tbl  #>   clade_name     status missing_species   col_time col_max_age branching_times #> 1    Plant_b    endemic               0 0.58496106       FALSE    0.061465.... #> 2    Plant_h nonendemic               0 0.04960523       FALSE              NA #> 3    Plant_i nonendemic               0 0.04960523       FALSE              NA #>   min_age      species clade_type #> 1      NA Plant_d,....          1 #> 2      NA      Plant_h          1 #> 3      NA      Plant_i          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Forcing_nonendemic_singleton.html","id":"daisieprep-development","dir":"Articles","previous_headings":"","what":"DAISIEprep development","title":"Forcing non-endemic singletons: solutions and limitations","text":"DAISIEprep team actively working issues outlined vignette hope make improvements next months. Please keep eye new versions DAISIEprep package released case improvements become available.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Multi_tip_extraction.html","id":"scenario-species-dependent-endemicity-encoding","dir":"Articles","previous_headings":"","what":"Scenario: species-dependent endemicity encoding","title":"Extracting species with multiple tips in the phylogeny","text":"scenario plant phylogeny 9 species, species “Plant_d” two samples/tips tree. samples differentiated suffix labels: “_a” “_b”. “Plant_d” tips labelled “nonendemic”, encoding independent samples tip collected (species-dependent labelling), .e. unknown non-endemic species sampled island mainland, twice island, twice mainland. species-dependent encoding assume tips island use stem age species island colonisation time within species divergence minimum colonisation time using \"min\" extraction method. one island species phylogeny, “Plant_i”, endemic. can now extract island community data using \"min\" algorithm: can see extraction successful extracted 2 island colonisations. endemic “Plant_i” extracted per usual focus . “Plant_d” species correctly extracted single non-endemic species colonisation time (col_time), minimum age colonisation (min_age) taken branching time two non-endemic tips island. logic parsimonious assume species colonised island diverged island, therefore divergence colonisation, providing minimum bound colonisation time. branching times (branching_times NA) species-level speciation events island, divergence level species.","code":"set.seed(1) tree <- ape::rcoal(10) tree$tip.label <- paste(\"Plant\", letters[1:10], sep = \"_\") tree$tip.label[4] <- \"Plant_d_a\" tree$tip.label[5] <- \"Plant_d_b\" phylo <- phylobase::phylo4(tree) endemicity_status <- c(\"not_present\", \"not_present\", \"not_present\", \"nonendemic\",                         \"nonendemic\", \"not_present\", \"not_present\",                         \"not_present\", \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) plot_phylod(phylod) island_tbl <- extract_island_species(phylod = phylod, extraction_method = \"min\") island_tbl #> Class:  Island_tbl  #>   clade_name     status missing_species   col_time col_max_age branching_times #> 1    Plant_d nonendemic               0 0.06146596        TRUE              NA #> 2    Plant_i    endemic               0 0.04960523       FALSE              NA #>      min_age      species clade_type #> 1 0.05480904 Plant_d_....          1 #> 2         NA      Plant_i          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Multi_tip_extraction.html","id":"scenario-geography-dependent-endemicity-encoding","dir":"Articles","previous_headings":"","what":"Scenario: geography-dependent endemicity encoding","title":"Extracting species with multiple tips in the phylogeny","text":"scenario use phylogenetic data, use different labelling scheme. time use term geography-dependent labelling. tips phylogeny multi-tip species labelled according sample collected. sample non-endemic species sampled island labelled \"nonendemic\", another sample species mainland labelled \"not_present\". difference data first scenario “Plant_d_b” sampled mainland now encoded present island (\"not_present\"). extract island community data see 2 colonisations inferred, time min_age extracted subspecies divergences island.","code":"endemicity_status <- c(\"not_present\", \"not_present\", \"not_present\",                         \"nonendemic\", \"not_present\", \"not_present\",                        \"not_present\", \"not_present\", \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) plot_phylod(phylod) island_tbl <- extract_island_species(phylod = phylod, extraction_method = \"min\") island_tbl #> Class:  Island_tbl  #>   clade_name     status missing_species   col_time col_max_age branching_times #> 1  Plant_d_a nonendemic               0 0.05480904       FALSE              NA #> 2    Plant_i    endemic               0 0.04960523       FALSE              NA #>   min_age   species clade_type #> 1      NA Plant_d_a          1 #> 2      NA   Plant_i          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Multi_tip_extraction.html","id":"scenario-species-dependent-endemicity-encoding-endemics","dir":"Articles","previous_headings":"","what":"Scenario: species-dependent endemicity encoding (endemics)","title":"Extracting species with multiple tips in the phylogeny","text":"Revisiting first scenario multiple tips phylogeny species, labelled non-endemic, independent species sample came , time species endemic island rather non-endemic.  extraction procedure, using \"min\" algorithm, produces two endemic colonists. multi-tip species extracted colonisation time taken stem age species minimum time colonisation taken within-species divergence (branching) time. extraction also works samples/tips per species. increase number tips “Plant_d” species 4.  minimum age colonisation case crown age 4 samples species, species samples stored $species column.","code":"endemicity_status <- c(\"not_present\", \"not_present\", \"not_present\", \"endemic\",                         \"endemic\", \"not_present\", \"not_present\",                         \"not_present\", \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) plot_phylod(phylod) island_tbl <- extract_island_species(phylod = phylod, extraction_method = \"min\") island_tbl #> Class:  Island_tbl  #>   clade_name  status missing_species   col_time col_max_age branching_times #> 1    Plant_d endemic               0 0.06146596        TRUE              NA #> 2    Plant_i endemic               0 0.04960523       FALSE              NA #>      min_age      species clade_type #> 1 0.05480904 Plant_d_....          1 #> 2         NA      Plant_i          1 phylobase::tipLabels(phylo) <- c(\"Plant_a\", \"Plant_d_a\", \"Plant_d_b\",                                  \"Plant_d_c\", \"Plant_d_d\", \"Plant_b\", \"Plant_c\",                                  \"Plant_e\", \"Plant_f\", \"Plant_g\") endemicity_status <- c(\"not_present\", \"endemic\", \"endemic\", \"endemic\",                         \"endemic\", \"not_present\", \"not_present\",                         \"not_present\", \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) plot_phylod(phylod) island_tbl <- extract_island_species(phylod = phylod, extraction_method = \"min\") island_tbl #> Class:  Island_tbl  #>   clade_name  status missing_species   col_time col_max_age branching_times #> 1    Plant_d endemic               0 0.09053720        TRUE              NA #> 2    Plant_f endemic               0 0.04960523       FALSE              NA #>      min_age      species clade_type #> 1 0.06146596 Plant_d_....          1 #> 2         NA      Plant_f          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Multi_tip_extraction.html","id":"scenario-geography-dependent-endemicity-encoding-multiple-island-samples","dir":"Articles","previous_headings":"","what":"Scenario: geography-dependent endemicity encoding (multiple island samples)","title":"Extracting species with multiple tips in the phylogeny","text":"Lastly, look endemicity encoding island samples labelled endemic non-endemic, mainland samples labelled island (even non-endemic island species, geography-dependent labelling). time multiple samples island monophyletic. scenario look simple case single island species (“Plant_g”) tree, 3 samples, 2 island (“Plant_g_island_a” “Plant_g_island_b”) 1 mainland (“Plant_g_mainland”).  extracted island colonist colonisation time stem age island samples minimum colonisation time divergence island samples.","code":"phylobase::tipLabels(phylo) <- c(\"Plant_a\", \"Plant_b\", \"Plant_c\", \"Plant_d\",                                  \"Plant_e\", \"Plant_f\", \"Plant_g_mainland\",                                  \"Plant_g_island_b\", \"Plant_g_island_a\",                                   \"Plant_h\") endemicity_status <- c(\"not_present\", \"not_present\", \"not_present\",                         \"not_present\", \"not_present\", \"not_present\",                         \"not_present\", \"nonendemic\", \"nonendemic\",                         \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) plot_phylod(phylod) island_tbl <- extract_island_species(phylod = phylod, extraction_method = \"min\") island_tbl #> Class:  Island_tbl  #>   clade_name     status missing_species  col_time col_max_age branching_times #> 1    Plant_g nonendemic               0 0.3800341        TRUE              NA #>      min_age      species clade_type #> 1 0.04960523 Plant_g_....          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Performance.html","id":"performance-analysis-of-daisieprepextract_island_species","dir":"Articles","previous_headings":"","what":"Performance analysis of DAISIEprep::extract_island_species()","title":"Performance","text":"article test analyse performance, terms time consumption/complexity main function DAISIEprep R package: extract_island_species(). function takes phylogenetic tree species endemicity data form phylo4d object (S4 class R package phylobase). thorough examination possible uses extract_island_species() function, rather gives indication usability function data sets different sizes, well detecting features data may slow process extracting formatting island community data. work performance analysis carried benchmark() function DAISIEprep package. calling function explain benchmarking set . first argument benchmark() phylod. NULL function simulate phylogenies endemicity data given : tree_size_range, num_points, prob_on_island, prob_endemic arguments. specify lower upper range tree size simulate (sequence breaks can linear log space depending argument log_scale), number breaks sequence lower upper tree sizes, probability species island, species island whether endemic (1 - prob_endemic probability species island non-endemic). phylo4d object supplied phylod argument benchmark() tree used perform benchmarking. case simulating data parameter space performance analysis combination variables (using expand.grid() function). phylogeny simulated fixed size using rphylo() function ape package. stochastically simulating endemicity statuses species tree may outgroup species island order correctly extract colonisation times stem age species clade island. Therefore, add outgroup ensure present island. want test performance extract_island_species() function using asr algorithm need first run ancestral state reconstruction. can easily achieved phylod data phylogeny endemicity statuses tip tree ready (see tutorial vignette information asr algorithm). quantify time elapsed function runs several methods base R various R packages (e.g. microbenchmark rbenchmark). However use system.time() base R (see https://radfordneal.wordpress.com/2014/02/02/inaccurate-results--microbenchmark/) reasoning). Side note: default DAISIEprep::benchmark() conditions simulated data set non-empty island, thus function tested trivial case species need extracted. Due computational time deterministic ensure results spurious replicate timing three times mean “real time elapsed” calculated, well replicating simulation (given argument replicates) account stochasticity simulation data. range tree sizes use encompasses common empirical phylogenies (10 tips 10,000 tips). generate random sample tip states species, possible states : endemic island, non-endemic present island. tested low probability species tree island (P(0.2)P(0.2)) high probability species island (P(0.5)P(0.5)). scenarios tested low (PE(0.2)P_E(0.2), PNE(0.8)P_{NE}(0.8)) high probability (PE(0.8)P_E(0.8), PNE(0.2)P_{NE}(0.2)) island species endemic test whether affects performance. scenario ran ten replicates. isolated islands cladogenesis high, island species likely spread across uniformly across phylogeny assumed simulations, instead clustered. check scenarios number species per colonisation events high (.e.  radiations island) used mammals Madagascar data set. used (Upham et al. 2019) complete DNA-phylogenies, island endemicity data Madagascar (Michielsen et al. 2023). results presented vignette computed time vignette rendered due large computation time required. Instead, analyses run cluster computer saved package. analysis script run produce results can found DAISIEprepExtra package . performance analysis uses benchmark() function DAISIEprep package. output produces results DNA-phylogeny complete phylogeny. raw data parameter estimates different parameter settings tidied tibble containing data need DNA complete phylogeny. can plot time consumption simulated empirical (DNA-complete phylogeny) data set group results probability species island (prob_on_island). Now results can plotted plot_performance implemented DAISIEprep. function follows tidyverse convention giving variable names variables (opposed strings) uses tidy evaluation group variable given, either prob_on_island prob_endemic. First min algorithm:  secondly asr algorithm:  Alternatively, data can grouped probability species island endemic (prob_endemic) min (first) asr (second) algorithms:   find even large trees (10,000 tips) scale extraction less seconds, whereas running DAISIE inference model scale minutes days, thus pre-processing present bottleneck pipeline. empirical trees ran (Madagascar mammal example) quicker process trees simulated uniformly random island presence (figure 1). suggests ratio species colonisation events island higher faster extract. However, even large trees many colonisations extraction pose computational problem. speed extraction facilitates extraction island data across many phylogenies, example extracting island community data across posterior distribution inferred phylogenetic trees account uncertainty branching times tree topology. Given approximately linear relationship size phylogeny time required extraction log-log plots fit power law mean run time (mean across replicates). growth time min asr algorithms follows power function (y=axky=ax^k) exponents k=k = 1.3998949 k=k = 1.3008005, respectively, fitted mean run time tree size. Therefore time complexity scales relatively well tree size, thus unless needing applied extremely large phylogenies (>10,000 tips) DAISIEprep extraction functionality applicable.","code":"# Internal function - Not to be called for regular 'DAISIEprep' operation, # but merely to load in data performance_data <- DAISIEprep:::read_performance() plot_performance(   performance_data = performance_data$performance_data_min,   group_by = prob_on_island ) #> Warning: `position_dodge()` requires non-overlapping x intervals. #> `position_dodge()` requires non-overlapping x intervals. plot_performance(   performance_data = performance_data$performance_data_asr,   group_by = prob_on_island ) #> Warning: `position_dodge()` requires non-overlapping x intervals. #> `position_dodge()` requires non-overlapping x intervals. plot_performance(   performance_data = performance_data$performance_data_min,   group_by = prob_endemic ) #> Warning: `position_dodge()` requires non-overlapping x intervals. #> `position_dodge()` requires non-overlapping x intervals. plot_performance(   performance_data = performance_data$performance_data_min,   group_by = prob_endemic ) #> Warning: `position_dodge()` requires non-overlapping x intervals. #> `position_dodge()` requires non-overlapping x intervals. grouped_performance_data <- dplyr::group_by(   performance_data$performance_data_min,   tree_size,   \"prob_on_island\" )  mean_performance_data <- dplyr::summarise(   grouped_performance_data,   mean = mean(median_time),   .groups = \"drop\" )  fit_min <- lm(log(mean_performance_data$mean) ~ log(mean_performance_data$tree_size)) fit_min$coefficients #>                          (Intercept) log(mean_performance_data$tree_size)  #>                           -28.297771                             1.399895  grouped_performance_data <- dplyr::group_by(   performance_data$performance_data_asr,   tree_size,   \"prob_on_island\" )  mean_performance_data <- dplyr::summarise(   grouped_performance_data,   mean = mean(median_time),   .groups = \"drop\" )  fit_asr <- lm(log(mean_performance_data$mean) ~ log(mean_performance_data$tree_size)) fit_asr$coefficients #>                          (Intercept) log(mean_performance_data$tree_size)  #>                             -28.0177                               1.3008"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Sensitivity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sensitivity","text":"vignette provide set best practices sensitivity analyses taken consideration conducting data formatting model fitting DAISIE DAISIEprep framework. Sensitivty analyses testing model output variations model input. model considered sensitive model output vastly changes due relatively small perturbations data input model. small perturbations may due uncertainty data (.e. posterior distribution possible branching times phylogeny), measurement error, factors. case interested , perturbations variation island colonisation branching times, endemicity status island number colonisations events. can change using multiple phylogenies posterior distribution inferred phylogenies, using different extraction algorithms DAISIEprep. Firstly discuss thetype variations data can impact parameter estimation. Another aspect sensitivity analysis, explore vignette, sensitivity model selection input data variation. mean best-fit model ranking model (likelihood, AIC, BIC, metric) may change given differences data. can equally important sensitivity parameter estimates recommend users check model selection well parameter estimates work.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Sensitivity.html","id":"sensitivity-to-extraction-method","dir":"Articles","previous_headings":"","what":"Sensitivity to extraction method","title":"Sensitivity","text":"DAISIEprep R package provides tools extract phylogenetic community data phylogenetic trees endemicity status species assigned tip phylogeny. However, single correct method extracting data thus DAISIEprep implements several algorithms account variations considered appropriate assumptions island system interest. two major divisions extracting data extraction_method argument extract_island_species() (extension extract_multi_island_species()), can either \"min\" minimum time colonisation algorithm, \"asr\" geographical ancestral state reconstruction algorithm. \"min\" algorithm conforms assumptions DAISIE inference model (implemented DAISIE R package). assumptions : Non-endemic species part island clade back-colonisation island away mainland island species present island nested endemic island clade points linked, allowing back-colonisation, species islands endemic island (.e. part endemic island radiation) migrate expand range away island. three points mean island system interest experienced back-colonisation species endemic island radiation expanded range island island population gone extinct (making present island extant) \"min\" algorithm split clades multiple colonisations. case island interest remote species colonisation diversify disperse island, algorithm provides simple model extract data. However, clear common assumptions DAISIE model thus \"min\" algorithm violated empirical data. Therefore second algorithm, \"asr\", implemented remedy . \"asr\" algorithm uses reconstructed states node phylogeny inferring whether species present island, non-endemic island, endemic island. Using information algorithm can traverse phylogeny back node island clade colonised island. algorithm overcomes limitations \"min\" algorithm allowing non-endemic species part island clades (extracting endemic clades purposes applying DAISIE inference model), additionally allowing species present island included data embedded within endemic island clade (feature turned /include_not_present argument extract_island_species()). Therefore, \"asr\" algorithm benefits focal island system experienced species movement island regions. However, without limitations, ancestral state reconstruction models interpreted caution uncertainty species geographic range deep past, near root tree often high leading variability interpretation whether species present island time. formulation ancestral state reconstruction model also important, transition matrix states crucial plausible results. default use symmetrical transition structure species go present island, non-endemic endemic. Without jumps present endemic vice versa. line reasoning DAISIE model species colonise island migrate entire mainland population, instead going widespread range, becoming endemic via cladogenesis anagenesis island, extinction mainland population. vignette demonstrate sensitivity parameters estimated DAISIE maximum likelihood inference model changes algorithm used extract data. apply \"min\" \"asr\" algorithms, within \"asr\" apply two different models ancestral state reconstruction: parsimony continuous-time Markov model (Mk model). Traditionally, two common methods reconstructing ancestral states, methods reconstruct ancestral ranges see Extending_asr vignette DAISIEprep package. data use example macro-phylogeny mammals(Upham et al. 2019) island endemicity data Madagascar (Michielsen et al. 2023). mammal phylogeny global phylogeny containing mammal species Madagascar checklist --date catelog Madagascars mammal fauna. phylogeny constructed genetic sequences create DNA-phylogeny. Species known genetic data unavailable inserted tree using polytomy resolving technique produces complete phylogeny. test sensitivity estimates DNA-complete phylogenies. results presented vignette computing time vignette rendered due large computation time required. Instead, analyses run cluster computer saved package. analysis script run produce results can found DAISIEprepExtra package . sensitivity analysis uses sensitivity() function DAISIEprep package. sensitivity() function creates table possible combination data extraction settings, given input arguments, forms parameter space sensitivity analysis. phylogenetic trees island endemicity data provided carry extraction formatting. DAISIEprep uses phylo4d class phylobase R package. However, sensitivity() function phylo object can provided house-keeping taken care inside function. sensitivity() function loops parameter setting extracts formats data fit DAISIE maximum likelihood inference model (DAISIE::DAISIE_ML_CS()) data. output produces results DNA-phylogeny complete phylogeny. raw data parameter estimates different parameter settings tidied tibble containing data need DNA complete phylogeny. can plot distribution parameter estimates DNA complete data sets.   parameters relatively unsensitivite different phylogenies across posterior distribution possible trees. noticable outlier colonisation rate, choice extraction algorithm heavily influences inferred rate island colonisation. \"min\" algorithm shows highest rate colonisation, likely due breaking island clades may undergone back-colonisation. smallest estimated colonisation rate comes \"asr\" algorithm using parsimony reconstruct geographical states phylogeny. can explained parsimony favouring fewest number state changes (.e. range shifts mainland island), translates fewer colonisation events likely lumping clades together may independently colonised island. alternative plot look pairwise comparisons estimated rate DAISIE inference model across posterior phylogeny.   general pattern density plots shown . rates cladogenesis, anagenesis extinction largely clusters little clear separation estimates extraction method. exception colonisation rate shows visible clustering rate estimates based extraction method chosen. demonstrated variability, lack , parameter estimates phylogenetic data island community changing data well choice extraction algorithm.","code":"library(DAISIEprep) sensitivity_data <- DAISIEprep:::read_sensitivity() DAISIEprep:::plot_sensitivity(   sensitivity_data = sensitivity_data$sensitivity_dna ) DAISIEprep:::plot_sensitivity(   sensitivity_data = sensitivity_data$sensitivity_complete ) DAISIEprep:::plot_sensitivity(   sensitivity_data = sensitivity_data$sensitivity_dna,   pairwise_diffs = TRUE ) DAISIEprep:::plot_sensitivity(   sensitivity_data = sensitivity_data$sensitivity_complete,   pairwise_diffs = TRUE )"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"the-tutorial-is-divided-into-3-sections","dir":"Articles","previous_headings":"","what":"The tutorial is divided into 3 sections:","title":"DAISIEprep Tutorial","text":"Single phylogeny example - Learn extract format island data running DAISIE based single phylogenetic tree. Multiple phylogenies example - Learn extract format island data running DAISIE based cases multiple phylogenetic trees (e.g. different phylogenies different literature sources including different island lineages). Adding missing species - add missing species, lineages, etc, DAISIE data list. Load required packages:","code":"library(DAISIEprep) library(ape) library(phylobase) library(ggtree) library(ggimage) library(castor)"},{"path":[]},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"load-the-phylogeny","dir":"Articles","previous_headings":"1. Single Phylogeny Example","what":"Load the phylogeny","title":"DAISIEprep Tutorial","text":"First load example phylogeny (file included DAISIEprep R package, use complicated code: trees normally use something like read.tree(), read.nexus(), load() specifying path tree file R phylo object). Object plant_phylo just loaded “typical” phylogeny class ‘phylo’. Let’s plot phylogeny order visualise . can see, different species plants.  Important: DAISIEprep requires tip labels (taxon names) phylogeny formatted genus name species name separated underscore (e.g. “Canis_lupus” “Plant_a”). can also optionally tags appended species name (separated underscore, e.g. “Canis_lupus_123”; “Plant_a_123”; “Canis_lupus_familiaris_123”), common multiple tips phylogeny single species, e.g. multiple populations multiple subspecies sampled. Samples Genus_species name tip label considered species, even subsequent sampling subspecies tags. example turned option underscore = TRUE plotting function, can see underscore words tip names. case, “Plant” can viewed genus epithet binomial name, letters underscore species epithet (instance “Genus_speciesA” case “Plant_a”). Currently DAISIEprep deal well island species monophyletic, know make decision many colonisation events infer. needs expert input user (e.g. may consider tips incorrectly placed, perhaps species really polyphyletic). recommend make decisions cases running package.","code":"data(\"plant_phylo\") class(plant_phylo) #> [1] \"phylo\" plot(plant_phylo, underscore = TRUE)"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"convert-the-phylogeny-to-phylo4","dir":"Articles","previous_headings":"1. Single Phylogeny Example","what":"Convert the phylogeny to phylo4","title":"DAISIEprep Tutorial","text":"next step convert phylogeny phylo4 class, defined package phylobase. allows users easily work data tip phylogeny, example whether endemic island .  Now phylogeny phylo4 format can easily append data.","code":"plant_phylo <- phylobase::phylo4(plant_phylo) phylobase::plot(plant_phylo)"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"add-endemicity-statuses","dir":"Articles","previous_headings":"1. Single Phylogeny Example","what":"Add endemicity statuses","title":"DAISIEprep Tutorial","text":"now need add phylogeny information species present island endemicity statuses . Species occur island can either “endemic” (occur island), “nonendemic” (occur island also another landmass). example plant phylogeny running , two plant species phylogeny occur island. One , “Plant_i”, endemic island. , “Plant_g”, nonendemic species. Let’s create data frame linking island species endemicity status. (data, can create table separate editor load R data.frame). recommend using true endemicity status (“endemic” “nonendemic”) cases. However, exception: cases one species endemic island radiation colonised mainland. species embedded island radiation, evolved island, later expanded range mainland. Technically species nonendemic found island mainland. However, perspective DAISIE model, recommend scoring species endemic. scoring nonendemic may lead complex biogeographical reconstruction may end breaking endemic island radiation multiple lineages; also may lead underestimation speciation rates island. classifying species endemic can avoid problems. island_species data frame produced specifies island endemicity status species found island. can generate rest endemicity statuses species phylogeny present island using create_endemicity_status(). species assigned “not_present”. Next, can add endemicity data phylogenetic tree using features phylo4d class, phylobase package. call designed phylogenetic trait data stored together. endemicity status needs data frame format order work correctly. can now visualise phylogeny island endemicity statuses plotted tips. uses ggtree ggplot2 packages.","code":"island_species <- data.frame(   tip_labels = c(\"Plant_i\", \"Plant_g\"),   tip_endemicity_status = c(\"endemic\", \"nonendemic\") ) island_species #>   tip_labels tip_endemicity_status #> 1    Plant_i               endemic #> 2    Plant_g            nonendemic endemicity_status <- create_endemicity_status(   phylo = plant_phylo,   island_species = island_species ) phylod <- phylobase::phylo4d(plant_phylo, endemicity_status) plot_phylod(phylod = phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"create-island_tbl-object","dir":"Articles","previous_headings":"1. Single Phylogeny Example","what":"Create island_tbl object","title":"DAISIEprep Tutorial","text":"Now know tips phylogeny present island, can extract colonisation branching times, form island community data set can used DAISIE R package fit likelihood models island colonisation diversification. extract species, first create object store island colonists’ information. uses island_tbl class introduced package (DAISIEprep). island_tbl object can easily converted DAISIE data list using function create_daisie_data (information ). can see object containing empty data frame. order fill data frame information island colonisation diversification events can run steps .","code":"island_tbl <- island_tbl() island_tbl #> Class:  Island_tbl  #> [1] clade_name      status          missing_species col_time        #> [5] col_max_age     branching_times min_age         species         #> [9] clade_type      #> <0 rows> (or 0-length row.names)"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"extract-data-with-the-daisieprep-min-algorithm","dir":"Articles","previous_headings":"1. Single Phylogeny Example","what":"Extract data with the DAISIEprep “min” algorithm","title":"DAISIEprep Tutorial","text":"function extract_island_species() main function DAISIEprep extract data phylogeny. example , use “min” extraction algorithm. “min” algorithm extracts island community data assumptions DAISIE model (.e. back-colonisation island mainland). row island_tbl corresponds separate colonisation island. case, two colonist lineages identified using ‘min’ extraction algorithm, one endemic another nonendemic.","code":"island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"min\" ) island_tbl #> Class:  Island_tbl  #>   clade_name     status missing_species   col_time col_max_age branching_times #> 1    Plant_g nonendemic               0 0.38003405       FALSE              NA #> 2    Plant_i    endemic               0 0.04960523       FALSE              NA #>   min_age species clade_type #> 1      NA Plant_g          1 #> 2      NA Plant_i          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"extract-data-with-the-daisieprep-asr-algorithm","dir":"Articles","previous_headings":"1. Single Phylogeny Example","what":"Extract data with the DAISIEprep “asr” algorithm","title":"DAISIEprep Tutorial","text":"“min” algorithm sometimes good job, recommend using “asr” algorithm instead back-colonisation events present data (example, one species within large endemic island radiation colonised another island mainland). use “asr” algorithm extract likely colonisations inferred ancestral state reconstruction, need first estimate probability ancestors island species present island, order determine time colonisation. , can fit one many ancestral state reconstruction methods (see “Extending_asr” tutorial). use maximum parsimony simple method reconstructing ancestral species areas (.e. present island, present island). First, translate extant species endemicity status numeric representation whether species island, using following function: Now can plot phylogeny, time includes node labels presence/absence island ancestral nodes.   Sidenote: wondering probabilities node whether influence decision pick preference island mainland likelihoods state equal, can plot probabilities nodes visualise ancestral state reconstruction using plot_phylod(phylod = phylod, node_pies = TRUE).  Now can extract island colonisation diversification times phylogeny using reconstructed ancestral states island presence/absence. sure species scored “nonendemic” result separate colonisation events (e.g., scoring endemicity statuses classified nonendemic species embedded island radiation endemic), recommend setting force_nonendemic_singleton = TRUE. ensure non-endemic species extracted separate lineages (avoids groups closely related non-endemic species erroneously lumped island clade due reconstruction). can see, case using “asr” algorithm find single colonisation island, can seen fact island_tbl one row. two island species inferred result single colonisation island, non-island species within clade (“Plant_h”) inferred resulted back-colonisation island mainland.","code":"phylod <- add_asr_node_states(phylod = phylod, asr_method = \"parsimony\") plot_phylod(phylod = phylod) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\" ) island_tbl #> Class:  Island_tbl  #>   clade_name  status missing_species  col_time col_max_age branching_times #> 1    Plant_g endemic               0 0.7648553       FALSE    0.380034.... #>   min_age      species clade_type #> 1      NA Plant_g,....          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"format-data-to-prepare-if-for-daisie","dir":"Articles","previous_headings":"1. Single Phylogeny Example","what":"Format data to prepare if for DAISIE","title":"DAISIEprep Tutorial","text":"Now island_tbl can convert DAISIE data list used DAISIE inference model. convert DAISIE data list (.e. input data DAISIE inference model) use create_daisie_data(), providing island_tbl input. also need specify: age island archipelago. use island age one million years (island_age = 1). Whether colonisation times extracted phylogenetic data considered precise (precise_col_time = TRUE). discuss details , briefly setting TRUE tell DAISIE model colonisation times known. Setting precise_col_time = FALSE change tell DAISIE model colonisation time uncertain interpret upper limit time colonisation integrate uncertainty point either present time first branching point (either speciation divergence subspecies). number species mainland source pool. set 100 (num_mainland_species = 100). used calculate number species potentially colonised island . refer mainland pool, necessarily continent, different island source species immigrating island largely another nearby island (possible example Madagascar source species colonising Comoros). information used DAISIE model calculate colonisation rate island. show two elements DAISIE data list produced. first element data_list[[1]] every DAISIE data list island community metadata, containing island age number species mainland pool leave descendants island present day. important information DAISIE inference, possible mainland species colonised island went extinct leaving trace island presence. Next first element containing information island colonists (every element data_list[[x]] list metadata contains information individual island colonists). contains name colonist, number missing species, branching times, vector containing age island, colonisation time times cladogenesis events. Confusingly, may branching times vector contains branching times: two numbers vector island age followed colonisation time. stac, stands status colonist. number tells DAISIE model identify endemicity colonisation uncertainty island colonist (explained interested). Lastly, type1or2 defines macroevolutionary regime island colonist . macroevolutionary regime mean set rates colonisation, speciation extinction colonist. applications assume island clades regime thus assigned type 1. However, priori expectation one clade significantly different rest, e.g. Galápagos finches amongst terrestrial birds Galápagos archipelago clade can set type 2. data list now ready used DAISIE maximum likelihood inference model R package DAISIE. information DAISIE data structures application DAISIE models see vignette optimising parameters using DAISIE","code":"data_list <- create_daisie_data(   data = island_tbl,   island_age = 1,   num_mainland_species = 100,   precise_col_time = TRUE ) data_list[[1]] #> $island_age #> [1] 1 #>  #> $not_present #> [1] 99 data_list[[2]] #> $colonist_name #> [1] \"Plant_g\" #>  #> $branching_times #> [1] 1.0000000 0.7648553 0.3800341 #>  #> $stac #> [1] 2 #>  #> $missing_species #> [1] 0 #>  #> $type1or2 #> [1] 1"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"in-this-section-we-demonstrate-an-empirical-use-case-of-the-package-on-the-avifauna-of-the-galápagos-archipelago-which-uses-several-phylogenies-for-different-island-colonists-","dir":"Articles","previous_headings":"2. Multiple phylogenies example","what":"In this section we demonstrate an empirical use case of the package on the avifauna of the Galápagos archipelago, which uses several phylogenies for different island colonists.","title":"DAISIEprep Tutorial","text":"previous example used single phylogeny extracted colonisation branching events . However, case island species sampled different phylogenies (e.g. based different markers, coming different studies). look example terrestrial birds Galápagos archipelago. 8 time-calibrated phylogenies extract colonisation diversification date . First, phylogenies need loaded. phylogenies stored DAISIEprep package can use data() function, phylogenies alternatively loaded using read.nexus() R package ape. Currently phylogenies loaded S3 phylo objects, however, want convert S4 phylobase objects. Now phylogenies loaded can inspect . Let’s start phylogeny genus Coccyzus:  can now create table (data frame) Coccyzus species island island endemicity status. table can imported .csv spreadsheet prefer. species names tree (tips labels) can extracted using phylobase::tiplabels(coccyzus_tree). Make sure spelling matches exactly including whitespace underscores, case names. order specify endemicity status species phylogeny instead focus island species, can easily assign endemicity status rest species tree. Using island_species data frame produced , specifies island endemicity status species found island, can generate rest endemicity statuses species phylogeny present island using create_endemicity_status(). Now endemicity status Coccyzus species phylogeny, can combine phylogenetic data endemicity status data single data structure, phylo4d class phylobase R package, exactly way single phylogeny example. can visualize endemicity status species tree.   now ready extract relevant data phylogeny, produce island_tbl Coccyzus tree. step use “asr” method extract data requires inferring ancestral geography species. Plot phylogeny node states:   Extract data phylogeny: Instead assigning endemicity Galapagos bird phylogenies converting phylo4d objects (Coccyzus ), already done data objects prepared advance ready used. now data 8 phylogenies correct format, : dated phylogeny, tips written “Genus_species” “Genus_species_TAG” format island endemicity status specified tips. now ready extract island data trees using extract_island_species(), using “asr” algorithm. can now loop rest Galapagos phylogenies add island data. example works, returns warning message Darwin’s finches (finches_phylod), root state finches’ phylogeny inferred present island, single mainland outgroup example phylogeny. means colonisation time extracted asr infinite, island_tbl converted DAISIE data list become colonist colonised anywhere island origin present. example colonisation time problem, however, empirical analyses recommended many mainland outgroup species tree ensure ancestral state reconstructions can accurately detect stem age island clade.  Now island_tbl data colonisation, branching times, composition island colonist. can convert DAISIE data list applied DAISIE inference model. use island age Galápagos archipelago 4 million years, assume colonisation time extracted precise. Whether fact precise covered tutorial, using pipeline process different data may worth toggling precise_col_time FALSE check whether assuming uncertainty colonisation times influences conclusions. data_list produced now ready DAISIE analyses! See vignette optimising parameters using DAISIE","code":"data(coccyzus_tree, package = \"DAISIEprep\") data(columbiformes_tree, package = \"DAISIEprep\") data(finches_tree, package = \"DAISIEprep\") data(mimus_tree, package = \"DAISIEprep\") data(myiarchus_tree, package = \"DAISIEprep\") data(progne_tree, package = \"DAISIEprep\") data(pyrocephalus_tree, package = \"DAISIEprep\") data(setophaga_tree, package = \"DAISIEprep\") coccyzus_tree <- as(coccyzus_tree, \"phylo4\") columbiformes_tree <- as(columbiformes_tree, \"phylo4\") finches_tree <- as(finches_tree, \"phylo4\") mimus_tree <- as(mimus_tree, \"phylo4\") myiarchus_tree <- as(myiarchus_tree, \"phylo4\") progne_tree <- as(progne_tree, \"phylo4\") pyrocephalus_tree <- as(pyrocephalus_tree, \"phylo4\") setophaga_tree <- as(setophaga_tree, \"phylo4\") phylobase::plot(coccyzus_tree, cex = 0.1) island_species <- data.frame(   tip_labels = c(\"Coccyzus_melacoryphus_GALAPAGOS_L569A\",                  \"Coccyzus_melacoryphus_GALAPAGOS_L571A\"),   tip_endemicity_status = c(\"nonendemic\", \"nonendemic\") ) endemicity_status <- create_endemicity_status(   phylo = coccyzus_tree,   island_species = island_species ) phylod <- phylobase::phylo4d(coccyzus_tree, endemicity_status) plot_phylod(phylod = phylod) phylod <- add_asr_node_states(   phylod = phylod,   asr_method = \"parsimony\",   tie_preference = \"mainland\" ) plot_phylod(phylod = phylod) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\" ) island_tbl #> Class:  Island_tbl  #>              clade_name     status missing_species col_time col_max_age #> 1 Coccyzus_melacoryphus nonendemic               0 1.789425        TRUE #>   branching_times   min_age      species clade_type #> 1              NA 0.5483906 Coccyzus....          1 data(coccyzus_phylod, package = \"DAISIEprep\") data(columbiformes_phylod, package = \"DAISIEprep\") data(finches_phylod, package = \"DAISIEprep\") data(mimus_phylod, package = \"DAISIEprep\") data(myiarchus_phylod, package = \"DAISIEprep\") data(progne_phylod, package = \"DAISIEprep\") data(pyrocephalus_phylod, package = \"DAISIEprep\") data(setophaga_phylod, package = \"DAISIEprep\") island_tbl <- extract_island_species(   phylod = coccyzus_phylod,   extraction_method = \"asr\" ) galapagos_phylod <- list(   coccyzus_phylod, columbiformes_phylod, finches_phylod, mimus_phylod,   myiarchus_phylod, progne_phylod, pyrocephalus_phylod, setophaga_phylod )  for (phylod in galapagos_phylod) {   island_tbl <- extract_island_species(     phylod = phylod,     extraction_method = \"asr\",     island_tbl = island_tbl   ) } #> Warning in extract_species_asr(phylod = phylod, species_label = as.character(phylod@label[i]), : Root of the phylogeny is on the island so the colonisation #>               time from the stem age cannot be collected, colonisation time #>               will be set to infinite. plot_phylod(finches_phylod) island_tbl #> Class:  Island_tbl  #>                                 clade_name     status missing_species  col_time #> 1                    Coccyzus_melacoryphus nonendemic               0 1.7894251 #> 2 Zenaida_galapagoensis_GALAPAGOS_AF251531    endemic               0 3.1933725 #> 3                                    C_fus    endemic               0       Inf #> 4      Mimus_macdonaldi_GALAPAGOS_KF411075    endemic               0 4.4853284 #> 5                         M_magnirostris_1    endemic               0 0.8544740 #> 6           Progne_modesta_GALAPAGOS_L573A    endemic               0 3.0014710 #> 7      Pyrocephalus_dubius_Galapagos_cas01    endemic               0 9.3661766 #> 8             D_petechia_Galapagos_sancris    endemic               0 0.1400011 #>   col_max_age branching_times   min_age      species clade_type #> 1        TRUE              NA 0.5483906 Coccyzus....          1 #> 2       FALSE    0.050253....        NA Zenaida_....          1 #> 3       FALSE    1.322705....        NA C_fus, C....          1 #> 4       FALSE    3.680027....        NA Mimus_ma....          1 #> 5       FALSE    0.222988....        NA M_magnir....          1 #> 6       FALSE    0.387570....        NA Progne_m....          1 #> 7       FALSE    0.825248....        NA Pyroceph....          1 #> 8       FALSE    0.057946....        NA D_petech....          1 data_list <- create_daisie_data(   data = island_tbl,   island_age = 4,   num_mainland_species = 100,   precise_col_time = TRUE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"adding-missing-species","dir":"Articles","previous_headings":"","what":"3. Adding missing species","title":"DAISIEprep Tutorial","text":"often case phylogenetic data available island species even entire lineages present island community. can still include species DAISIE analyses. Furthermore, even cases dated phylogeny exist, may open-source available use extraction. latter cases, may possible know stem age crown age reported literature published phylogeny. section explains use tools DAISIEprep provides order handle missing data, generally handle species missing need input data manually. section, previous section, core data structure going work island_tbl. use island_tbl Galápagos birds produced last section.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"adding-missing-species-to-an-island-clade-that-has-been-sampled-in-the-phylogeny","dir":"Articles","previous_headings":"3. Adding missing species","what":"3.1 Adding missing species to an island clade that has been sampled in the phylogeny","title":"DAISIEprep Tutorial","text":"option cases clade sampled phylogeny, least 1 colonisation 1 branching time available, 1 species sampled. example, imagine 2 species Galápagos finch sampled, want add missing species Galápagos finch clade sampled phylogeny. finches clade name “C_fus” island_tbl (third row). assign 2 missing species clade use following code: argument species_to_add_to uses representative sampled species island clade work colonist island_tbl assign specified number missing species (num_missing_species) . case used species clade name, however, also sampled species clade, include: new missing species added island_tbl can repeat conversion steps using create_daisie_data() produce data accepted DAISIE model.","code":"island_tbl <- add_missing_species(   island_tbl = island_tbl,   # num_missing_species equals total species missing   num_missing_species = 2,   # name of a sampled species you want to \"add\" the missing to   # it can be any in the clade   species_to_add_to = \"C_fus\" ) island_tbl@island_tbl$species[[3]] #>  [1] \"C_fus\"  \"C_oliv\" \"P_cras\" \"G_diff\" \"C_pau\"  \"C_par\"  \"C_psi\"  \"C_hel\"  #>  [9] \"C_pal\"  \"G_sep\"  \"G_for\"  \"G_ful\"  \"G_con\"  \"G_mag\"  \"G_scan\""},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"adding-a-lineage-with-just-one-species-on-the-island-singleton-when-a-phylogeny-is-not-available-for-the-lineage-but-a-colonisation-time-estimate-exists","dir":"Articles","previous_headings":"3. Adding missing species","what":"3.2 Adding a lineage with just one species on the island (singleton) when a phylogeny is not available for the lineage, but a colonisation time estimate exists","title":"DAISIEprep Tutorial","text":"option adding singleton lineage (just one species island) phylogeny available conduct extraction using extract_island_species(), estimate stem age island colonist known literature. case, need input information lineage manually . illustrative purposes, use imaginary Galápagos bird lineage 1 species, data set, fabricate time colonisation. input needed : island_tbl add existing island_tbl clade_name name represent clade, can either specific species clade genus name, another name represent species status either “endemic” “nonendemic” missing_species case lineage just 1 species (.e. island radiation) number missing species specified zero, adding colonist already counts one automatically. col_time time colonisation million years present col_max_age boolean (TRUE/FALSE) whether colonisation time precise considered maximum upper bound time colonisation uncertainty branching_times times island clade speciated situ island. island clade speciated (.e. singleton) NA. (NA example singleton lineages). min_age minimum lower bound time colonisation. used colonisation time added assumed upper bound (col_max_age=TRUE) species vector species names contained within colonist clade_type number representing set rates colonist assumed , default 1, number greater one assume clade exceptionally different colonisation diversification dynamics new missing species added island_tbl can repeat conversion steps using create_daisie_data() produce data accepted DAISIE model.","code":"island_tbl <- add_island_colonist(   island_tbl = island_tbl,   clade_name = \"Bird_a\",   status = \"endemic\",   # clade with just 1 species, missing_species = 0   # because adding the lineage already counts as 1   missing_species = 0,   col_time = 2.5,   col_max_age = FALSE,   branching_times = NA_real_,   min_age = NA_real_,   species = \"Bird_a\",   clade_type = 1 )"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"adding-a-lineage-with-2-or-more-species-on-the-island-when-a-phylogeny-is-not-available-for-the-lineage-but-a-colonisation-time-estimate-exists","dir":"Articles","previous_headings":"3. Adding missing species","what":"3.3 Adding a lineage with 2 or more species on the island when a phylogeny is not available for the lineage, but a colonisation time estimate exists","title":"DAISIEprep Tutorial","text":"Taking example 3.2, lineage 2 species. case, use imaginary Galápagos bird lineage 3 species, data set, fabricate time colonisation. input needed : island_tbl add existing island_tbl clade_name name represent clade, can either specific species clade genus name, another name represent species status either “endemic” “nonendemic” missing_species number missing species case n-1, adding lineage manually already counts 1. col_time time colonisation million years present col_max_age boolean (TRUE/FALSE) whether colonisation time precise considered maximum upper bound time colonisation uncertainty branching_times times island clade speciated situ island. island clade speciated (.e. singleton) NA. min_age minimum lower bound time colonisation. used upper bound colonisation time known different crown age. species vector species names contained within colonist clade_type number representing set rates colonist assumed , default 1, number greater one assume clade exceptionally different colonisation diversification dynamics new missing species added island_tbl can repeat conversion steps using create_daisie_data() produce data accepted DAISIE model.","code":"island_tbl <- add_island_colonist(   island_tbl = island_tbl,   clade_name = \"Bird_b\",   status = \"endemic\",   # the total species is 3 and all are missing   # but we add missing_species = 2 because   # adding the lineage already counts as 1   missing_species = 2,   col_time = 2.5,   col_max_age = FALSE,   branching_times = NA_real_,   min_age = NA_real_,   clade_type = 1,   species = c(\"Bird_b\", \"Bird_c\", \"Bird_d\") )"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"adding-a-lineage-when-a-phylogeny-is-not-available-for-the-lineage-and-no-colonisation-estimate-is-available-","dir":"Articles","previous_headings":"3. Adding missing species","what":"3.4 Adding a lineage when a phylogeny is not available for the lineage, and no colonisation estimate is available.","title":"DAISIEprep Tutorial","text":"Taking examples 3.2 3.3 assuming phylogenetic data colonisation time estimate island clade, insert species missing time give colonisation time. colonist later gets processed DAISIE inference model assumed colonised island time island’s formation (case Galápagos four million years ago) present. missing_species case lineage just 1 species (.e. island radiation) number missing species zero, adding colonist already counts one automatically. case island clade one species, number missing species case n-1. Example adding lineage 1 species: Example adding lineage 5 species: new missing species added island_tbl can repeat conversion steps using create_daisie_data() produce data accepted DAISIE model.","code":"island_tbl <- add_island_colonist(   island_tbl = island_tbl,   clade_name = \"Bird_e\",   status = \"endemic\",   # clade with just 1 species, missing_species = 0   # because adding the lineage already counts as 1   missing_species = 0,   col_time = NA_real_,   col_max_age = FALSE,   branching_times = NA_real_,   min_age = NA_real_,   clade_type = 1,   species = \"Bird_e\" ) island_tbl <- add_island_colonist(   island_tbl = island_tbl,   clade_name = \"Bird_f\",   status = \"endemic\",   # the total species is 5 and all are missing   # but we add missing_species = 4 because   # adding the lineage already counts as 1   missing_species = 4,   col_time = NA_real_,   col_max_age = FALSE,   branching_times = NA_real_,   min_age = NA_real_,   clade_type = 1,   species = c(\"Bird_f\", \"Bird_g\", \"Bird_h\",               \"Bird_i\", \"Bird_j\") )"},{"path":"https://joshwlambert.github.io/DAISIEprep/articles/Tutorial.html","id":"adding-a-lineage-when-a-phylogeny-is-not-available-for-the-entire-island-lineage-but-a-crown-age-or-minimum-colonisation-time-estimate-exists","dir":"Articles","previous_headings":"3. Adding missing species","what":"3.5 Adding a lineage when a phylogeny is not available for the entire island lineage, but a crown age or minimum colonisation time estimate exists","title":"DAISIEprep Tutorial","text":"Taking example 3.2 assuming colonisation time estimate, crown age estimate estimate minimum (latest) time island colonised lineage. colonist later gets processed DAISIE inference model assumed colonised island time island’s formation (case Galápagos four million years ago) crown minimum age. example assume crown age 2 million years. new missing species added island_tbl can repeat conversion steps using create_daisie_data() produce data accepted DAISIE model.","code":"island_tbl <- add_island_colonist(   island_tbl = island_tbl,   clade_name = \"Bird_k\",   status = \"endemic\",   missing_species = 0,   col_time = NA_real_,   col_max_age = FALSE,   branching_times = NA_real_,   min_age = 2,   species = \"Bird_k\",   clade_type = 1 ) #> Warning in add_island_colonist(island_tbl = island_tbl, clade_name = \"Bird_k\", #> : Adding a min_age is inconsistent with setting colonisation time to be precise #> (col_max_age = FALSE). So in this case the min_age is ignored. data_list <- create_daisie_data(   data = island_tbl,   island_age = 4,   num_mainland_species = 100,   precise_col_time = TRUE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua W. Lambert. Author, maintainer. Luis Valente. Author. Pedro Santos Neves. Author. Lizzie Roeble. Author. Theo Pannetier. Author.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert J, Valente L, Santos Neves P, Roeble L, Pannetier T (2024). DAISIEprep: Extracts Phylogenetic Island Community Data Phylogenetic Trees. R package version 1.0.0, https://joshwlambert.github.io/DAISIEprep/, https://github.com/joshwlambert/DAISIEprep.","code":"@Manual{,   title = {DAISIEprep: Extracts Phylogenetic Island Community Data from Phylogenetic Trees},   author = {Joshua W. Lambert and Luis Valente and Pedro {Santos Neves} and Lizzie Roeble and Theo Pannetier},   year = {2024},   note = {R package version 1.0.0, https://joshwlambert.github.io/DAISIEprep/},   url = {https://github.com/joshwlambert/DAISIEprep}, }"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"package-description","dir":"","previous_headings":"","what":"Package description","title":"Extracts Phylogenetic Island Community Data from Phylogenetic Trees","text":"DAISIEprep R package enables extraction formatting phylogenetic data island species inference model DAISIE (Dynamic Assembly Island biota Speciation, Immigration Extinction). central function, DAISIEprep::extract_island_species(), uses data phylogenetic trees species island endemicity statuses (.e. endemic island, non-endemic, present island). phylogenetic endemicity data handled together using phylo4d S4 class phylobase R package. DAISIEprep fills niche standardised, reproducible data processing suite DAISIE inference models. Unlike phylogenetic methods implemented R, DAISIE yet defined methodological framework extract format data prior analysis. phylogenetic models R commonly use phylo S3 data structure, defined R package ape, DAISIE idiosynchratic data structure unfamiliar new users. package provides set tools users facilitate application DAISIE’s models research. package also opens possibility extracting island data ‘big data’ macrophylogenies (>5,000 species) impeded researchers previously extract data manually. two algorithms extract data min algorithm asr (ancestral state reconstruction) algorithm. former based rules/assumptions DAISIE inference model colonisation species mainland source pool, speciation island cladogenesis anagenensis, island extinction. Therefore, algorithm assumes back-colonisation island mainland mainland evolutionary processes. data seems conform assumptions (visual inspection) good method choose (DAISIEprep::extract_island_species(..., extraction_method = “min”). Alternatively, data may violate assumptions, , example species within island radiation migrate back mainland. , cases asr algorithm provides method extract data based probable reconstruction species ranges (.e. island presence/absence) can extract clades may non-island species (DAISIEprep::extract_island_species(..., extraction_method = “asr”). asr algorithm utilises ancestral state reconstruction methods packages (e.g. castor), package flexible users extending incorporate models may better suit data set.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extracts Phylogenetic Island Community Data from Phylogenetic Trees","text":"Install DAISIEprep CRAN: development version DAISIEprep can installed GitHub:","code":"install.packages(\"DAISIEprep\") if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\") remotes::install_github(\"joshwlambert/DAISIEprep\")"},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"Extracts Phylogenetic Island Community Data from Phylogenetic Trees","text":"See tutorial.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Extracts Phylogenetic Island Community Data from Phylogenetic Trees","text":"report bug please open issue email j.w.l.lambert@rug.nl.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Extracts Phylogenetic Island Community Data from Phylogenetic Trees","text":"DAISIE team always welcomes contributions packages. like contribute package please follow contributing guidelines","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Extracts Phylogenetic Island Community Data from Phylogenetic Trees","text":"Please note DAISIEprep project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/DAISIEprep-package.html","id":null,"dir":"Reference","previous_headings":"","what":"DAISIEprep: Extracts Phylogenetic Island Community Data from Phylogenetic Trees — DAISIEprep-package","title":"DAISIEprep: Extracts Phylogenetic Island Community Data from Phylogenetic Trees — DAISIEprep-package","text":"Extracts colonisation branching times island species used analysis R package 'DAISIE'. uses phylogenetic endemicity data extract separate island colonists store .","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/DAISIEprep-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DAISIEprep: Extracts Phylogenetic Island Community Data from Phylogenetic Trees — DAISIEprep-package","text":"Maintainer: Joshua W. Lambert j.w.l.lambert@rug.nl (ORCID) Authors: Luis Valente luis.valente@naturalis.nl (ORCID) Pedro Santos Neves p.m.santos.neves@rug.nl (ORCID) Lizzie Roeble lizzie.roeble@naturalis.nl (ORCID) Theo Pannetier t.s.c.pannetier@rug.nl (ORCID)","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/GalapagosTrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Phylogenetic trees of the Galapagos bird lineages and sister species on the mainland. — GalapagosTrees","title":"Phylogenetic trees of the Galapagos bird lineages and sister species on the mainland. — GalapagosTrees","text":"dataset phylogenetic tree used extract Galapagos avifaunal lineages.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/GalapagosTrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phylogenetic trees of the Galapagos bird lineages and sister species on the mainland. — GalapagosTrees","text":"","code":"coccyzus_tree  columbiformes_tree  finches_tree  mimus_tree  myiarchus_tree  progne_tree  pyrocephalus_tree  setophaga_tree"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/GalapagosTrees.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Phylogenetic trees of the Galapagos bird lineages and sister species on the mainland. — GalapagosTrees","text":"phylo object (ape package) object class phylo length 5. object class phylo length 4. object class phylo length 5. object class phylo length 4. object class phylo length 5. object class phylo length 5. object class phylo length 5.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/GalapagosTrees.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Phylogenetic trees of the Galapagos bird lineages and sister species on the mainland. — GalapagosTrees","text":"Valente, L.M., .B. Phillimore R.S. Etienne (2015). Equilibrium non-equilibrium dynamics simultaneously operate Galapagos islands. Ecology Letters 18: 844-852.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor functions for the data (slots) in objects of the Island_colonist class — get_clade_name","title":"Accessor functions for the data (slots) in objects of the Island_colonist class — get_clade_name","text":"Accessor functions data (slots) objects Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor functions for the data (slots) in objects of the Island_colonist class — get_clade_name","text":"","code":"get_clade_name(x)  # S4 method for class 'Island_colonist' get_clade_name(x)  set_clade_name(x) <- value  # S4 method for class 'Island_colonist' set_clade_name(x) <- value  get_status(x)  # S4 method for class 'Island_colonist' get_status(x)  set_status(x) <- value  # S4 method for class 'Island_colonist' set_status(x) <- value  get_missing_species(x)  # S4 method for class 'Island_colonist' get_missing_species(x)  set_missing_species(x) <- value  # S4 method for class 'Island_colonist' set_missing_species(x) <- value  get_col_time(x)  # S4 method for class 'Island_colonist' get_col_time(x)  set_col_time(x) <- value  # S4 method for class 'Island_colonist' set_col_time(x) <- value  get_col_max_age(x)  # S4 method for class 'Island_colonist' get_col_max_age(x)  set_col_max_age(x) <- value  # S4 method for class 'Island_colonist' set_col_max_age(x) <- value  get_branching_times(x)  # S4 method for class 'Island_colonist' get_branching_times(x)  set_branching_times(x) <- value  # S4 method for class 'Island_colonist' set_branching_times(x) <- value  get_min_age(x)  # S4 method for class 'Island_colonist' get_min_age(x)  set_min_age(x) <- value  # S4 method for class 'Island_colonist' set_min_age(x) <- value  get_species(x)  # S4 method for class 'Island_colonist' get_species(x)  set_species(x) <- value  # S4 method for class 'Island_colonist' set_species(x) <- value  get_clade_type(x)  # S4 method for class 'Island_colonist' get_clade_type(x)  set_clade_type(x) <- value  # S4 method for class 'Island_colonist' set_clade_type(x) <- value"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor functions for the data (slots) in objects of the Island_colonist class — get_clade_name","text":"x object whose class determined signature. value value can take several forms assigned object class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor functions for the data (slots) in objects of the Island_colonist class — get_clade_name","text":"Getter functions (get_) return variable Island_colonist class, setter functions (set_) return modified Island_colonist class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor functions for the data (slots) in objects of the Island_colonist class — get_clade_name","text":"Joshua W. Lambert","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor functions for the data (slots) in objects of the Island_colonist class — get_clade_name","text":"","code":"colonist <- island_colonist()   get_clade_name(colonist) #> [1] NA   set_clade_name(colonist) <- \"abc\"   get_status(colonist) #> [1] NA   set_status(colonist) <- \"abc\"   get_missing_species(colonist) #> [1] NA   set_missing_species(colonist) <- 0   get_col_time(colonist) #> [1] NA   set_col_time(colonist) <- 1   get_col_max_age(colonist) #> [1] NA   set_col_max_age(colonist) <- FALSE   get_branching_times(colonist) #> [1] NA   set_branching_times(colonist) <- 0   get_min_age(colonist) #> [1] NA   set_min_age(colonist) <- 0.1   get_species(colonist) #> [1] NA   set_species(colonist) <- \"abc_a\"   get_clade_type(colonist) #> [1] NA   set_clade_type(colonist) <- 1"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines the island_tbl class which is used when extracting information from the phylogenetic and island data to be used for constructing a daisie_data_tbl — Island_colonist-class","title":"Defines the island_tbl class which is used when extracting information from the phylogenetic and island data to be used for constructing a daisie_data_tbl — Island_colonist-class","text":"Defines island_tbl class used extracting information phylogenetic island data used constructing daisie_data_tbl","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_colonist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Defines the island_tbl class which is used when extracting information from the phylogenetic and island data to be used for constructing a daisie_data_tbl — Island_colonist-class","text":"clade_name character. status character. missing_species character. col_time numeric. col_max_age logical. branching_times numeric. min_age numeric. species character. clade_type numeric.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor functions for the data (slots) in objects of the Island_tbl class — get_island_tbl","title":"Accessor functions for the data (slots) in objects of the Island_tbl class — get_island_tbl","text":"Accessor functions data (slots) objects Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor functions for the data (slots) in objects of the Island_tbl class — get_island_tbl","text":"","code":"get_island_tbl(x)  # S4 method for class 'Island_tbl' get_island_tbl(x)  set_island_tbl(x) <- value  # S4 method for class 'Island_tbl' set_island_tbl(x) <- value  get_extracted_species(x)  # S4 method for class 'Island_tbl' get_extracted_species(x)  set_extracted_species(x) <- value  # S4 method for class 'Island_tbl' set_extracted_species(x) <- value  get_num_phylo_used(x)  # S4 method for class 'Island_tbl' get_num_phylo_used(x)  set_num_phylo_used(x) <- value  # S4 method for class 'Island_tbl' set_num_phylo_used(x) <- value"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor functions for the data (slots) in objects of the Island_tbl class — get_island_tbl","text":"x object whose class determined signature. value value can take several forms assigned object class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor functions for the data (slots) in objects of the Island_tbl class — get_island_tbl","text":"Getter function (get_) returns data frame, setter function (set_) returns modified Island_tbl class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accessor functions for the data (slots) in objects of the Island_tbl class — get_island_tbl","text":"Joshua W. Lambert","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor functions for the data (slots) in objects of the Island_tbl class — get_island_tbl","text":"","code":"island_tbl <- island_tbl() get_island_tbl(island_tbl) #> [1] clade_name      status          missing_species col_time        #> [5] col_max_age     branching_times min_age         species         #> [9] clade_type      #> <0 rows> (or 0-length row.names) set_island_tbl(island_tbl) <- data.frame(   clade_name = \"birds\",   status = \"endemic\",   missing_species = 0,   branching_times = I(list(c(1.0, 0.5))) )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines the island_tbl class which is used when extracting information from the phylogenetic and island data to be used for constructing a daisie_data_tbl — Island_tbl-class","title":"Defines the island_tbl class which is used when extracting information from the phylogenetic and island data to be used for constructing a daisie_data_tbl — Island_tbl-class","text":"Defines island_tbl class used extracting information phylogenetic island data used constructing daisie_data_tbl","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Island_tbl-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Defines the island_tbl class which is used when extracting information from the phylogenetic and island data to be used for constructing a daisie_data_tbl — Island_tbl-class","text":"island_tbl data frame. metadata list.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Multi_island_tbl-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines the Multi_island_tbl class which is multiple Island_tbls. — Multi_island_tbl-class","title":"Defines the Multi_island_tbl class which is multiple Island_tbls. — Multi_island_tbl-class","text":"Defines Multi_island_tbl class multiple Island_tbls.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/Multi_island_tbl-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Defines the Multi_island_tbl class which is multiple Island_tbls. — Multi_island_tbl-class","text":".Data list Island_tbl.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"Fits model ancestral state reconstruction island presence","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"","code":"add_asr_node_states(   phylod,   asr_method,   tie_preference = \"island\",   earliest_col = FALSE,   rate_model = NULL,   ... )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. asr_method character string, either \"parsimony\" \"mk\" determines whether maximum parsimony continuous-time markov model reconstructs ancestral states node. See documentation castor::asr_max_parsimony() castor::asr_mk_model() castor R package details methods used. tie_preference Character string, either \"island\" \"mainland\" choose probable state node using max.col() function. node island presence absence equally probable need decide whether species considered island. consider island use ties.method = \"last\" max.col() function, consider island use ties.method = \"first\". Default \"island\". earliest_col boolean determine whether take colonisation time probable time (FALSE) earliest possible colonisation time (TRUE), probability species island non-zero. Default FALSE. rate_model Rate model used fitting transition rate matrix. Can \"ER\" (rates equal), \"SYM\" (transition rate –>j equal transition rate j–>), \"ARD\" (rates can different), \"SUEDE\" (stepwise transitions –>+1 –>-1 allowed, '' transitions equal, '' transitions equal) \"SRD\" (stepwise transitions –>+1 –>-1 allowed, rate can different). Can also index matrix maps entries transition matrix corresponding independent rate parameter fitted. Diagonal entries map 0, since diagonal entries treated independent rate parameters calculated remaining entries transition matrix. entries map 0 represent transition rate zero. format index matrix similar format used ace function ape package. rate_model relevant transition_matrix==NULL. ... dots Allows arguments passed castor::asr_mk_model() castor::asr_max_parsimony(). arguments must match name exactly, see ?castor::asr_mk_model() ?castor::asr_max_parsimony() information arguments.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"object phylo4d class tip node data","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_asr_node_states.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fits a model of ancestral state reconstruction of island presence — add_asr_node_states","text":"rate_model argument documentation inherited castor::asr_mk_model(), therefore, last sentence transition_matrix argument apply add_asr_node_states().","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_island_colonist.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds an island colonists (can be either a singleton lineage or an island clade) to the island community (island_tbl). — add_island_colonist","title":"Adds an island colonists (can be either a singleton lineage or an island clade) to the island community (island_tbl). — add_island_colonist","text":"Adds island colonists (can either singleton lineage island clade) island community (island_tbl).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_island_colonist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds an island colonists (can be either a singleton lineage or an island clade) to the island community (island_tbl). — add_island_colonist","text":"","code":"add_island_colonist(   island_tbl,   clade_name,   status,   missing_species,   col_time,   col_max_age,   branching_times,   min_age,   species,   clade_type )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_island_colonist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds an island colonists (can be either a singleton lineage or an island clade) to the island community (island_tbl). — add_island_colonist","text":"island_tbl instance Island_tbl class. clade_name Character name colonising clade. status Character endemicity status colonising clade. Either \"endemic\" \"nonendemic\". missing_species Numeric number missing species phylogeny belong colonising clade. clade missing species \\(n - 1\\), \\(n\\) number missing species clade. clade island singleton, number missing species 0 adding colonist already counts one automatically. clade one species, missing_species \\(n - 1\\) adding lineage already counts one. col_time Numeric colonisation time island colonist col_max_age Boolean determining whether colonisation time considered precise time colonisation maximum time colonisation branching_times Numeric vector one elements branching times island. min_age Numeric minimum age (time present) species must colonised island . known branching island, either species subspecies. species Character vector one elements containing name species included colonising clade. clade_type Numeric determining type clade island colonist , determines macroevolutionary regime (parameter set) island colonist . formatting island_tbl DAISIE data list, clade type can used conduct 2-type analysis (see https://CRAN.R-project.org/package=DAISIE/vignettes/demo_optimize.html information)","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_island_colonist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds an island colonists (can be either a singleton lineage or an island clade) to the island community (island_tbl). — add_island_colonist","text":"object Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_island_colonist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds an island colonists (can be either a singleton lineage or an island clade) to the island community (island_tbl). — add_island_colonist","text":"","code":"# create an empty island_tbl to add to island_tbl <- island_tbl()  # add a new island colonist island_tbl <- add_island_colonist(   island_tbl,   clade_name = \"new_clade\",   status = \"endemic\",   missing_species = 0,   col_time = 1,   col_max_age = FALSE,   branching_times = NA,   min_age = NA,   species = \"new_clade\",   clade_type = 1 )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a specified number of missing species to an existing island_tbl at the colonist specified by the species_to_add_to argument given. The species given is located within the island_tbl data and missing species are assigned. This is to be used after extract_island_species() to input missing species. — add_missing_species","title":"Adds a specified number of missing species to an existing island_tbl at the colonist specified by the species_to_add_to argument given. The species given is located within the island_tbl data and missing species are assigned. This is to be used after extract_island_species() to input missing species. — add_missing_species","text":"Adds specified number missing species existing island_tbl colonist specified species_to_add_to argument given. species given located within island_tbl data missing species assigned. used extract_island_species() input missing species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a specified number of missing species to an existing island_tbl at the colonist specified by the species_to_add_to argument given. The species given is located within the island_tbl data and missing species are assigned. This is to be used after extract_island_species() to input missing species. — add_missing_species","text":"","code":"add_missing_species(island_tbl, num_missing_species, species_to_add_to)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a specified number of missing species to an existing island_tbl at the colonist specified by the species_to_add_to argument given. The species given is located within the island_tbl data and missing species are assigned. This is to be used after extract_island_species() to input missing species. — add_missing_species","text":"island_tbl instance Island_tbl class. num_missing_species Numeric number missing species clade. species_to_add_to Character string name species identify clade assign missing species .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a specified number of missing species to an existing island_tbl at the colonist specified by the species_to_add_to argument given. The species given is located within the island_tbl data and missing species are assigned. This is to be used after extract_island_species() to input missing species. — add_missing_species","text":"Object Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_missing_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a specified number of missing species to an existing island_tbl at the colonist specified by the species_to_add_to argument given. The species given is located within the island_tbl data and missing species are assigned. This is to be used after extract_island_species() to input missing species. — add_missing_species","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(5) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\") phylo <- phylobase::phylo4(phylo) endemicity_status <- c(   \"not_present\", \"not_present\", \"endemic\", \"not_present\", \"not_present\" ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) island_tbl <- extract_island_species(phylod, extraction_method = \"min\") island_tbl <- add_missing_species(   island_tbl = island_tbl,   num_missing_species = 1,   species_to_add_to = \"bird_c\" )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_multi_missing_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the number of missing species to be assigned to each island clade in the island_tbl object and assigns the missing species to them. In the case that multiple genera are in an island clade and each have missing species the number of missing species is summed. Currently the missing species are assigned to the genus that first matches with the missing species table, however a more biologically or stochastic assignment is in development. — add_multi_missing_species","title":"Calculates the number of missing species to be assigned to each island clade in the island_tbl object and assigns the missing species to them. In the case that multiple genera are in an island clade and each have missing species the number of missing species is summed. Currently the missing species are assigned to the genus that first matches with the missing species table, however a more biologically or stochastic assignment is in development. — add_multi_missing_species","text":"Calculates number missing species assigned island clade island_tbl object assigns missing species . case multiple genera island clade missing species number missing species summed. Currently missing species assigned genus first matches missing species table, however biologically stochastic assignment development.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_multi_missing_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the number of missing species to be assigned to each island clade in the island_tbl object and assigns the missing species to them. In the case that multiple genera are in an island clade and each have missing species the number of missing species is summed. Currently the missing species are assigned to the genus that first matches with the missing species table, however a more biologically or stochastic assignment is in development. — add_multi_missing_species","text":"","code":"add_multi_missing_species(missing_species, missing_genus, island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_multi_missing_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the number of missing species to be assigned to each island clade in the island_tbl object and assigns the missing species to them. In the case that multiple genera are in an island clade and each have missing species the number of missing species is summed. Currently the missing species are assigned to the genus that first matches with the missing species table, however a more biologically or stochastic assignment is in development. — add_multi_missing_species","text":"missing_species Numeric number missing species phylogeny belong colonising clade. clade missing species \\(n - 1\\), \\(n\\) number missing species clade. clade island singleton, number missing species 0 adding colonist already counts one automatically. clade one species, missing_species \\(n - 1\\) adding lineage already counts one. missing_genus list character vectors containing genera island clade island_tbl instance Island_tbl class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_multi_missing_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the number of missing species to be assigned to each island clade in the island_tbl object and assigns the missing species to them. In the case that multiple genera are in an island clade and each have missing species the number of missing species is summed. Currently the missing species are assigned to the genus that first matches with the missing species table, however a more biologically or stochastic assignment is in development. — add_multi_missing_species","text":"Object Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_multi_missing_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the number of missing species to be assigned to each island clade in the island_tbl object and assigns the missing species to them. In the case that multiple genera are in an island clade and each have missing species the number of missing species is summed. Currently the missing species are assigned to the genus that first matches with the missing species table, however a more biologically or stochastic assignment is in development. — add_multi_missing_species","text":"","code":"phylod <- create_test_phylod(test_scenario = 6) island_tbl <- suppressWarnings(extract_island_species(   phylod = phylod,   extraction_method = \"asr\", )) phylod <- create_test_phylod(test_scenario = 7) island_tbl <- suppressWarnings(extract_island_species(   phylod = phylod,   extraction_method = \"asr\",   island_tbl = island_tbl ))  missing_species <- data.frame(   clade_name = \"bird\",   missing_species = 1,   endemicity_status = \"endemic\" )  missing_genus <- list(\"bird\", character(0))  island_tbl <- add_multi_missing_species(   missing_species = missing_species,   missing_genus = missing_genus,   island_tbl = island_tbl )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an outgroup species to a given phylogeny. — add_outgroup","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"Add outgroup species given phylogeny.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"","code":"add_outgroup(phylo)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"phylo phylogeny either phylo (ape package) phylo4 (phylobase package) object.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"phylo object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/add_outgroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an outgroup species to a given phylogeny. — add_outgroup","text":"","code":"phylo <- ape::rcoal(10) phylo_with_outgroup <- add_outgroup(phylo)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether all species given in the descendants vector are the same species. — all_descendants_conspecific","title":"Checks whether all species given in the descendants vector are the same species. — all_descendants_conspecific","text":"Checks whether species given descendants vector species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether all species given in the descendants vector are the same species. — all_descendants_conspecific","text":"","code":"all_descendants_conspecific(descendants)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether all species given in the descendants vector are the same species. — all_descendants_conspecific","text":"descendants vector character strings names species determine whether species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether all species given in the descendants vector are the same species. — all_descendants_conspecific","text":"Boolean","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_descendants_conspecific.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether all species given in the descendants vector are the same species. — all_descendants_conspecific","text":"","code":"# Example where species are not conspecific descendants <- c(\"bird_a\", \"bird_b\", \"bird_c\") all_descendants_conspecific(descendants = descendants) #> [1] FALSE  # Example where species are conspecific descendants <- c(\"bird_a_1\", \"bird_a_2\", \"bird_a_3\") all_descendants_conspecific(descendants = descendants) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_endemicity_status.html","id":null,"dir":"Reference","previous_headings":"","what":"All possible endemicity statuses — all_endemicity_status","title":"All possible endemicity statuses — all_endemicity_status","text":"possible endemicity statuses","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_endemicity_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All possible endemicity statuses — all_endemicity_status","text":"","code":"all_endemicity_status()"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/all_endemicity_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All possible endemicity statuses — all_endemicity_status","text":"vector character strings endemicity status options","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Detects any cases where a non-endemic species or species not present on the island has likely been on the island given its ancestral state reconstruction indicating ancestral presence on the island and so is likely a back colonisation from the island to the mainland (or potentially different island). This function is useful if using extraction_method = ","title":"Detects any cases where a non-endemic species or species not present on the island has likely been on the island given its ancestral state reconstruction indicating ancestral presence on the island and so is likely a back colonisation from the island to the mainland (or potentially different island). This function is useful if using extraction_method = ","text":"Detects cases non-endemic species species present island likely island given ancestral state reconstruction indicating ancestral presence island likely back colonisation island mainland (potentially different island). function useful using extraction_method = \"min\" DAISIEprep::extract_island_species() may brake single colonist multiple colonists back-colonisation.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detects any cases where a non-endemic species or species not present on the island has likely been on the island given its ancestral state reconstruction indicating ancestral presence on the island and so is likely a back colonisation from the island to the mainland (or potentially different island). This function is useful if using extraction_method = ","text":"","code":"any_back_colonisation(phylod, only_tips = FALSE)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detects any cases where a non-endemic species or species not present on the island has likely been on the island given its ancestral state reconstruction indicating ancestral presence on the island and so is likely a back colonisation from the island to the mainland (or potentially different island). This function is useful if using extraction_method = ","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. only_tips boolean determing whether tips (.e. terminal branches) searched back colonisation events.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detects any cases where a non-endemic species or species not present on the island has likely been on the island given its ancestral state reconstruction indicating ancestral presence on the island and so is likely a back colonisation from the island to the mainland (or potentially different island). This function is useful if using extraction_method = ","text":"single vector character strings. Character string format ancestral_node -> focal_node, ancestral node mainland focal node . case back colonisations different message string returned.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_back_colonisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detects any cases where a non-endemic species or species not present on the island has likely been on the island given its ancestral state reconstruction indicating ancestral presence on the island and so is likely a back colonisation from the island to the mainland (or potentially different island). This function is useful if using extraction_method = ","text":"","code":"# Example with no back colonisation phylod <- create_test_phylod(test_scenario = 15) any_back_colonisation(phylod) #> [1] \"No back-colonisation events found in the phylogeny\"  # Example with back colonisation set.seed(   3,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(5) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\") phylo <- phylobase::phylo4(phylo) endemicity_status <- c(\"endemic\", \"endemic\", \"not_present\",                        \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"parsimony\") # aritificially modify data to produce back-colonisation phylobase::tdata(phylod)$island_status[8] <- \"endemic\" any_back_colonisation(phylod = phylod) #> [1] \"8 -> 3\""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether the phylogeny has an outgroup that is not present on the island. This is critical when extracting data from the phylogeny so the stem age (colonisation time) is correct. — any_outgroup","title":"Checks whether the phylogeny has an outgroup that is not present on the island. This is critical when extracting data from the phylogeny so the stem age (colonisation time) is correct. — any_outgroup","text":"Checks whether phylogeny outgroup present island. critical extracting data phylogeny stem age (colonisation time) correct.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether the phylogeny has an outgroup that is not present on the island. This is critical when extracting data from the phylogeny so the stem age (colonisation time) is correct. — any_outgroup","text":"","code":"any_outgroup(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether the phylogeny has an outgroup that is not present on the island. This is critical when extracting data from the phylogeny so the stem age (colonisation time) is correct. — any_outgroup","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether the phylogeny has an outgroup that is not present on the island. This is critical when extracting data from the phylogeny so the stem age (colonisation time) is correct. — any_outgroup","text":"Boolean","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_outgroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether the phylogeny has an outgroup that is not present on the island. This is critical when extracting data from the phylogeny so the stem age (colonisation time) is correct. — any_outgroup","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(c(\"not_present\", \"endemic\", \"nonendemic\"),                             size = length(phylobase::tipLabels(phylo)),                             replace = TRUE) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) any_outgroup(phylod) #> [1] FALSE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_polyphyly.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether there are any species in the phylogeny that have multiple tips (i.e. multiple subspecies per species) and whether any of those tips are paraphyletic (i.e. are their subspecies more distantly related to each other than to other subspecies or species). — any_polyphyly","title":"Checks whether there are any species in the phylogeny that have multiple tips (i.e. multiple subspecies per species) and whether any of those tips are paraphyletic (i.e. are their subspecies more distantly related to each other than to other subspecies or species). — any_polyphyly","text":"Checks whether species phylogeny multiple tips (.e. multiple subspecies per species) whether tips paraphyletic (.e. subspecies distantly related subspecies species).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_polyphyly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether there are any species in the phylogeny that have multiple tips (i.e. multiple subspecies per species) and whether any of those tips are paraphyletic (i.e. are their subspecies more distantly related to each other than to other subspecies or species). — any_polyphyly","text":"","code":"any_polyphyly(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_polyphyly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether there are any species in the phylogeny that have multiple tips (i.e. multiple subspecies per species) and whether any of those tips are paraphyletic (i.e. are their subspecies more distantly related to each other than to other subspecies or species). — any_polyphyly","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_polyphyly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether there are any species in the phylogeny that have multiple tips (i.e. multiple subspecies per species) and whether any of those tips are paraphyletic (i.e. are their subspecies more distantly related to each other than to other subspecies or species). — any_polyphyly","text":"Boolean","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/any_polyphyly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether there are any species in the phylogeny that have multiple tips (i.e. multiple subspecies per species) and whether any of those tips are paraphyletic (i.e. are their subspecies more distantly related to each other than to other subspecies or species). — any_polyphyly","text":"","code":"phylod <- create_test_phylod(test_scenario = 1) any_polyphyly(phylod) #> [1] FALSE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts the Island_tbl class to a data frame in the format of a DAISIE data table (see DAISIE R package for details). This can then be input into DAISIEprep::create_daisie_data() function which creates the list input into the DAISIE ML models. — as_daisie_datatable","title":"Converts the Island_tbl class to a data frame in the format of a DAISIE data table (see DAISIE R package for details). This can then be input into DAISIEprep::create_daisie_data() function which creates the list input into the DAISIE ML models. — as_daisie_datatable","text":"Converts Island_tbl class data frame format DAISIE data table (see DAISIE R package details). can input DAISIEprep::create_daisie_data() function creates list input DAISIE ML models.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts the Island_tbl class to a data frame in the format of a DAISIE data table (see DAISIE R package for details). This can then be input into DAISIEprep::create_daisie_data() function which creates the list input into the DAISIE ML models. — as_daisie_datatable","text":"","code":"as_daisie_datatable(island_tbl, island_age, precise_col_time = TRUE)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts the Island_tbl class to a data frame in the format of a DAISIE data table (see DAISIE R package for details). This can then be input into DAISIEprep::create_daisie_data() function which creates the list input into the DAISIE ML models. — as_daisie_datatable","text":"island_tbl instance Island_tbl class. island_age Age island appropriate units. precise_col_time Boolean, TRUE uses precise times colonisation, FALSE makes every colonist max age colonistion uses minimum age colonisation available.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts the Island_tbl class to a data frame in the format of a DAISIE data table (see DAISIE R package for details). This can then be input into DAISIEprep::create_daisie_data() function which creates the list input into the DAISIE ML models. — as_daisie_datatable","text":"data frame format DAISIE data table","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts the Island_tbl class to a data frame in the format of a DAISIE data table (see DAISIE R package for details). This can then be input into DAISIEprep::create_daisie_data() function which creates the list input into the DAISIE ML models. — as_daisie_datatable","text":"Joshua W. Lambert, Pedro Neves","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/as_daisie_datatable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts the Island_tbl class to a data frame in the format of a DAISIE data table (see DAISIE R package for details). This can then be input into DAISIEprep::create_daisie_data() function which creates the list input into the DAISIE ML models. — as_daisie_datatable","text":"","code":"phylod <- create_test_phylod(10) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"asr\" ) #> Warning: Root of the phylogeny is on the island so the colonisation #>               time from the stem age cannot be collected, colonisation time #>               will be set to infinite.  # Example where precise colonisation times are known daisie_datatable <- as_daisie_datatable(   island_tbl = island_tbl,   island_age = 0.2,   precise_col_time = TRUE )  # Example where colonisation times are uncertain and set to max ages daisie_datatable <- as_daisie_datatable(   island_tbl = island_tbl,   island_age = 0.2,   precise_col_time = FALSE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/benchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance analysis of the extract_island_species() function Uses system.time() for timing for reasons explained here: https://radfordneal.wordpress.com/2014/02/02/inaccurate-results-from-microbenchmark/ # nolint — benchmark","title":"Performance analysis of the extract_island_species() function Uses system.time() for timing for reasons explained here: https://radfordneal.wordpress.com/2014/02/02/inaccurate-results-from-microbenchmark/ # nolint — benchmark","text":"Performance analysis extract_island_species() function Uses system.time() timing reasons explained : https://radfordneal.wordpress.com/2014/02/02/inaccurate-results--microbenchmark/ # nolint","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/benchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance analysis of the extract_island_species() function Uses system.time() for timing for reasons explained here: https://radfordneal.wordpress.com/2014/02/02/inaccurate-results-from-microbenchmark/ # nolint — benchmark","text":"","code":"benchmark(   phylod,   tree_size_range,   num_points,   prob_on_island,   prob_endemic,   replicates,   extraction_method,   asr_method,   tie_preference,   log_scale = TRUE,   parameter_index = NULL,   verbose = FALSE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/benchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance analysis of the extract_island_species() function Uses system.time() for timing for reasons explained here: https://radfordneal.wordpress.com/2014/02/02/inaccurate-results-from-microbenchmark/ # nolint — benchmark","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. tree_size_range Numeric vector two elements, first smallest tree size (number tips) second largest tree size num_points Numeric determining many points sequence smallest tree size largest tree size prob_on_island Numeric vector probability island use parameter space prob_endemic Numeric vector probability island species endemic use parameter space replicates Numeric determining number replicates use account stochasticity sampling species island endemic species extraction_method character string specifying whether colonisation time extracted minimum time (min) (present), probable time ancestral state reconstruction (asr). asr_method character string, either \"parsimony\" \"mk\" determines whether maximum parsimony continuous-time markov model reconstructs ancestral states node. See documentation castor::asr_max_parsimony() castor::asr_mk_model() castor R package details methods used. tie_preference Character string, either \"island\" \"mainland\" choose probable state node using max.col() function. node island presence absence equally probable need decide whether species considered island. consider island use ties.method = \"last\" max.col() function, consider island use ties.method = \"first\". Default \"island\". log_scale boolean determining whether sequence tree sizes linear (FALSE) log (TRUE) scale parameter_index Numeric determining parameter set use (.e row parameter space data frame), NULL parameter sets looped verbose Boolean. States intermediate results printed console. Defaults FALSE","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/benchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance analysis of the extract_island_species() function Uses system.time() for timing for reasons explained here: https://radfordneal.wordpress.com/2014/02/02/inaccurate-results-from-microbenchmark/ # nolint — benchmark","text":"Data frame","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes an existing instance of an Island_tbl class and bind the information from the instance of an Island_colonist class to it — bind_colonist_to_tbl","title":"Takes an existing instance of an Island_tbl class and bind the information from the instance of an Island_colonist class to it — bind_colonist_to_tbl","text":"Takes existing instance Island_tbl class bind information instance Island_colonist class ","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes an existing instance of an Island_tbl class and bind the information from the instance of an Island_colonist class to it — bind_colonist_to_tbl","text":"","code":"bind_colonist_to_tbl(island_colonist, island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes an existing instance of an Island_tbl class and bind the information from the instance of an Island_colonist class to it — bind_colonist_to_tbl","text":"island_colonist instance Island_colonist class. island_tbl instance Island_tbl class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes an existing instance of an Island_tbl class and bind the information from the instance of an Island_colonist class to it — bind_colonist_to_tbl","text":"object Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/bind_colonist_to_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes an existing instance of an Island_tbl class and bind the information from the instance of an Island_colonist class to it — bind_colonist_to_tbl","text":"","code":"island_colonist <- DAISIEprep::island_colonist(   clade_name = \"bird\",   status = \"endemic\",   missing_species = 0,   col_time = 1,   col_max_age = FALSE,   branching_times = 0.5,   species = \"bird_a\",   clade_type = 1 ) island_tbl <- island_tbl() bind_colonist_to_tbl(   island_colonist = island_colonist,   island_tbl = island_tbl ) #> Class:  Island_tbl  #>   clade_name  status missing_species col_time col_max_age branching_times #> 1       bird endemic               0        1       FALSE             0.5 #>   min_age species clade_type #> 1      NA  bird_a          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of the Island_colonist class — check_island_colonist","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"Checks validity Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"","code":"check_island_colonist(object)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"object Instance island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"Boolean errors","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_colonist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the validity of the Island_colonist class — check_island_colonist","text":"","code":"island_colonist <- island_colonist() check_island_colonist(island_colonist) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of the Island_tbl class — check_island_tbl","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"Checks validity Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"","code":"check_island_tbl(object)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"object Instance Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"Boolean errors","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_island_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the validity of the Island_tbl class — check_island_tbl","text":"","code":"island_tbl <- island_tbl() check_island_tbl(island_tbl) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"Checks validity Multi_island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"","code":"check_multi_island_tbl(object)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"object Instance Multi_island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"Boolean errors","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_multi_island_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the validity of the Multi_island_tbl class — check_multi_island_tbl","text":"","code":"multi_island_tbl <- multi_island_tbl() check_multi_island_tbl(multi_island_tbl) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether \\linkS4class{phylo4d} object conforms to the requirements of the DAISIEprep package. If the function does not return anything the data is ready to be used, if an error is returned the data requires some pre-processing before DAISIEprep can be used — check_phylo_data","title":"Checks whether \\linkS4class{phylo4d} object conforms to the requirements of the DAISIEprep package. If the function does not return anything the data is ready to be used, if an error is returned the data requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"Checks whether \\linkS4class{phylo4d} object conforms requirements DAISIEprep package. function return anything data ready used, error returned data requires pre-processing DAISIEprep can used","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether \\linkS4class{phylo4d} object conforms to the requirements of the DAISIEprep package. If the function does not return anything the data is ready to be used, if an error is returned the data requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"","code":"check_phylo_data(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether \\linkS4class{phylo4d} object conforms to the requirements of the DAISIEprep package. If the function does not return anything the data is ready to be used, if an error is returned the data requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether \\linkS4class{phylo4d} object conforms to the requirements of the DAISIEprep package. If the function does not return anything the data is ready to be used, if an error is returned the data requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"Nothing error message","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/check_phylo_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether \\linkS4class{phylo4d} object conforms to the requirements of the DAISIEprep package. If the function does not return anything the data is ready to be used, if an error is returned the data requires some pre-processing before DAISIEprep can be used — check_phylo_data","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) check_phylo_data(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/coccyzus_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogenetic tree of coccyzus species with endemicity status as tip states. — coccyzus_phylod","title":"A phylogenetic tree of coccyzus species with endemicity status as tip states. — coccyzus_phylod","text":"phylogenetic tree coccyzus species endemicity status tip states.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/coccyzus_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogenetic tree of coccyzus species with endemicity status as tip states. — coccyzus_phylod","text":"","code":"coccyzus_phylod"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/coccyzus_phylod.html","id":"coccyzus-phylod","dir":"Reference","previous_headings":"","what":"coccyzus_phylod","title":"A phylogenetic tree of coccyzus species with endemicity status as tip states. — coccyzus_phylod","text":"phylo4d object (phylobase package) 20 tips 19 internal nodes.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/coccyzus_phylod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A phylogenetic tree of coccyzus species with endemicity status as tip states. — coccyzus_phylod","text":"Valente, L.M., .B. Phillimore R.S. Etienne (2015). Equilibrium non-equilibrium dynamics simultaneously operate Galapagos islands. Ecology Letters 18: 844-852.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/columbiformes_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogenetic tree of columbiformes species with endemicity status as tip states. — columbiformes_phylod","title":"A phylogenetic tree of columbiformes species with endemicity status as tip states. — columbiformes_phylod","text":"phylogenetic tree columbiformes species endemicity status tip states.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/columbiformes_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogenetic tree of columbiformes species with endemicity status as tip states. — columbiformes_phylod","text":"","code":"columbiformes_phylod"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/columbiformes_phylod.html","id":"columbiformes-phylod","dir":"Reference","previous_headings":"","what":"columbiformes_phylod","title":"A phylogenetic tree of columbiformes species with endemicity status as tip states. — columbiformes_phylod","text":"phylo4d object (phylobase package) 242 tips 241 internal nodes.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/columbiformes_phylod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A phylogenetic tree of columbiformes species with endemicity status as tip states. — columbiformes_phylod","text":"Valente, L.M., .B. Phillimore R.S. Etienne (2015). Equilibrium non-equilibrium dynamics simultaneously operate Galapagos islands. Ecology Letters 18: 844-852.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/count_missing_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads in the checklist of all species on an island, including those that are not in the phylogeny (represented by NA) and counts the number of species missing from the phylogeny each genus — count_missing_species","title":"Reads in the checklist of all species on an island, including those that are not in the phylogeny (represented by NA) and counts the number of species missing from the phylogeny each genus — count_missing_species","text":"Reads checklist species island, including phylogeny (represented NA) counts number species missing phylogeny genus","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/count_missing_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads in the checklist of all species on an island, including those that are not in the phylogeny (represented by NA) and counts the number of species missing from the phylogeny each genus — count_missing_species","text":"","code":"count_missing_species(   checklist,   phylo_name_col,   genus_name_col,   in_phylo_col,   endemicity_status_col,   rm_species_col = NULL )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/count_missing_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads in the checklist of all species on an island, including those that are not in the phylogeny (represented by NA) and counts the number of species missing from the phylogeny each genus — count_missing_species","text":"checklist data frame information species island phylo_name_col character string specifying column name names phylogeny checklist genus_name_col character string specifying column name genus names checklist in_phylo_col character string specifying column name status whether species phylogeny checklist endemicity_status_col character string specifying column name endemicity status species checklist rm_species_col character string specifying column name information whether remove species checklist counting number missing species checklist. can NULL species removed checklist. useful species checklist island need removed group interest, e.g. migratory bird amongst terrestrial birds","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/count_missing_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads in the checklist of all species on an island, including those that are not in the phylogeny (represented by NA) and counts the number of species missing from the phylogeny each genus — count_missing_species","text":"Data frame","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/count_missing_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads in the checklist of all species on an island, including those that are not in the phylogeny (represented by NA) and counts the number of species missing from the phylogeny each genus — count_missing_species","text":"","code":"mock_checklist <- data.frame(   genus = c(\"bird\", \"bird\", \"bird\", \"bird\", \"bird\", \"bird\", \"bird\",             \"bird\", \"bird\", \"bird\"),   species = c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"),   species_names = c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                     \"bird_f\",\"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\"),   sampled = c(TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE),   endemicity_status = c(\"endemic\", \"endemic\", \"endemic\", \"nonendemic\",                         \"endemic\", \"nonendemic\", \"endemic\", \"endemic\",                         \"endemic\", \"endemic\"),   remove_species = (rep(FALSE, 10)) )  missing_species <- count_missing_species(   checklist = mock_checklist,   phylo_name_col = \"species_names\",   genus_name_col = \"genus\",   in_phylo_col = \"sampled\",   endemicity_status_col = \"endemicity_status\",   rm_species_col = NULL )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the final DAISIE data structure to be produced from within DAISIEprep. For detailed documentation see the help documentation in the DAISIE package (?DAISIE::DAISIE_dataprep). — create_daisie_data","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the final DAISIE data structure to be produced from within DAISIEprep. For detailed documentation see the help documentation in the DAISIE package (?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"wrapper function DAISIE::DAISIE_dataprep(). allows final DAISIE data structure produced within DAISIEprep. detailed documentation see help documentation DAISIE package (?DAISIE::DAISIE_dataprep).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the final DAISIE data structure to be produced from within DAISIEprep. For detailed documentation see the help documentation in the DAISIE package (?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"","code":"create_daisie_data(   data,   island_age,   num_mainland_species,   num_clade_types = 1,   list_type2_clades = NA,   prop_type2_pool = \"proportional\",   epss = 1e-05,   verbose = FALSE,   precise_col_time = TRUE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the final DAISIE data structure to be produced from within DAISIEprep. For detailed documentation see the help documentation in the DAISIE package (?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"data Either object class Island_tbl DAISIE data table object (output as_daisie_datatable()). island_age Age island appropriate units. num_mainland_species size mainland pool, .e. number species can potentially colonise island. num_clade_types Number clade types. Default num_clade_types = 1 species considered belong macroevolutionary process. num_clade_types = 2, two types clades distinct macroevolutionary processes. list_type2_clades num_clade_types = 2, list_type2_clades specifies names clades distinct macroevolutionary process. names must match \"Clade_name\" column source data table. num_clade_types = 1, list_type2_clades = NA specified (default). prop_type2_pool Specifies fraction potential mainland colonists distinct macroevolutionary process. Applies number_clade_types = 2. Default \"proportional\" sets fraction proportional number clades distinct macroevolutionary process colonised island. Alternatively, user can specify value 0 1 (e.g. mainland pool size 1000 prop_type2_pool = 0.02 number type 2 species 20). epss Default = 1e-5 appropriate cases. value used set maximum age colonisation \"Non_endemic_MaxAge\" \"Endemic_MaxAge\" species age slightly younger island cases age provided species older island. new maximum age used upper bound integrate possible colonisation times. verbose Boolean. States intermediate results printed console. Defaults FALSE precise_col_time Boolean, TRUE uses precise times colonisation, FALSE makes every colonist max age colonistion uses minimum age colonisation available.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the final DAISIE data structure to be produced from within DAISIEprep. For detailed documentation see the help documentation in the DAISIE package (?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"DAISIE data list","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_daisie_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This is a wrapper function for DAISIE::DAISIE_dataprep(). It allows the final DAISIE data structure to be produced from within DAISIEprep. For detailed documentation see the help documentation in the DAISIE package (?DAISIE::DAISIE_dataprep). — create_daisie_data","text":"","code":"phylod <- create_test_phylod(3) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"min\" ) daisie_datatable <- as_daisie_datatable(island_tbl, island_age = 10) daisie_data_list <- create_daisie_data(   data = daisie_datatable,   island_age = 10,   num_mainland_species = 1000,   num_clade_types = 1,   list_type2_clades = NA,   prop_type2_pool = NA,   epss = 1e-5,   verbose = FALSE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a data frame with the endemicity status (either 'endemic', 'nonendemic', 'not_present') of every species in the phylogeny using a phylogeny and a data frame of the island species and their endemicity (either 'endemic' or 'nonendemic') provided. — create_endemicity_status","title":"Creates a data frame with the endemicity status (either 'endemic', 'nonendemic', 'not_present') of every species in the phylogeny using a phylogeny and a data frame of the island species and their endemicity (either 'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"Creates data frame endemicity status (either 'endemic', 'nonendemic', 'not_present') every species phylogeny using phylogeny data frame island species endemicity (either 'endemic' 'nonendemic') provided.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a data frame with the endemicity status (either 'endemic', 'nonendemic', 'not_present') of every species in the phylogeny using a phylogeny and a data frame of the island species and their endemicity (either 'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"","code":"create_endemicity_status(phylo, island_species)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a data frame with the endemicity status (either 'endemic', 'nonendemic', 'not_present') of every species in the phylogeny using a phylogeny and a data frame of the island species and their endemicity (either 'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"phylo phylogeny either phylo (ape package) phylo4 (phylobase package) object. island_species Data frame two columns. first character string tip_labels tip names species island. second column character string endemicity status species, either endemic nonendemic.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a data frame with the endemicity status (either 'endemic', 'nonendemic', 'not_present') of every species in the phylogeny using a phylogeny and a data frame of the island species and their endemicity (either 'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"Data frame single column character strings row names","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a data frame with the endemicity status (either 'endemic', 'nonendemic', 'not_present') of every species in the phylogeny using a phylogeny and a data frame of the island species and their endemicity (either 'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"Species included island_species data frame included phylo included output warning print species island_species found phylo.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_endemicity_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a data frame with the endemicity status (either 'endemic', 'nonendemic', 'not_present') of every species in the phylogeny using a phylogeny and a data frame of the island species and their endemicity (either 'endemic' or 'nonendemic') provided. — create_endemicity_status","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(4) phylo$tip.label <- c(\"species_a\", \"species_b\", \"species_c\", \"species_d\") phylo <- methods::as(phylo, \"phylo4\") island_species <- data.frame(   tip_labels = c(\"species_a\", \"species_b\", \"species_c\", \"species_d\"),   tip_endemicity_status = c(\"endemic\", \"endemic\", \"endemic\", \"nonendemic\") ) endemicity_status <- create_endemicity_status(   phylo = phylo,   island_species = island_species )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates phylod objects. — create_test_phylod","title":"Creates phylod objects. — create_test_phylod","text":"helper function useful tests examples easily create phylod objects (.e. phylogenetic trees data).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates phylod objects. — create_test_phylod","text":"","code":"create_test_phylod(test_scenario)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates phylod objects. — create_test_phylod","text":"test_scenario Integer specifying test phylod object create.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates phylod objects. — create_test_phylod","text":"phylo4d object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/create_test_phylod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates phylod objects. — create_test_phylod","text":"","code":"create_test_phylod(test_scenario = 1) #>    label node ancestor edge.length node.type endemicity_status island_status #> 1 bird_a    1        3   0.7551818       tip       not_present          <NA> #> 2 bird_b    2        3   0.7551818       tip        nonendemic          <NA> #> 3   <NA>    3        0          NA      root              <NA>    nonendemic #>   nonendemic_prob not_present_prob #> 1              NA               NA #> 2              NA               NA #> 3             0.5              0.5"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation for function in the DAISIEprep package — default_params_doc","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"Documentation function DAISIEprep package","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"","code":"default_params_doc(   island_colonist,   island_tbl,   phylod,   extraction_method,   species_label,   species_endemicity,   x,   value,   clade_name,   status,   missing_species,   col_time,   col_max_age,   branching_times,   min_age,   species,   clade_type,   endemic_clade,   phylo,   island_species,   descendants,   clade,   asr_method,   tie_preference,   earliest_col,   include_not_present,   nested_asr_species,   num_missing_species,   species_to_add_to,   node_pies,   test_scenario,   data,   island_age,   num_mainland_species,   num_clade_types,   list_type2_clades,   prop_type2_pool,   epss,   verbose,   precise_col_time,   n,   digits,   include_crown_age,   only_tips,   node_label,   multi_phylod,   island_tbl_1,   island_tbl_2,   unique_clade_name,   genus_name,   stem,   genus_in_tree,   missing_genus,   checklist,   phylo_name_col,   genus_name_col,   in_phylo_col,   endemicity_status_col,   rm_species_col,   tree_size_range,   num_points,   prob_on_island,   prob_endemic,   replicates,   log_scale,   parameter_index,   sse_model,   force_nonendemic_singleton,   ... )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"island_colonist instance Island_colonist class. island_tbl instance Island_tbl class. phylod phylo4d object package phylobase containing phylogenetic endemicity data species. extraction_method character string specifying whether colonisation time extracted minimum time (min) (present), probable time ancestral state reconstruction (asr). species_label tip label species interest. species_endemicity character string endemicity, either \"endemic\" \"nonendemic\" island species, \"not_present\" island. x object whose class determined signature. value value can take several forms assigned object class. clade_name Character name colonising clade. status Character endemicity status colonising clade. Either \"endemic\" \"nonendemic\". missing_species Numeric number missing species phylogeny belong colonising clade. clade missing species \\(n - 1\\), \\(n\\) number missing species clade. clade island singleton, number missing species 0 adding colonist already counts one automatically. clade one species, missing_species \\(n - 1\\) adding lineage already counts one. col_time Numeric colonisation time island colonist col_max_age Boolean determining whether colonisation time considered precise time colonisation maximum time colonisation branching_times Numeric vector one elements branching times island. min_age Numeric minimum age (time present) species must colonised island . known branching island, either species subspecies. species Character vector one elements containing name species included colonising clade. clade_type Numeric determining type clade island colonist , determines macroevolutionary regime (parameter set) island colonist . formatting island_tbl DAISIE data list, clade type can used conduct 2-type analysis (see https://CRAN.R-project.org/package=DAISIE/vignettes/demo_optimize.html information) endemic_clade Named vector species clade. phylo phylogeny either phylo (ape package) phylo4 (phylobase package) object. island_species Data frame two columns. first character string tip_labels tip names species island. second column character string endemicity status species, either endemic nonendemic. descendants vector character strings names species determine whether species. clade numeric vector indices species island clade. asr_method character string, either \"parsimony\" \"mk\" determines whether maximum parsimony continuous-time markov model reconstructs ancestral states node. See documentation castor::asr_max_parsimony() castor::asr_mk_model() castor R package details methods used. tie_preference Character string, either \"island\" \"mainland\" choose probable state node using max.col() function. node island presence absence equally probable need decide whether species considered island. consider island use ties.method = \"last\" max.col() function, consider island use ties.method = \"first\". Default \"island\". earliest_col boolean determine whether take colonisation time probable time (FALSE) earliest possible colonisation time (TRUE), probability species island non-zero. Default FALSE. include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE. nested_asr_species character string determines whether nested island colonists split separate colonists (\"split\"), grouped single clade (\"group\"). Nested species whose tip state island, ancestral nodes island, nodes island state nodes state not_present (.e. island). Therefore, colonisation time can extracted recent node state island (can branching time tip ancestor node tip island), older node state larger clade, \"split\" \"group\" respectively. Note argument applies extraction_method = \"asr\". num_missing_species Numeric number missing species clade. species_to_add_to Character string name species identify clade assign missing species . node_pies Boolean determining pie charts probabilities species present island. TRUE correct data required phylod object. test_scenario Integer specifying test phylod object create. data Either object class Island_tbl DAISIE data table object (output as_daisie_datatable()). island_age Age island appropriate units. num_mainland_species size mainland pool, .e. number species can potentially colonise island. num_clade_types Number clade types. Default num_clade_types = 1 species considered belong macroevolutionary process. num_clade_types = 2, two types clades distinct macroevolutionary processes. list_type2_clades num_clade_types = 2, list_type2_clades specifies names clades distinct macroevolutionary process. names must match \"Clade_name\" column source data table. num_clade_types = 1, list_type2_clades = NA specified (default). prop_type2_pool Specifies fraction potential mainland colonists distinct macroevolutionary process. Applies number_clade_types = 2. Default \"proportional\" sets fraction proportional number clades distinct macroevolutionary process colonised island. Alternatively, user can specify value 0 1 (e.g. mainland pool size 1000 prop_type2_pool = 0.02 number type 2 species 20). epss Default = 1e-5 appropriate cases. value used set maximum age colonisation \"Non_endemic_MaxAge\" \"Endemic_MaxAge\" species age slightly younger island cases age provided species older island. new maximum age used upper bound integrate possible colonisation times. verbose Boolean. States intermediate results printed console. Defaults FALSE precise_col_time Boolean, TRUE uses precise times colonisation, FALSE makes every colonist max age colonistion uses minimum age colonisation available. n numeric rounded. digits numeric specifying decimal places round include_crown_age boolean determining whether crown age gets plotted stem age. only_tips boolean determing whether tips (.e. terminal branches) searched back colonisation events. node_label numeric label node within phylogeny. multi_phylod list phylod objects. island_tbl_1 object Island_tbl class comparedl island_tbl_2 object Island_tbl class compared unique_clade_name Boolean determining whether unique species identifier used clade name Island_tbl object genus name may unique genus several independent island colonisations genus_name Character string genus name matched genus name tip labels phylogeny stem Character string, either \"genus\" \"island_presence\". former extract stem age genussbased genus name provided, latter extract stem age based ancestral presence island either based \"min\" \"asr\" extraction algorithms. genus_in_tree numeric vector indicates species genus tree missing_genus list character vectors containing genera island clade checklist data frame information species island phylo_name_col character string specifying column name names phylogeny checklist genus_name_col character string specifying column name genus names checklist in_phylo_col character string specifying column name status whether species phylogeny checklist endemicity_status_col character string specifying column name endemicity status species checklist rm_species_col character string specifying column name information whether remove species checklist counting number missing species checklist. can NULL species removed checklist. useful species checklist island need removed group interest, e.g. migratory bird amongst terrestrial birds tree_size_range Numeric vector two elements, first smallest tree size (number tips) second largest tree size num_points Numeric determining many points sequence smallest tree size largest tree size prob_on_island Numeric vector probability island use parameter space prob_endemic Numeric vector probability island species endemic use parameter space replicates Numeric determining number replicates use account stochasticity sampling species island endemic species log_scale boolean determining whether sequence tree sizes linear (FALSE) log (TRUE) scale parameter_index Numeric determining parameter set use (.e row parameter space data frame), NULL parameter sets looped sse_model either \"musse\" (default) \"geosse\". MuSSE expects state values 1, 2, 3, encode \"not_present\", \"endemic\", \"nonendemic\", respectively. GeoSSE expects trait values 0, 1, 2, 0 widespread state (, \"nonendemic\"), 1 2 \"not_present\" \"endemic\", respectively. force_nonendemic_singleton boolean determines whether species classified \"nonendemic\" forced extracted singletons (.e single species lineages). default FALSE non-endemics can extracted either singletons part endemic clade. set TRUE non-endemic species tree single species colonists, colonisation time extracted stem age tip phylogeny. exceptions , please see vignette(\"Forcing_nonendemic_singleton\", package = \"DAISIEprep\") details. argument active extraction_method = \"asr\", extraction_method = \"min\" argument ignored warning, min method always extracts non-endemic species singletons. ... dots Allows arguments passed castor::asr_mk_model() castor::asr_max_parsimony(). arguments must match name exactly, see ?castor::asr_mk_model() ?castor::asr_max_parsimony() information arguments.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"Nothing","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/default_params_doc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Documentation for function in the DAISIEprep package — default_params_doc","text":"Joshua W. Lambert","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/endemicity_to_sse_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert endemicity to SSE states — endemicity_to_sse_states","title":"Convert endemicity to SSE states — endemicity_to_sse_states","text":"Convert endemicity SSE states","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/endemicity_to_sse_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert endemicity to SSE states — endemicity_to_sse_states","text":"","code":"endemicity_to_sse_states(endemicity_status, sse_model = \"musse\")"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/endemicity_to_sse_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert endemicity to SSE states — endemicity_to_sse_states","text":"endemicity_status character vector values \"endemic\", \"nonendemic\" /\"not_present\" sse_model either \"musse\" (default) \"geosse\". MuSSE expects state values 1, 2, 3, encode \"not_present\", \"endemic\", \"nonendemic\", respectively. GeoSSE expects trait values 0, 1, 2, 0 widespread state (, \"nonendemic\"), 1 2 \"not_present\" \"endemic\", respectively.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/endemicity_to_sse_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert endemicity to SSE states — endemicity_to_sse_states","text":"integer vector tip states, following encoding expected MuSSE/GeoSSE","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_asr_clade.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts an island clade based on the ancestral state reconstruction of the species presence on the island, therefore this clade can contain non-endemic species as well as endemic species. — extract_asr_clade","title":"Extracts an island clade based on the ancestral state reconstruction of the species presence on the island, therefore this clade can contain non-endemic species as well as endemic species. — extract_asr_clade","text":"Extracts island clade based ancestral state reconstruction species presence island, therefore clade can contain non-endemic species well endemic species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_asr_clade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts an island clade based on the ancestral state reconstruction of the species presence on the island, therefore this clade can contain non-endemic species as well as endemic species. — extract_asr_clade","text":"","code":"extract_asr_clade(phylod, species_label, clade, include_not_present)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_asr_clade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts an island clade based on the ancestral state reconstruction of the species presence on the island, therefore this clade can contain non-endemic species as well as endemic species. — extract_asr_clade","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest. clade numeric vector indices species island clade. include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_asr_clade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts an island clade based on the ancestral state reconstruction of the species presence on the island, therefore this clade can contain non-endemic species as well as endemic species. — extract_asr_clade","text":"object Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_biogeobears_ancestral_states_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract ancestral state probabilities from BioGeoBEARS output — extract_biogeobears_ancestral_states_probs","title":"Extract ancestral state probabilities from BioGeoBEARS output — extract_biogeobears_ancestral_states_probs","text":"Extract probabilities endemicity status tip internal node states output optimisation performed BioGeoBEARS","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_biogeobears_ancestral_states_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract ancestral state probabilities from BioGeoBEARS output — extract_biogeobears_ancestral_states_probs","text":"","code":"extract_biogeobears_ancestral_states_probs(biogeobears_res)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_biogeobears_ancestral_states_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract ancestral state probabilities from BioGeoBEARS output — extract_biogeobears_ancestral_states_probs","text":"biogeobears_res list, output BioGeoBEARS::bears_optim_run()","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_biogeobears_ancestral_states_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract ancestral state probabilities from BioGeoBEARS output — extract_biogeobears_ancestral_states_probs","text":"data.frame one row per node (tips internals) four columns: label | not_present | endemic | nonendemic, last three columns containing probability endemicity status (summing 1).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_clade_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a name for a clade depending on whether all the species of the clade have the same genus name or whether the clade is composed of multiple genera, in which case it will create a unique clade name by concatinating the genus names — extract_clade_name","title":"Creates a name for a clade depending on whether all the species of the clade have the same genus name or whether the clade is composed of multiple genera, in which case it will create a unique clade name by concatinating the genus names — extract_clade_name","text":"Creates name clade depending whether species clade genus name whether clade composed multiple genera, case create unique clade name concatinating genus names","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_clade_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a name for a clade depending on whether all the species of the clade have the same genus name or whether the clade is composed of multiple genera, in which case it will create a unique clade name by concatinating the genus names — extract_clade_name","text":"","code":"extract_clade_name(clade)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_clade_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a name for a clade depending on whether all the species of the clade have the same genus name or whether the clade is composed of multiple genera, in which case it will create a unique clade name by concatinating the genus names — extract_clade_name","text":"clade numeric vector indices species island clade.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_clade_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a name for a clade depending on whether all the species of the clade have the same genus name or whether the clade is composed of multiple genera, in which case it will create a unique clade name by concatinating the genus names — extract_clade_name","text":"Character","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the information for an endemic clade (i.e. more than one species on the island more closely related to each other than other mainland species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_endemic_clade","title":"Extracts the information for an endemic clade (i.e. more than one species on the island more closely related to each other than other mainland species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_endemic_clade","text":"Extracts information endemic clade (.e. one species island closely related mainland species) phylogeny (specifically phylo4d  object phylobase package) stores Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the information for an endemic clade (i.e. more than one species on the island more closely related to each other than other mainland species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_endemic_clade","text":"","code":"extract_endemic_clade(phylod, species_label, unique_clade_name)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the information for an endemic clade (i.e. more than one species on the island more closely related to each other than other mainland species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_endemic_clade","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest. unique_clade_name Boolean determining whether unique species identifier used clade name Island_tbl object genus name may unique genus several independent island colonisations","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the information for an endemic clade (i.e. more than one species on the island more closely related to each other than other mainland species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_endemic_clade","text":"object Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_clade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the information for an endemic clade (i.e. more than one species on the island more closely related to each other than other mainland species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_endemic_clade","text":"","code":"set.seed(   3,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- methods::as(phylo, \"phylo4\") endemicity_status <- sample(   x = c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.7, 0.3, 0) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) island_colonist <- extract_endemic_clade(   phylod = phylod,   species_label = \"bird_i\",   unique_clade_name = TRUE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the information for an endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an Island_colonist class — extract_endemic_singleton","title":"Extracts the information for an endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an Island_colonist class — extract_endemic_singleton","text":"Extracts information endemic species phylogeny (specifically phylo4d  object phylobase package) stores Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the information for an endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an Island_colonist class — extract_endemic_singleton","text":"","code":"extract_endemic_singleton(phylod, species_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the information for an endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an Island_colonist class — extract_endemic_singleton","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the information for an endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an Island_colonist class — extract_endemic_singleton","text":"object Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_endemic_singleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the information for an endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an Island_colonist class — extract_endemic_singleton","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   x = c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) extract_endemic_singleton(phylod = phylod, species_label = \"bird_i\") #> Class:  Island_colonist  #>   Clade name:  bird_i  #>   Status:  endemic  #>   Missing species:  0  #>   Colonisation time:  0.04960523  #>   Colonisation max age:  FALSE  #>   Branching times:  NA  #>   Min age:  NA  #>   Species:  bird_i  #>   Clade type:  1"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object — extract_island_species","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object — extract_island_species","text":"Extracts colonisation, diversification, endemicty data phylogenetic endemicity data stores Island_tbl object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object — extract_island_species","text":"","code":"extract_island_species(   phylod,   extraction_method,   island_tbl = NULL,   include_not_present = FALSE,   nested_asr_species = c(\"split\", \"group\"),   force_nonendemic_singleton = FALSE,   unique_clade_name = TRUE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object — extract_island_species","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. extraction_method character string specifying whether colonisation time extracted minimum time (min) (present), probable time ancestral state reconstruction (asr). island_tbl instance Island_tbl class. include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE. nested_asr_species character string determines whether nested island colonists split separate colonists (\"split\"), grouped single clade (\"group\"). Nested species whose tip state island, ancestral nodes island, nodes island state nodes state not_present (.e. island). Therefore, colonisation time can extracted recent node state island (can branching time tip ancestor node tip island), older node state larger clade, \"split\" \"group\" respectively. Note argument applies extraction_method = \"asr\". force_nonendemic_singleton boolean determines whether species classified \"nonendemic\" forced extracted singletons (.e single species lineages). default FALSE non-endemics can extracted either singletons part endemic clade. set TRUE non-endemic species tree single species colonists, colonisation time extracted stem age tip phylogeny. exceptions , please see vignette(\"Forcing_nonendemic_singleton\", package = \"DAISIEprep\") details. argument active extraction_method = \"asr\", extraction_method = \"min\" argument ignored warning, min method always extracts non-endemic species singletons. unique_clade_name Boolean determining whether unique species identifier used clade name Island_tbl object genus name may unique genus several independent island colonisations","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object — extract_island_species","text":"object Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_island_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object — extract_island_species","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) extract_island_species(phylod, extraction_method = \"min\") #> Class:  Island_tbl  #>   clade_name     status missing_species   col_time col_max_age branching_times #> 1     bird_g nonendemic               0 0.38003405       FALSE              NA #> 2     bird_i    endemic               0 0.04960523       FALSE              NA #>   min_age species clade_type #> 1      NA  bird_g          1 #> 2      NA  bird_i          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_multi_tip_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the information for a species (endemic or non-endemic) which has multiple tips in the phylogeny (i.e. more than one sample per species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_multi_tip_species","title":"Extracts the information for a species (endemic or non-endemic) which has multiple tips in the phylogeny (i.e. more than one sample per species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_multi_tip_species","text":"Extracts information species (endemic non-endemic) multiple tips phylogeny (.e. one sample per species) phylogeny (specifically phylo4d  object phylobase package) stores Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_multi_tip_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the information for a species (endemic or non-endemic) which has multiple tips in the phylogeny (i.e. more than one sample per species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_multi_tip_species","text":"","code":"extract_multi_tip_species(phylod, species_label, species_endemicity)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_multi_tip_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the information for a species (endemic or non-endemic) which has multiple tips in the phylogeny (i.e. more than one sample per species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_multi_tip_species","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest. species_endemicity character string endemicity, either \"endemic\" \"nonendemic\" island species, \"not_present\" island.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_multi_tip_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the information for a species (endemic or non-endemic) which has multiple tips in the phylogeny (i.e. more than one sample per species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_multi_tip_species","text":"object Island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_multi_tip_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the information for a species (endemic or non-endemic) which has multiple tips in the phylogeny (i.e. more than one sample per species) from a phylogeny (specifically phylo4d object from phylobase package) and stores it in an Island_colonist class — extract_multi_tip_species","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h_1\", \"bird_h_2\", \"bird_i\") phylo <- phylobase::phylo4(phylo) endemicity_status <- c(\"not_present\", \"not_present\", \"not_present\",                        \"not_present\", \"not_present\", \"not_present\",                        \"not_present\",  \"endemic\", \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) extract_multi_tip_species(   phylod = phylod,   species_label = \"bird_h_1\",   species_endemicity = \"endemic\" ) #> Class:  Island_colonist  #>   Clade name:  bird_h  #>   Status:  endemic  #>   Missing species:  0  #>   Colonisation time:  0.3800341  #>   Colonisation max age:  TRUE  #>   Branching times:  NA  #>   Min age:  0.04960523  #>   Species:  bird_h_1 bird_h_2  #>   Clade type:  1"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the information for a non-endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an island_colonist class — extract_nonendemic","title":"Extracts the information for a non-endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an island_colonist class — extract_nonendemic","text":"Extracts information non-endemic species phylogeny (specifically phylo4d  object phylobase package) stores island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the information for a non-endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an island_colonist class — extract_nonendemic","text":"","code":"extract_nonendemic(phylod, species_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the information for a non-endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an island_colonist class — extract_nonendemic","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the information for a non-endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an island_colonist class — extract_nonendemic","text":"object island_colonist class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the information for a non-endemic species from a phylogeny (specifically phylo4d object from phylobase package) and stores it in in an island_colonist class — extract_nonendemic","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   x = c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) extract_nonendemic(phylod = phylod, species_label = \"bird_g\") #> Class:  Island_colonist  #>   Clade name:  bird_g  #>   Status:  nonendemic  #>   Missing species:  0  #>   Colonisation time:  0.3800341  #>   Colonisation max age:  FALSE  #>   Branching times:  NA  #>   Min age:  NA  #>   Species:  bird_g  #>   Clade type:  1"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic_forced.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract non-endemic colonist that is forced to be a singleton by user — extract_nonendemic_forced","title":"Extract non-endemic colonist that is forced to be a singleton by user — extract_nonendemic_forced","text":"Extract non-endemic colonist forced singleton user","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic_forced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract non-endemic colonist that is forced to be a singleton by user — extract_nonendemic_forced","text":"","code":"extract_nonendemic_forced(phylod, species_label, island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic_forced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract non-endemic colonist that is forced to be a singleton by user — extract_nonendemic_forced","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest. island_tbl instance Island_tbl class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_nonendemic_forced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract non-endemic colonist that is forced to be a singleton by user — extract_nonendemic_forced","text":"object phylo4d class tip node data","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"Extracts colonisation, diversification, endemicty data phylogenetic endemicity data stores Island_tbl object using \"asr\" algorithm extract island species given ancestral states either island presence absence.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"","code":"extract_species_asr(   phylod,   species_label,   species_endemicity,   island_tbl,   include_not_present )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest. species_endemicity character string endemicity, either \"endemic\" \"nonendemic\" island species, \"not_present\" island. island_tbl instance Island_tbl class. include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"object island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_asr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(c(\"not_present\", \"endemic\", \"nonendemic\"),                             size = length(phylobase::tipLabels(phylo)),                             replace = TRUE, prob = c(0.8, 0.1, 0.1)) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(   phylod = phylod,   asr_method = \"parsimony\" ) island_tbl <- island_tbl() extract_species_asr(   phylod = phylod,   species_label = \"bird_i\",   species_endemicity = \"endemic\",   island_tbl = island_tbl,   include_not_present = FALSE ) #> Class:  Island_tbl  #>   clade_name  status missing_species   col_time col_max_age branching_times #> 1     bird_i endemic               0 0.04960523       FALSE              NA #>   min_age species clade_type #> 1      NA  bird_i          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"Extracts colonisation, diversification, endemicty data phylogenetic endemicity data stores Island_tbl object using \"min\" algorithm extract island species shortest time present.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"","code":"extract_species_min(   phylod,   species_label,   species_endemicity,   island_tbl,   unique_clade_name )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest. species_endemicity character string endemicity, either \"endemic\" \"nonendemic\" island species, \"not_present\" island. island_tbl instance Island_tbl class. unique_clade_name Boolean determining whether unique species identifier used clade name Island_tbl object genus name may unique genus several independent island colonisations","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"object island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_species_min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the colonisation, diversification, and endemicty data from phylogenetic and endemicity data and stores it in an Island_tbl object using the ","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) island_tbl <- island_tbl() extract_species_min(   phylod = phylod,   species_label = \"bird_g\",   species_endemicity = \"nonendemic\",   island_tbl = island_tbl,   unique_clade_name = TRUE ) #> Class:  Island_tbl  #>   clade_name     status missing_species  col_time col_max_age branching_times #> 1     bird_g nonendemic               0 0.3800341       FALSE              NA #>   min_age species clade_type #> 1      NA  bird_g          1"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny. The stem age can either be for the genus (or several genera) in the tree (stem = ","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny. The stem age can either be for the genus (or several genera) in the tree (stem = ","text":"Extracts stem age phylogeny species known belong genus phylogeny members genus phylogeny. stem age can either genus (several genera) tree (stem = \"genus\") use extraction algorithm find stem species colonised island (stem = \"island_presence), either 'min' 'asr' extract_island_species(). stem = \"island_presence\" reconstructed node states used determine stem age.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny. The stem age can either be for the genus (or several genera) in the tree (stem = ","text":"","code":"extract_stem_age(genus_name, phylod, stem, extraction_method = NULL)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny. The stem age can either be for the genus (or several genera) in the tree (stem = ","text":"genus_name Character string genus name matched genus name tip labels phylogeny phylod phylo4d object package phylobase containing phylogenetic endemicity data species. stem Character string, either \"genus\" \"island_presence\". former extract stem age genussbased genus name provided, latter extract stem age based ancestral presence island either based \"min\" \"asr\" extraction algorithms. extraction_method character string specifying whether colonisation time extracted minimum time (min) (present), probable time ancestral state reconstruction (asr).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny. The stem age can either be for the genus (or several genera) in the tree (stem = ","text":"Numeric","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny. The stem age can either be for the genus (or several genera) in the tree (stem = ","text":"","code":"# In this example the parrot clade is the genus of interest only the parrots # are endemic to the island and all the passerines are not on the island set.seed(1) tree <- ape::rcoal(10) tree$tip.label <- c(   \"passerine_a\", \"passerine_b\", \"passerine_c\", \"passerine_d\", \"passerine_e\",   \"passerine_f\", \"parrot_a\", \"parrot_b\", \"parrot_c\", \"passerine_j\") tree <- phylobase::phylo4(tree) endemicity_status <- c(   \"not_present\", \"not_present\", \"not_present\", \"not_present\", \"not_present\",   \"not_present\", \"endemic\", \"endemic\", \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(tree, as.data.frame(endemicity_status)) DAISIEprep::plot_phylod(phylod)  # the species 'parrot_a' is removed and becomes the missing species we want # to the know the stem age for phylod <- phylobase::subset(x = phylod, tips.exclude = \"parrot_a\") DAISIEprep::plot_phylod(phylod)  extract_stem_age(   genus_name = \"parrot\",   phylod = phylod,   stem = \"island_presence\",   extraction_method = \"min\" ) #> [1] 0.7648553 # here we use the extraction_method = \"asr\" which requires ancestral node # states in the tree. phylod <- add_asr_node_states(   phylod = phylod,   asr_method = \"parsimony\",   tie_preference = \"mainland\" ) DAISIEprep::plot_phylod(phylod)  extract_stem_age(   genus_name = \"parrot\",   phylod = phylod,   stem = \"island_presence\",   extraction_method = \"asr\" ) #> [1] 1.721423 # lastly we extract the stem age based on the genus name extract_stem_age(   genus_name = \"parrot\",   phylod = phylod,   stem = \"genus\",   extraction_method = NULL ) #> [1] 0.7648553"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_asr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'asr' extraction method — extract_stem_age_asr","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'asr' extraction method — extract_stem_age_asr","text":"Extracts stem age phylogeny species known belong genus phylogeny members genus phylogeny using 'asr' extraction method","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_asr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'asr' extraction method — extract_stem_age_asr","text":"","code":"extract_stem_age_asr(genus_in_tree, phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_asr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'asr' extraction method — extract_stem_age_asr","text":"genus_in_tree numeric vector indicates species genus tree phylod phylo4d object package phylobase containing phylogenetic endemicity data species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_asr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'asr' extraction method — extract_stem_age_asr","text":"Numeric","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_genus.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny — extract_stem_age_genus","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny — extract_stem_age_genus","text":"Extracts stem age phylogeny species known belong genus phylogeny members genus phylogeny","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_genus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny — extract_stem_age_genus","text":"","code":"extract_stem_age_genus(genus_in_tree, phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_genus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny — extract_stem_age_genus","text":"genus_in_tree numeric vector indicates species genus tree phylod phylo4d object package phylobase containing phylogenetic endemicity data species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_genus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny — extract_stem_age_genus","text":"Numeric","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'min' extraction method — extract_stem_age_min","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'min' extraction method — extract_stem_age_min","text":"Extracts stem age phylogeny species known belong genus phylogeny members genus phylogeny using 'min' extraction method","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'min' extraction method — extract_stem_age_min","text":"","code":"extract_stem_age_min(genus_in_tree, phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'min' extraction method — extract_stem_age_min","text":"genus_in_tree numeric vector indicates species genus tree phylod phylo4d object package phylobase containing phylogenetic endemicity data species.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/extract_stem_age_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the stem age from the phylogeny when the a species is known to belong to a genus but is not itself in the phylogeny and there are members of the same genus are in the phylogeny using the 'min' extraction method — extract_stem_age_min","text":"Numeric","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/finches_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogenetic tree of finches species with endemicity status as tip states. — finches_phylod","title":"A phylogenetic tree of finches species with endemicity status as tip states. — finches_phylod","text":"phylogenetic tree finches species endemicity status tip states.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/finches_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogenetic tree of finches species with endemicity status as tip states. — finches_phylod","text":"","code":"finches_phylod"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/finches_phylod.html","id":"finches-phylod","dir":"Reference","previous_headings":"","what":"finches_phylod","title":"A phylogenetic tree of finches species with endemicity status as tip states. — finches_phylod","text":"phylo4d object (phylobase package) 16 tips 15 internal nodes.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/finches_phylod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A phylogenetic tree of finches species with endemicity status as tip states. — finches_phylod","text":"Valente, L.M., .B. Phillimore R.S. Etienne (2015). Equilibrium non-equilibrium dynamics simultaneously operate Galapagos islands. Ecology Letters 18: 844-852.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_endemic_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether the focal species (given by its tip lable in species_label argument) is part of an endemic clade on the island and a vector of the endemic species, either a single species for a singleton or multiple species in an endemic clade. — get_endemic_species","title":"Checks whether the focal species (given by its tip lable in species_label argument) is part of an endemic clade on the island and a vector of the endemic species, either a single species for a singleton or multiple species in an endemic clade. — get_endemic_species","text":"Checks whether focal species (given tip lable species_label argument) part endemic clade island vector endemic species, either single species singleton multiple species endemic clade.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_endemic_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether the focal species (given by its tip lable in species_label argument) is part of an endemic clade on the island and a vector of the endemic species, either a single species for a singleton or multiple species in an endemic clade. — get_endemic_species","text":"","code":"get_endemic_species(phylod, species_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_endemic_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether the focal species (given by its tip lable in species_label argument) is part of an endemic clade on the island and a vector of the endemic species, either a single species for a singleton or multiple species in an endemic clade. — get_endemic_species","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_endemic_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether the focal species (given by its tip lable in species_label argument) is part of an endemic clade on the island and a vector of the endemic species, either a single species for a singleton or multiple species in an endemic clade. — get_endemic_species","text":"Named numeric vector","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_sse_tip_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract tip states from a phylod object — get_sse_tip_states","title":"Extract tip states from a phylod object — get_sse_tip_states","text":"Extract tip states phylod object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_sse_tip_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract tip states from a phylod object — get_sse_tip_states","text":"","code":"get_sse_tip_states(phylod, sse_model = \"musse\")"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_sse_tip_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract tip states from a phylod object — get_sse_tip_states","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. sse_model either \"musse\" (default) \"geosse\". MuSSE expects state values 1, 2, 3, encode \"not_present\", \"endemic\", \"nonendemic\", respectively. GeoSSE expects trait values 0, 1, 2, 0 widespread state (, \"nonendemic\"), 1 2 \"not_present\" \"endemic\", respectively.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/get_sse_tip_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract tip states from a phylod object — get_sse_tip_states","text":"integer vector tip states, expected SSE models","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether species has undergone back-colonisation from — is_back_colonisation","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"Checks whether species undergone back-colonisation ","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"","code":"is_back_colonisation(phylod, node_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. node_label numeric label node within phylogeny.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"character string FALSE. Character string format ancestral_node -> focal_node, ancestral node mainland focal node .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_back_colonisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether species has undergone back-colonisation from — is_back_colonisation","text":"","code":"set.seed( 3, kind = \"Mersenne-Twister\", normal.kind = \"Inversion\", sample.kind = \"Rejection\" ) phylo <- ape::rcoal(5) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\") phylo <- phylobase::phylo4(phylo) endemicity_status <- c(\"endemic\", \"endemic\", \"not_present\",                        \"endemic\", \"not_present\") phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) phylod <- add_asr_node_states(phylod = phylod, asr_method = \"parsimony\") # aritificially modify data to produce back-colonisation phylobase::tdata(phylod)$island_status[8] <- \"endemic\" # Example without back colonisation is_back_colonisation(phylod = phylod, node_label = 2) #> [1] FALSE # Example with back colonisation is_back_colonisation(phylod = phylod, node_label = 3) #> [1] \"8 -> 3\""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines if colonist has already been stored in Island_tbl class. This is used to stop endemic clades from being stored multiple times in the island table by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","title":"Determines if colonist has already been stored in Island_tbl class. This is used to stop endemic clades from being stored multiple times in the island table by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"Determines colonist already stored Island_tbl class. used stop endemic clades stored multiple times island table checking endemicity status branching times identical.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines if colonist has already been stored in Island_tbl class. This is used to stop endemic clades from being stored multiple times in the island table by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"","code":"is_duplicate_colonist(island_colonist, island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines if colonist has already been stored in Island_tbl class. This is used to stop endemic clades from being stored multiple times in the island table by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"island_colonist instance Island_colonist class. island_tbl instance Island_tbl class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines if colonist has already been stored in Island_tbl class. This is used to stop endemic clades from being stored multiple times in the island table by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"Boolean","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_duplicate_colonist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines if colonist has already been stored in Island_tbl class. This is used to stop endemic clades from being stored multiple times in the island table by checking if the endemicity status and branching times are identical. — is_duplicate_colonist","text":"","code":"# with empty island_tbl island_colonist <- island_colonist(   clade_name = \"bird\",   status = \"endemic\",   missing_species = 0,   col_time = 1.0,   col_max_age = FALSE,   branching_times = 0.5,   species = \"bird_a\",   clade_type = 1 ) island_tbl <- island_tbl() is_duplicate_colonist(   island_colonist = island_colonist,   island_tbl = island_tbl ) #> [1] FALSE  # with non-empty island_tbl island_colonist <- island_colonist(   clade_name = \"bird\",   status = \"endemic\",   missing_species = 0,   col_time = 1.0,   col_max_age = FALSE,   branching_times = 0.5,   species = c(\"bird_a\", \"bird_b\"),   clade_type = 1 ) island_tbl <- island_tbl() island_tbl <- bind_colonist_to_tbl(   island_colonist = island_colonist,   island_tbl = island_tbl ) island_colonist <- island_colonist(   clade_name = \"bird\",   status = \"endemic\",   missing_species = 0,   col_time = 1.0,   col_max_age = FALSE,   branching_times = 0.5,   species = c(\"bird_a\", \"bird_b\"),   clade_type = 1 ) is_duplicate_colonist(   island_colonist = island_colonist,   island_tbl = island_tbl ) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_identical_island_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether two Island_tbl objects are identical. If they are different comparisons are made to report which components of the Island_tbls are different. — is_identical_island_tbl","title":"Checks whether two Island_tbl objects are identical. If they are different comparisons are made to report which components of the Island_tbls are different. — is_identical_island_tbl","text":"Checks whether two Island_tbl objects identical. different comparisons made report components Island_tbls different.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_identical_island_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether two Island_tbl objects are identical. If they are different comparisons are made to report which components of the Island_tbls are different. — is_identical_island_tbl","text":"","code":"is_identical_island_tbl(island_tbl_1, island_tbl_2)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_identical_island_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether two Island_tbl objects are identical. If they are different comparisons are made to report which components of the Island_tbls are different. — is_identical_island_tbl","text":"island_tbl_1 object Island_tbl class comparedl island_tbl_2 object Island_tbl class compared","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_identical_island_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether two Island_tbl objects are identical. If they are different comparisons are made to report which components of the Island_tbls are different. — is_identical_island_tbl","text":"Either TRUE character string differences","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_identical_island_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether two Island_tbl objects are identical. If they are different comparisons are made to report which components of the Island_tbls are different. — is_identical_island_tbl","text":"","code":"multi_island_tbl <- multi_extract_island_species(   multi_phylod = list(     create_test_phylod(test_scenario = 1),     create_test_phylod(test_scenario = 1)),  extraction_method = \"min\") is_identical_island_tbl(multi_island_tbl[[1]], multi_island_tbl[[2]]) #> [1] TRUE"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_multi_tip_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a species is represented in the tree has multiple tips and those tips form a monophyletic group (i.e. one species with multiple samples) all labeled as with the same endemicity status — is_multi_tip_species","title":"Checks if a species is represented in the tree has multiple tips and those tips form a monophyletic group (i.e. one species with multiple samples) all labeled as with the same endemicity status — is_multi_tip_species","text":"Checks species represented tree multiple tips tips form monophyletic group (.e. one species multiple samples) labeled endemicity status","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_multi_tip_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a species is represented in the tree has multiple tips and those tips form a monophyletic group (i.e. one species with multiple samples) all labeled as with the same endemicity status — is_multi_tip_species","text":"","code":"is_multi_tip_species(phylod, species_label)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_multi_tip_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a species is represented in the tree has multiple tips and those tips form a monophyletic group (i.e. one species with multiple samples) all labeled as with the same endemicity status — is_multi_tip_species","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. species_label tip label species interest.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_multi_tip_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a species is represented in the tree has multiple tips and those tips form a monophyletic group (i.e. one species with multiple samples) all labeled as with the same endemicity status — is_multi_tip_species","text":"Boolean","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/is_multi_tip_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if a species is represented in the tree has multiple tips and those tips form a monophyletic group (i.e. one species with multiple samples) all labeled as with the same endemicity status — is_multi_tip_species","text":"is_multi_tip_species() returns TRUE tips sample species (.e. conspecific tips) labelled . possible phylogeny multiple tips species island samples labelled \"endemic\" \"nonendemic\" tips samples mainland, labelled \"not_present\", see vignette(\"Multi_tip_extraction\", package = \"DAISIEprep\").","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for Island_colonist — island_colonist","title":"Constructor for Island_colonist — island_colonist","text":"Constructor Island_colonist","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for Island_colonist — island_colonist","text":"","code":"island_colonist(   clade_name = NA_character_,   status = NA_character_,   missing_species = NA_real_,   col_time = NA_real_,   col_max_age = NA,   branching_times = NA_real_,   min_age = NA_real_,   species = NA_character_,   clade_type = NA_integer_ )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for Island_colonist — island_colonist","text":"clade_name Character name colonising clade. status Character endemicity status colonising clade. Either \"endemic\" \"nonendemic\". missing_species Numeric number missing species phylogeny belong colonising clade. clade missing species \\(n - 1\\), \\(n\\) number missing species clade. clade island singleton, number missing species 0 adding colonist already counts one automatically. clade one species, missing_species \\(n - 1\\) adding lineage already counts one. col_time Numeric colonisation time island colonist col_max_age Boolean determining whether colonisation time considered precise time colonisation maximum time colonisation branching_times Numeric vector one elements branching times island. min_age Numeric minimum age (time present) species must colonised island . known branching island, either species subspecies. species Character vector one elements containing name species included colonising clade. clade_type Numeric determining type clade island colonist , determines macroevolutionary regime (parameter set) island colonist . formatting island_tbl DAISIE data list, clade type can used conduct 2-type analysis (see https://CRAN.R-project.org/package=DAISIE/vignettes/demo_optimize.html information)","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for Island_colonist — island_colonist","text":"Object Island_colonist class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_colonist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for Island_colonist — island_colonist","text":"","code":"# Without initial values colonist <- island_colonist()  # With initial values colonist <- island_colonist(   clade_name = \"bird\",   status = \"endemic\",   missing_species = 0,   col_time = 0.5,   col_max_age = FALSE,   branching_times = 0.5,   min_age = NA_real_,   species = \"bird_a\",   clade_type = 1 )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for Island_tbl class — island_tbl","title":"Constructor function for Island_tbl class — island_tbl","text":"Constructor function Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for Island_tbl class — island_tbl","text":"","code":"island_tbl()"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/island_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor function for Island_tbl class — island_tbl","text":"Island_tbl object.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/mimus_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogenetic tree of mimus species with endemicity status as tip states. — mimus_phylod","title":"A phylogenetic tree of mimus species with endemicity status as tip states. — mimus_phylod","text":"phylogenetic tree mimus species endemicity status tip states.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/mimus_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogenetic tree of mimus species with endemicity status as tip states. — mimus_phylod","text":"","code":"mimus_phylod"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/mimus_phylod.html","id":"mimus-phylod","dir":"Reference","previous_headings":"","what":"mimus_phylod","title":"A phylogenetic tree of mimus species with endemicity status as tip states. — mimus_phylod","text":"phylo4d object (phylobase package) 29 tips 28 internal nodes.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/mimus_phylod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A phylogenetic tree of mimus species with endemicity status as tip states. — mimus_phylod","text":"Valente, L.M., .B. Phillimore R.S. Etienne (2015). Equilibrium non-equilibrium dynamics simultaneously operate Galapagos islands. Ecology Letters 18: 844-852.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_extract_island_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the colonisation, diversification, and endemicty data from multiple phylod (phylo4d class from phylobase) objects (composed of phylogenetic and endemicity data) and stores each in an Island_tbl object which are stored in a Multi_island_tbl object. — multi_extract_island_species","title":"Extracts the colonisation, diversification, and endemicty data from multiple phylod (phylo4d class from phylobase) objects (composed of phylogenetic and endemicity data) and stores each in an Island_tbl object which are stored in a Multi_island_tbl object. — multi_extract_island_species","text":"Extracts colonisation, diversification, endemicty data multiple phylod (phylo4d class phylobase) objects (composed phylogenetic endemicity data) stores Island_tbl object stored Multi_island_tbl object.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_extract_island_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the colonisation, diversification, and endemicty data from multiple phylod (phylo4d class from phylobase) objects (composed of phylogenetic and endemicity data) and stores each in an Island_tbl object which are stored in a Multi_island_tbl object. — multi_extract_island_species","text":"","code":"multi_extract_island_species(   multi_phylod,   extraction_method,   island_tbl = NULL,   include_not_present = FALSE,   verbose = FALSE,   unique_clade_name = TRUE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_extract_island_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the colonisation, diversification, and endemicty data from multiple phylod (phylo4d class from phylobase) objects (composed of phylogenetic and endemicity data) and stores each in an Island_tbl object which are stored in a Multi_island_tbl object. — multi_extract_island_species","text":"multi_phylod list phylod objects. extraction_method character string specifying whether colonisation time extracted minimum time (min) (present), probable time ancestral state reconstruction (asr). island_tbl instance Island_tbl class. include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE. verbose Boolean. States intermediate results printed console. Defaults FALSE unique_clade_name Boolean determining whether unique species identifier used clade name Island_tbl object genus name may unique genus several independent island colonisations","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_extract_island_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the colonisation, diversification, and endemicty data from multiple phylod (phylo4d class from phylobase) objects (composed of phylogenetic and endemicity data) and stores each in an Island_tbl object which are stored in a Multi_island_tbl object. — multi_extract_island_species","text":"object Multi_island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_extract_island_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the colonisation, diversification, and endemicty data from multiple phylod (phylo4d class from phylobase) objects (composed of phylogenetic and endemicity data) and stores each in an Island_tbl object which are stored in a Multi_island_tbl object. — multi_extract_island_species","text":"","code":"multi_phylod <- list() multi_phylod[[1]] <- create_test_phylod(test_scenario = 1) multi_phylod[[2]] <- create_test_phylod(test_scenario = 2) multi_island_tbl <- multi_extract_island_species(   multi_phylod = multi_phylod,   extraction_method = \"min\",   island_tbl = NULL,   include_not_present = FALSE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_island_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for Multi_island_tbl class — multi_island_tbl","title":"Constructor function for Multi_island_tbl class — multi_island_tbl","text":"Constructor function Multi_island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_island_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for Multi_island_tbl class — multi_island_tbl","text":"","code":"multi_island_tbl()"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/multi_island_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor function for Multi_island_tbl class — multi_island_tbl","text":"Multi_island_tbl object.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/myiarchus_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogenetic tree of myiarchus species with endemicity status as tip states. — myiarchus_phylod","title":"A phylogenetic tree of myiarchus species with endemicity status as tip states. — myiarchus_phylod","text":"phylogenetic tree myiarchus species endemicity status tip states.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/myiarchus_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogenetic tree of myiarchus species with endemicity status as tip states. — myiarchus_phylod","text":"","code":"myiarchus_phylod"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/myiarchus_phylod.html","id":"myiarchus-phylod","dir":"Reference","previous_headings":"","what":"myiarchus_phylod","title":"A phylogenetic tree of myiarchus species with endemicity status as tip states. — myiarchus_phylod","text":"phylo4d object (phylobase package) 13 tips 12 internal nodes.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/myiarchus_phylod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A phylogenetic tree of myiarchus species with endemicity status as tip states. — myiarchus_phylod","text":"Valente, L.M., .B. Phillimore R.S. Etienne (2015). Equilibrium non-equilibrium dynamics simultaneously operate Galapagos islands. Ecology Letters 18: 844-852.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plant_phylo.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogenetic tree of plant species. — plant_phylo","title":"A phylogenetic tree of plant species. — plant_phylo","text":"mock dataset demonstrating DAISIEprep package.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plant_phylo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogenetic tree of plant species. — plant_phylo","text":"","code":"plant_phylo"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plant_phylo.html","id":"plant-phylo","dir":"Reference","previous_headings":"","what":"plant_phylo","title":"A phylogenetic tree of plant species. — plant_phylo","text":"phylo object (ape package) 10 tips 9 internal nodes. tip label formatted \"Plant_*\" letters , b, etc. used species names.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the stem and potentially crown ages of a community of island colonists. — plot_colonisation","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the stem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"Plots dot plot (cleveland dot plot include_crown_age = TRUE) stem potentially crown ages community island colonists.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the stem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"","code":"plot_colonisation(island_tbl, island_age, include_crown_age = TRUE)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the stem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"island_tbl instance Island_tbl class. island_age Age island appropriate units. include_crown_age boolean determining whether crown age gets plotted stem age.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the stem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"ggplot object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_colonisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a dot plot (cleveland dot plot when include_crown_age = TRUE) of the stem and potentially crown ages of a community of island colonists. — plot_colonisation","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) island_tbl <- extract_island_species(phylod, extraction_method = \"min\") plot_colonisation(island_tbl, island_age = 2)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots performance results for a grouping variable (prob_on_island or prob_endemic). — plot_performance","title":"Plots performance results for a grouping variable (prob_on_island or prob_endemic). — plot_performance","text":"Plots performance results grouping variable (prob_on_island prob_endemic).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots performance results for a grouping variable (prob_on_island or prob_endemic). — plot_performance","text":"","code":"plot_performance(performance_data, group_by)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots performance results for a grouping variable (prob_on_island or prob_endemic). — plot_performance","text":"performance_data Tibble collated performance results group_by variable partition plotting. Uses data masking variable need quoted.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots performance results for a grouping variable (prob_on_island or prob_endemic). — plot_performance","text":"ggplot2 object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"Plots phylogenetic tree associated tip /node data","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"","code":"plot_phylod(phylod, node_pies = FALSE)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. node_pies Boolean determining pie charts probabilities species present island. TRUE correct data required phylod object.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"ggplot object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_phylod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the phylogenetic tree and its associated tip and/or node data — plot_phylod","text":"","code":"set.seed(   1,   kind = \"Mersenne-Twister\",   normal.kind = \"Inversion\",   sample.kind = \"Rejection\" ) phylo <- ape::rcoal(10) phylo$tip.label <- c(\"bird_a\", \"bird_b\", \"bird_c\", \"bird_d\", \"bird_e\",                      \"bird_f\", \"bird_g\", \"bird_h\", \"bird_i\", \"bird_j\") phylo <- phylobase::phylo4(phylo) endemicity_status <- sample(   c(\"not_present\", \"endemic\", \"nonendemic\"),   size = length(phylobase::tipLabels(phylo)),   replace = TRUE,   prob = c(0.6, 0.2, 0.2) ) phylod <- phylobase::phylo4d(phylo, as.data.frame(endemicity_status)) plot_phylod(phylod)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots — plot_sensitivity","title":"Plots — plot_sensitivity","text":"Plots","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots — plot_sensitivity","text":"","code":"plot_sensitivity(sensitivity_data, pairwise_diffs = FALSE)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/plot_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots — plot_sensitivity","text":"ggplot2 object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/progne_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogenetic tree of progne species with endemicity status as tip states. — progne_phylod","title":"A phylogenetic tree of progne species with endemicity status as tip states. — progne_phylod","text":"phylogenetic tree progne species endemicity status tip states.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/progne_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogenetic tree of progne species with endemicity status as tip states. — progne_phylod","text":"","code":"progne_phylod"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/progne_phylod.html","id":"progne-phylod","dir":"Reference","previous_headings":"","what":"progne_phylod","title":"A phylogenetic tree of progne species with endemicity status as tip states. — progne_phylod","text":"phylo4d object (phylobase package) 19 tips 18 internal nodes.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/progne_phylod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A phylogenetic tree of progne species with endemicity status as tip states. — progne_phylod","text":"Valente, L.M., .B. Phillimore R.S. Etienne (2015). Equilibrium non-equilibrium dynamics simultaneously operate Galapagos islands. Ecology Letters 18: 844-852.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/pyrocephalus_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogenetic tree of pyrocephalus species with endemicity status as tip states. — pyrocephalus_phylod","title":"A phylogenetic tree of pyrocephalus species with endemicity status as tip states. — pyrocephalus_phylod","text":"phylogenetic tree pyrocephalus species endemicity status tip states.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/pyrocephalus_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogenetic tree of pyrocephalus species with endemicity status as tip states. — pyrocephalus_phylod","text":"","code":"pyrocephalus_phylod"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/pyrocephalus_phylod.html","id":"pyrocephalus-phylod","dir":"Reference","previous_headings":"","what":"pyrocephalus_phylod","title":"A phylogenetic tree of pyrocephalus species with endemicity status as tip states. — pyrocephalus_phylod","text":"phylo4d object (phylobase package) 66 tips 65 internal nodes.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/pyrocephalus_phylod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A phylogenetic tree of pyrocephalus species with endemicity status as tip states. — pyrocephalus_phylod","text":"Valente, L.M., .B. Phillimore R.S. Etienne (2015). Equilibrium non-equilibrium dynamics simultaneously operate Galapagos islands. Ecology Letters 18: 844-852.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/read_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads in performance analysis results from inst/performance_data and formats the data ready for plotting — read_performance","title":"Reads in performance analysis results from inst/performance_data and formats the data ready for plotting — read_performance","text":"Reads performance analysis results inst/performance_data formats data ready plotting","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/read_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads in performance analysis results from inst/performance_data and formats the data ready for plotting — read_performance","text":"","code":"read_performance()"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/read_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads in performance analysis results from inst/performance_data and formats the data ready for plotting — read_performance","text":"List two data frames","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/read_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads in the results from the sensitivity analysis saved in the inst/sensitivity_data folder — read_sensitivity","title":"Reads in the results from the sensitivity analysis saved in the inst/sensitivity_data folder — read_sensitivity","text":"Reads results sensitivity analysis saved inst/sensitivity_data folder","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/read_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads in the results from the sensitivity analysis saved in the inst/sensitivity_data folder — read_sensitivity","text":"","code":"read_sensitivity()"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/read_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads in the results from the sensitivity analysis saved in the inst/sensitivity_data folder — read_sensitivity","text":"List lists parameter estimates mammal DNA-phylogeny, mammal complete phylogeny parameter set used","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_duplicate_island_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove any duplicated species from the island_tbl after ","title":"Remove any duplicated species from the island_tbl after ","text":"Removes duplicates species island_tbl choosing either duplicated species smaller, recently colonised clade(s) removing larger, older clade(s) (nested_asr_species = \"split\"), removing smaller, recently colonised clade(s) favour leaving larger, older clade(s) (nested_asr_species = \"group\").","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_duplicate_island_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove any duplicated species from the island_tbl after ","text":"","code":"rm_duplicate_island_species(   island_tbl,   phylod,   nested_asr_species,   include_not_present )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_duplicate_island_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove any duplicated species from the island_tbl after ","text":"island_tbl instance Island_tbl class. phylod phylo4d object package phylobase containing phylogenetic endemicity data species. nested_asr_species character string determines whether nested island colonists split separate colonists (\"split\"), grouped single clade (\"group\"). Nested species whose tip state island, ancestral nodes island, nodes island state nodes state not_present (.e. island). Therefore, colonisation time can extracted recent node state island (can branching time tip ancestor node tip island), older node state larger clade, \"split\" \"group\" respectively. Note argument applies extraction_method = \"asr\". include_not_present boolean determining whether species present island included island colonist embedded within island clade. Default FALSE.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_duplicate_island_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove any duplicated species from the island_tbl after ","text":"object Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_island_colonist.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes an island colonist from an Island_tbl object — rm_island_colonist","title":"Removes an island colonist from an Island_tbl object — rm_island_colonist","text":"Removes island colonist Island_tbl object","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_island_colonist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes an island colonist from an Island_tbl object — rm_island_colonist","text":"","code":"rm_island_colonist(island_tbl, clade_name)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_island_colonist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes an island colonist from an Island_tbl object — rm_island_colonist","text":"island_tbl instance Island_tbl class. clade_name Character name colonising clade.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_island_colonist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes an island colonist from an Island_tbl object — rm_island_colonist","text":"Object Island_tbl class","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_island_colonist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes an island colonist from an Island_tbl object — rm_island_colonist","text":"","code":"phylod <- create_test_phylod(test_scenario = 1) island_tbl <- extract_island_species(   phylod = phylod,   extraction_method = \"min\" ) island_tbl <- rm_island_colonist(   island_tbl = island_tbl,   clade_name = \"bird_b\" )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_multi_missing_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Loops through the genera that have missing species and removes the ones that are found in the missing genus list which have phylogenetic data. This is useful when wanting to know which missing species have not been assigned to the island_tbl using add_multi_missing_species(). — rm_multi_missing_species","title":"Loops through the genera that have missing species and removes the ones that are found in the missing genus list which have phylogenetic data. This is useful when wanting to know which missing species have not been assigned to the island_tbl using add_multi_missing_species(). — rm_multi_missing_species","text":"Loops genera missing species removes ones found missing genus list phylogenetic data. useful wanting know missing species assigned island_tbl using add_multi_missing_species().","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_multi_missing_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loops through the genera that have missing species and removes the ones that are found in the missing genus list which have phylogenetic data. This is useful when wanting to know which missing species have not been assigned to the island_tbl using add_multi_missing_species(). — rm_multi_missing_species","text":"","code":"rm_multi_missing_species(missing_species, missing_genus, island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_multi_missing_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loops through the genera that have missing species and removes the ones that are found in the missing genus list which have phylogenetic data. This is useful when wanting to know which missing species have not been assigned to the island_tbl using add_multi_missing_species(). — rm_multi_missing_species","text":"missing_species Numeric number missing species phylogeny belong colonising clade. clade missing species \\(n - 1\\), \\(n\\) number missing species clade. clade island singleton, number missing species 0 adding colonist already counts one automatically. clade one species, missing_species \\(n - 1\\) adding lineage already counts one. missing_genus list character vectors containing genera island clade island_tbl instance Island_tbl class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_multi_missing_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loops through the genera that have missing species and removes the ones that are found in the missing genus list which have phylogenetic data. This is useful when wanting to know which missing species have not been assigned to the island_tbl using add_multi_missing_species(). — rm_multi_missing_species","text":"Data frame","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/rm_multi_missing_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loops through the genera that have missing species and removes the ones that are found in the missing genus list which have phylogenetic data. This is useful when wanting to know which missing species have not been assigned to the island_tbl using add_multi_missing_species(). — rm_multi_missing_species","text":"","code":"phylod <- create_test_phylod(test_scenario = 6) island_tbl <- suppressWarnings(extract_island_species(  phylod = phylod,  extraction_method = \"asr\", )) phylod <- create_test_phylod(test_scenario = 7) island_tbl <- suppressWarnings(extract_island_species(  phylod = phylod,  extraction_method = \"asr\",  island_tbl = island_tbl )) missing_species <- data.frame(   clade_name = \"bird\",   missing_species = 1,   endemicity_status = \"endemic\" ) missing_genus <- list(\"bird\", character(0)) rm_missing_species <- rm_multi_missing_species(   missing_species = missing_species,   missing_genus = missing_genus,   island_tbl = island_tbl )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/round_up.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounds numbers using the round up method, rather than the round to the nearest even number method used by the base function round. — round_up","title":"Rounds numbers using the round up method, rather than the round to the nearest even number method used by the base function round. — round_up","text":"Rounds numbers using round method, rather round nearest even number method used base function round.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/round_up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounds numbers using the round up method, rather than the round to the nearest even number method used by the base function round. — round_up","text":"","code":"round_up(n, digits = 0)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/round_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounds numbers using the round up method, rather than the round to the nearest even number method used by the base function round. — round_up","text":"n numeric rounded. digits numeric specifying decimal places round ","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/round_up.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rounds numbers using the round up method, rather than the round to the nearest even number method used by the base function round. — round_up","text":"Numeric","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/select_endemicity_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Select endemicity status from ancestral states probabilities — select_endemicity_status","title":"Select endemicity status from ancestral states probabilities — select_endemicity_status","text":"Selects state node (internal nodes, .e. ancestral states, tips, included) table probabilities.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/select_endemicity_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select endemicity status from ancestral states probabilities — select_endemicity_status","text":"","code":"select_endemicity_status(asr_df, method = \"max\")"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/select_endemicity_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select endemicity status from ancestral states probabilities — select_endemicity_status","text":"asr_df data frame containing least three columns: not_present_prob | endemic_prob | nonendemic_prob (order). column contain estimated probability state node (rows) columns sum 1. method \"max\" \"random\". \"max\" select state highest probability (selecting last state event tie), \"random\" sample states randomly probabilities weight state.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/select_endemicity_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select endemicity status from ancestral states probabilities — select_endemicity_status","text":"character vector, selected endemicity status node.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs a sensitivity analysis to test the influences of changing the data on the parameter estimates for the DAISIE maximum likelihood inference model — sensitivity","title":"Runs a sensitivity analysis to test the influences of changing the data on the parameter estimates for the DAISIE maximum likelihood inference model — sensitivity","text":"Runs sensitivity analysis test influences changing data parameter estimates DAISIE maximum likelihood inference model","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs a sensitivity analysis to test the influences of changing the data on the parameter estimates for the DAISIE maximum likelihood inference model — sensitivity","text":"","code":"sensitivity(   phylo,   island_species,   extraction_method,   asr_method,   tie_preference,   island_age,   num_mainland_species,   verbose = FALSE )"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs a sensitivity analysis to test the influences of changing the data on the parameter estimates for the DAISIE maximum likelihood inference model — sensitivity","text":"phylo phylogeny either phylo (ape package) phylo4 (phylobase package) object. island_species Data frame two columns. first character string tip_labels tip names species island. second column character string endemicity status species, either endemic nonendemic. extraction_method character string specifying whether colonisation time extracted minimum time (min) (present), probable time ancestral state reconstruction (asr). asr_method character string, either \"parsimony\" \"mk\" determines whether maximum parsimony continuous-time markov model reconstructs ancestral states node. See documentation castor::asr_max_parsimony() castor::asr_mk_model() castor R package details methods used. tie_preference Character string, either \"island\" \"mainland\" choose probable state node using max.col() function. node island presence absence equally probable need decide whether species considered island. consider island use ties.method = \"last\" max.col() function, consider island use ties.method = \"first\". Default \"island\". island_age Age island appropriate units. num_mainland_species size mainland pool, .e. number species can potentially colonise island. verbose Boolean. States intermediate results printed console. Defaults FALSE","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs a sensitivity analysis to test the influences of changing the data on the parameter estimates for the DAISIE maximum likelihood inference model — sensitivity","text":"Data frame parameter estimates parameter setting used inferring ","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/setophaga_phylod.html","id":null,"dir":"Reference","previous_headings":"","what":"A phylogenetic tree of setophaga species with endemicity status as tip states. — setophaga_phylod","title":"A phylogenetic tree of setophaga species with endemicity status as tip states. — setophaga_phylod","text":"phylogenetic tree setophaga species endemicity status tip states.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/setophaga_phylod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A phylogenetic tree of setophaga species with endemicity status as tip states. — setophaga_phylod","text":"","code":"setophaga_phylod"},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/setophaga_phylod.html","id":"setophaga-phylod","dir":"Reference","previous_headings":"","what":"setophaga_phylod","title":"A phylogenetic tree of setophaga species with endemicity status as tip states. — setophaga_phylod","text":"phylo4d object (phylobase package) 19 tips 18 internal nodes.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/setophaga_phylod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A phylogenetic tree of setophaga species with endemicity status as tip states. — setophaga_phylod","text":"Valente, L.M., .B. Phillimore R.S. Etienne (2015). Equilibrium non-equilibrium dynamics simultaneously operate Galapagos islands. Ecology Letters 18: 844-852.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/sse_states_to_endemicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SSE states back to endemicity status — sse_states_to_endemicity","title":"Convert SSE states back to endemicity status — sse_states_to_endemicity","text":"Convert SSE states back endemicity status","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/sse_states_to_endemicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert SSE states back to endemicity status — sse_states_to_endemicity","text":"","code":"sse_states_to_endemicity(states, sse_model = \"musse\")"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/sse_states_to_endemicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SSE states back to endemicity status — sse_states_to_endemicity","text":"states integer vector tip states, expected SSE models sse_model either \"musse\" (default) \"geosse\". MuSSE expects state values 1, 2, 3, encode \"not_present\", \"endemic\", \"nonendemic\", respectively. GeoSSE expects trait values 0, 1, 2, 0 widespread state (, \"nonendemic\"), 1 2 \"not_present\" \"endemic\", respectively.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/sse_states_to_endemicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SSE states back to endemicity status — sse_states_to_endemicity","text":"character vector values \"endemic\", \"nonendemic\" /\"not_present\"","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a string of the various ways the island species status can be and returns a uniform all lower-case string of the same status to make handling statuses easier in other function — translate_status","title":"Takes a string of the various ways the island species status can be and returns a uniform all lower-case string of the same status to make handling statuses easier in other function — translate_status","text":"Takes string various ways island species status can returns uniform lower-case string status make handling statuses easier function","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a string of the various ways the island species status can be and returns a uniform all lower-case string of the same status to make handling statuses easier in other function — translate_status","text":"","code":"translate_status(status)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a string of the various ways the island species status can be and returns a uniform all lower-case string of the same status to make handling statuses easier in other function — translate_status","text":"status Character endemicity status colonising clade. Either \"endemic\" \"nonendemic\".","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes a string of the various ways the island species status can be and returns a uniform all lower-case string of the same status to make handling statuses easier in other function — translate_status","text":"Character string","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/translate_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes a string of the various ways the island species status can be and returns a uniform all lower-case string of the same status to make handling statuses easier in other function — translate_status","text":"","code":"translate_status(\"Endemic\") #> [1] \"endemic\""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/unique_island_genera.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines the unique endemic genera that are included in the island clades contained within the island_tbl object and stores them as a list with each genus only occuring once in the first island clade it appears in — unique_island_genera","title":"Determines the unique endemic genera that are included in the island clades contained within the island_tbl object and stores them as a list with each genus only occuring once in the first island clade it appears in — unique_island_genera","text":"Determines unique endemic genera included island clades contained within island_tbl object stores list genus occuring first island clade appears ","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/unique_island_genera.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines the unique endemic genera that are included in the island clades contained within the island_tbl object and stores them as a list with each genus only occuring once in the first island clade it appears in — unique_island_genera","text":"","code":"unique_island_genera(island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/unique_island_genera.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines the unique endemic genera that are included in the island clades contained within the island_tbl object and stores them as a list with each genus only occuring once in the first island clade it appears in — unique_island_genera","text":"island_tbl instance Island_tbl class.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/unique_island_genera.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines the unique endemic genera that are included in the island clades contained within the island_tbl object and stores them as a list with each genus only occuring once in the first island clade it appears in — unique_island_genera","text":"list character vectors","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/unique_island_genera.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines the unique endemic genera that are included in the island clades contained within the island_tbl object and stores them as a list with each genus only occuring once in the first island clade it appears in — unique_island_genera","text":"","code":"phylod <- create_test_phylod(test_scenario = 6) island_tbl <- suppressWarnings(extract_island_species(   phylod = phylod,   extraction_method = \"asr\", )) phylod <- create_test_phylod(test_scenario = 7) island_tbl <- suppressWarnings(extract_island_species(   phylod = phylod,   extraction_method = \"asr\",   island_tbl = island_tbl )) unique_genera <- unique_island_genera(island_tbl = island_tbl)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_biogeobears_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Write input files for BioGeoBEARS — write_biogeobears_input","title":"Write input files for BioGeoBEARS — write_biogeobears_input","text":"Write input files BioGeoBEARS analysis, .e. phlyogenetic tree Newick format occurrence data PHYLIP format.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_biogeobears_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write input files for BioGeoBEARS — write_biogeobears_input","text":"","code":"write_biogeobears_input(phylod, path_to_phylo, path_to_biogeo)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_biogeobears_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write input files for BioGeoBEARS — write_biogeobears_input","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. path_to_phylo string specifying path name write phylogeny file . path_to_biogeo string specifying path name write biogeography file .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_biogeobears_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write input files for BioGeoBEARS — write_biogeobears_input","text":"Nothing, called side-effects","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_newick_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write tree input file for BioGeoBEARS — write_newick_file","title":"Write tree input file for BioGeoBEARS — write_newick_file","text":"Write text file containing phylogenetic tree Newick format expected BioGeoBEARS","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_newick_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write tree input file for BioGeoBEARS — write_newick_file","text":"","code":"write_newick_file(phylod, path_to_phylo)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_newick_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write tree input file for BioGeoBEARS — write_newick_file","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. path_to_phylo string specifying path name write file .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_newick_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write tree input file for BioGeoBEARS — write_newick_file","text":"Nothing, called side-effects.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_phylip_biogeo_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write biogeography input file for BioGeoBEARS — write_phylip_biogeo_file","title":"Write biogeography input file for BioGeoBEARS — write_phylip_biogeo_file","text":"Write text file containing occurrence data tips PHYLIP format expected BioGeoBEARS","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_phylip_biogeo_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write biogeography input file for BioGeoBEARS — write_phylip_biogeo_file","text":"","code":"write_phylip_biogeo_file(phylod, path_to_biogeo)"},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_phylip_biogeo_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write biogeography input file for BioGeoBEARS — write_phylip_biogeo_file","text":"phylod phylo4d object package phylobase containing phylogenetic endemicity data species. path_to_biogeo string specifying path name write file .","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/reference/write_phylip_biogeo_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write biogeography input file for BioGeoBEARS — write_phylip_biogeo_file","text":"Nothing, called side-effects.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"daisieprep-100","dir":"Changelog","previous_headings":"","what":"DAISIEprep 1.0.0","title":"DAISIEprep 1.0.0","text":"CRAN release: 2024-12-17","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"DAISIEprep 1.0.0","text":"Package data (/data) added make easier load data tutorial. data moved inst/extdata /data (#42). new force_nonendemic_singleton argument added extract_island_species(). allows enforcing non-endemic island species extracted singleton lineages island (scenarios) using \"asr\" extraction method. new extract_nonendemic_forced() function added (collaboration @luislvalente, #45). new vignette explaining feature forcing non-endemic species extracted singletons added (collaboration @luislvalente, #45). DAISIEprep tutorial vignette improved. explanations clear, simpler data loading (@luislvalente, #42).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 1.0.0","text":"Input checking added add_island_colonist() (collaboration @luislvalente, #48). Warn create_endemicity_status() species provided user found phylogeny (collaboration @luislvalente, #46). extract_multi_tip_species() now returns Island_colonist objects col_max_age set TRUE. enables DAISIE make full use max min age information (#51). plot_phylod() now plots x-axis time counting right left correctly label years present (collaboration @luislvalente, #50). package website now structured vignette dropdown menu (#49).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"DAISIEprep 1.0.0","text":"is_multi_tip_speices() now checks multi-tip monophyletic species endemicity status considered multi-tip. fixes bug species phylogeny multiple tips labelled according sampled single island sample extracted using \"min\" algorithm error (#51).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-1-0-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 1.0.0","text":"None","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-4-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"DAISIEprep 0.4.2","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-4-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.4.2","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"DAISIEprep 0.4.2","text":"Fix bug ancestral state reconstruction (see add_asr_node_states()) produces nested island colonists causing island species become duplicated island_tbl previous versions. fix adds new internal function package rm_duplicate_island_species() called extract_island_species() extraction_method = asr. function uses nested_asr_species argument (added extract_island_species()) determine whether duplicated island species kept smaller, recent colonist removed larger, older clade (nested_asr_species = \"split\"), whether smaller, recent colonist removed larger, older clade retain species (nested_asr_species = \"group\"). choices result duplicates removed.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-4-2","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.4.2","text":"None","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-4-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"DAISIEprep 0.4.1","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-4-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.4.1","text":"... (dots) added argument add_asr_node_states() order pass arguments castor R package functions called ancestral state reconstruction (castor::ask_mk_model() castor::asr_max_parsimony()). Tests added check arguments can passed ... add_asr_node_states().","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"DAISIEprep 0.4.1","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-4-1","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.4.1","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"daisieprep-040","dir":"Changelog","previous_headings":"","what":"DAISIEprep 0.4.0","title":"DAISIEprep 0.4.0","text":"CRAN release: 2024-04-02","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"DAISIEprep 0.4.0","text":"rate model (rate_model) can now selected add_asr_node_states() passed castor::asr_mk_model(). Feature suggested @rsetienne.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.4.0","text":"add_missing_species() now errors species name supplied species_to_add_to found island_tbl. Suggested @luislvalente. Function documentation add_island_colonist() arguments improved. Suggested @rsetienne. Unit tests added add_asr_node_states(). Unit test add_missing_species() updated. Markdown formatting enabled Roxygen documentation.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"DAISIEprep 0.4.0","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-4-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.4.0","text":"None","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-3-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"DAISIEprep 0.3.3","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-3-3","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.3.3","text":"Addition corHMM section Extending ASR article, contributed @TheoPannetier.","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-3-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"DAISIEprep 0.3.3","text":"Bug fix sse_states_to_endemicity() (#17).","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-3-3","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.3.3","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"daisieprep-032","dir":"Changelog","previous_headings":"","what":"DAISIEprep 0.3.2","title":"DAISIEprep 0.3.2","text":"CRAN release: 2023-04-25","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-3-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"DAISIEprep 0.3.2","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-3-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.3.2","text":"Converted Extending_asr vignette article Removed remote dependencies due CRAN rules","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"DAISIEprep 0.3.2","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-3-2","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.3.2","text":"None","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-3-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"DAISIEprep 0.3.1","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-3-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.3.1","text":"Updates Sensitivity vignette","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"DAISIEprep 0.3.1","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-3-1","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.3.1","text":"None","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"DAISIEprep 0.3.0","text":"New vignette performance extract_island_species()","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.3.0","text":"Updates Extending ASR vignette Sensitivity vignette","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"DAISIEprep 0.3.0","text":"Bug fix benchmark() function","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-3-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.3.0","text":"None","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"DAISIEprep 0.2.1","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-2-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.2.1","text":"Higher test coverage plot_phylod() tip labels now white space separated","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"DAISIEprep 0.2.1","text":"Bug fixes benchmark() function","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-2-1","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.2.1","text":"None","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-2-1-1","dir":"Changelog","previous_headings":"DAISIEprep 0.2.0","what":"NEW FEATURES","title":"DAISIEprep 0.2.1","text":"Stable version DAISIEprep New functions New documentation vignettes","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-2-1-1","dir":"Changelog","previous_headings":"DAISIEprep 0.2.0","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.2.1","text":"Addition several functions","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-2-1-1","dir":"Changelog","previous_headings":"DAISIEprep 0.2.0","what":"BUG FIXES","title":"DAISIEprep 0.2.1","text":"Bug fixes various functions","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-2-1-1","dir":"Changelog","previous_headings":"DAISIEprep 0.2.0","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.2.1","text":"None","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"new-features-0-2-1-2","dir":"Changelog","previous_headings":"DAISIEprep 0.1.0","what":"NEW FEATURES","title":"DAISIEprep 0.2.1","text":"Beta version DAISIEprep Ready users","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"minor-improvements-0-2-1-2","dir":"Changelog","previous_headings":"DAISIEprep 0.1.0","what":"MINOR IMPROVEMENTS","title":"DAISIEprep 0.2.1","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"bug-fixes-0-2-1-2","dir":"Changelog","previous_headings":"DAISIEprep 0.1.0","what":"BUG FIXES","title":"DAISIEprep 0.2.1","text":"None","code":""},{"path":"https://joshwlambert.github.io/DAISIEprep/news/index.html","id":"deprecated-and-defunct-0-2-1-2","dir":"Changelog","previous_headings":"DAISIEprep 0.1.0","what":"DEPRECATED AND DEFUNCT","title":"DAISIEprep 0.2.1","text":"None","code":""}]
