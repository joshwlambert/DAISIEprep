% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_species_asr.R
\name{extract_species_asr}
\alias{extract_species_asr}
\title{Extracts the colonisation, diversification, and endemicty data from
phylogenetic and endemicity data and stores it in an `Island_tbl` object
using the "asr" algorithm that extract island species given their ancestral
states of either island presence or absence.}
\usage{
extract_species_asr(
  phylod,
  species_label,
  species_endemicity,
  island_tbl,
  include_not_present
)
}
\arguments{
\item{phylod}{A `phylo4d` object from the package `phylobase` containing
phylogenetic and endemicity data for each species.}

\item{species_label}{The tip label of the species of interest.}

\item{species_endemicity}{A character string with the endemicity, either
"endemic" or "nonendemic" of an island species, or "not_present" if not on
the island.}

\item{island_tbl}{An instance of the `Island_tbl` class.}

\item{include_not_present}{A boolean determining whether species not present
on the island should be included in island colonist when embedded within an
island clade. Default is FALSE.}
}
\value{
An object of `island_tbl` class
}
\description{
Extracts the colonisation, diversification, and endemicty data from
phylogenetic and endemicity data and stores it in an `Island_tbl` object
using the "asr" algorithm that extract island species given their ancestral
states of either island presence or absence.
}
\examples{
\dontrun{
set.seed(
  1,
  kind = "Mersenne-Twister",
  normal.kind = "Inversion",
  sample.kind = "Rejection"
)
phylo <- ape::rcoal(10)
phylo$tip.label <- c("bird_a", "bird_b", "bird_c", "bird_d", "bird_e",
                     "bird_f", "bird_g", "bird_h", "bird_i", "bird_j")
phylo <- methods::as(phylo, "phylo4")
endemicity_status <- sample(c("not_present", "endemic", "nonendemic"),
                              size = length(phylobase::tipLabels(phylo)),
                              replace = TRUE)
tip_states <- as.numeric(grepl(pattern = "endemic", x = endemicity_status)) + 1
phylo <- as(phylo, "phylo")
asr <- castor::asr_max_parsimony(phylo, tip_states)
colnames(asr$ancestral_likelihoods) <- c("not_present", "island")
node_states <- max.col(asr$ancestral_likelihoods, ties.method = "last")
node_states <- gsub(pattern = "2", replacement = "island", x = node_states)
node_states <- gsub(pattern = "1", replacement = "not_present", x = node_states)
node_data <- data.frame(
  island_status = node_states,
  row.names = phylobase::nodeId(phylod, "internal")
)
phylod <- phylo4d(
  phylo,
  tip.data = as.data.frame(endemicity_status),
  node.data = node_data
)
island_tbl <- island_tbl()
extract_species_asr(
  phylod = phylod,
  species_label = "bird_g",
  species_endemicity = "endemic",
  island_tbl = island_tbl
)
}
}
